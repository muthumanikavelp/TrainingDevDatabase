"pg_get_functiondef"
"CREATE OR REPLACE PROCEDURE public.pr_email_courseappreq(_course_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 02-02-2023
		SP Code : B04COUE01
		Version No : 01
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_approver_id udd_code := '';
	v_approver_name udd_desc := '';
	v_course_name udd_desc := '';
	v_created_by udd_code  := '';
	v_state_name udd_desc := '';
	v_state_code udd_code := '';
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
begin 
		v_emailtemplate_code := 'EMAIL_COURSE_APPREQ';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get approver id 
		select  approver_id into v_approver_id
		from 	trng_mst_tcourseapproval
		where	course_id = _course_id;
		
		-- Get Course name select * from trng_mst_tcourse
		select course_name, created_by
		into   v_course_name,  v_created_by
		from   trng_mst_tcourse
		where  course_id = _course_id ;
		
		-- Get email id 
		select  email_id ,user_name
		into    v_email_id, v_approver_name 
		from	core_mst_tuser 
		where   user_code = v_approver_id
		and     status_code = 'A';
		
		select  state_code into v_state_code
		from    core_mst_tuser 
		where   user_code = v_created_by
		and     status_code = 'A';
		
		select fn_get_statedesc(v_state_code) into v_state_name;

-- 		if v_email_id <> '' then
-- 			v_email_id := 'yuvarani012000@gmail.com';
-- 		end if;

		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBJECT_APPREQ';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Course Name>>',v_course_name);
		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Course ID>>',_course_id);
-- 		v_email_subject = 'Training Management';
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_approver_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Course ID""',_course_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""State Name""',v_state_name);
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						   
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';
			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_courseapproved(_course_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 02-02-2023
		
		Updated By : Mangai
		Updated Date : 11-04-2023
		
		SP Code : B04COUE02
		Version No : 02
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_updated_by udd_code  := '';
	v_created_name udd_desc := '';
	v_course_name udd_text := '';
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
begin 
		v_emailtemplate_code := 'EMAIL_COURSE_APPROVED';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get Course name 
		select updated_by ,course_name into v_updated_by,v_course_name
		from   trng_mst_tcourse
		where  course_id = _course_id;
		
		-- Get email id 
		select  email_id ,user_name
		into    v_email_id, v_created_name 
		from	core_mst_tuser 
		where   user_code = v_updated_by
		and     status_code = 'A';

-- 		if v_email_id <> '' then
-- 			v_email_id := 'yuvarani012000@gmail.com';
-- 		end if;

		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBJECT_APPROVED';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Course Name>>',v_course_name);
		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Course ID>>',_course_id);
-- 		v_email_subject = 'Training Management';
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_created_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Course ID""',_course_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""approved/Rejected""','approved');
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_courserejected(_course_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 02-02-2023
		
		Updated By : Mangai
		Updated Date : 11-04-2023
		
		SP Code : B04COUE03
		Version No : 02
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_updated_by udd_code  := '';
	v_created_name udd_desc := '';
	v_course_name udd_text := '';
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
begin 
		v_emailtemplate_code := 'EMAIL_COURSE_REJECTED';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get Course name 
		select updated_by,course_name into v_updated_by,v_course_name
		from   trng_mst_tcourse
		where  course_id = _course_id;
		
		-- Get email id 
		select  email_id ,user_name
		into    v_email_id, v_created_name 
		from	core_mst_tuser 
		where   user_code = v_updated_by
		and     status_code = 'A';

-- 		if v_email_id <> '' then
-- 			v_email_id := 'yuvarani012000@gmail.com';
-- 		end if;

		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBJECT_REJECTED';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Course Name>>',v_course_name);
		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Course ID>>',_course_id);
-- 		v_email_subject = 'Training Management';
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_created_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Course ID""',_course_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""approved/ Rejected""','rejected');
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_feedbackpart(_user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan
		Created Date : 31-01-2023
		
		Updated By : Mangai
		Updated Date : 01-03-2023
		
		SP Code : B03FPAE01
		Version No : 02
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_participant_name udd_desc := '';
	v_program_name udd_desc := '';
	v_program_level udd_code := '';
	v_email_subject udd_text := '';
	v_batch_date udd_date := null;
	
	v_config_value udd_desc := '';
begin 
		select config_value into v_config_value from core_mst_tconfig
		where config_name = 'date_format'
		and status_code = 'A';
		
		v_emailtemplate_code := 'EMAIL_FEEDBACK_PART';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		FOR v_colrec IN select  tprogram_id,
								tprogrambatch_id,
								feedback_lang_code,
								trainer_part_id,
								short_url
						from 	trng_trn_tsmstran
						where 	status_code = 'A'
						and 	smstemplate_code = 'SMST_PRT_URL'
						and     (short_url <> '' or short_url isnull)
			Loop
			--Get batch date from program participant table
			select batch_date into v_batch_date
			from   trng_trn_ttprogramparticipant
			where  tprogram_id = v_colrec.tprogram_id
			and    tprogrambatch_id = v_colrec.tprogrambatch_id
			and    participant_id = v_colrec.trainer_part_id;
			
			-- Get program level
			select fn_get_programlevel(v_colrec.tprogram_id) into v_program_level;
			
			-- Get Participant Name
			select fn_get_participantname(v_colrec.tprogram_id,
										  v_colrec.tprogrambatch_id,
										  v_batch_date,
										  v_colrec.trainer_part_id) into v_participant_name;
			
			-- Get email_id
			select email_id into v_email_id from trng_trn_ttprogramparticipant
			where  tprogram_id = v_colrec.tprogram_id
			and    tprogrambatch_id = v_colrec.tprogrambatch_id
			and    participant_id = v_colrec.trainer_part_id
			and    attendance_flag = 'QCD_YES'
			and    status_code <> 'I';
			
-- 			if v_email_id <> '' then
-- 				v_email_id := 'yuvarani012000@gmail.com';
-- 			end if;
			
			-- Get Program Name
			select fn_get_programname(v_colrec.tprogram_id) into v_program_name;
			
			-- Email Subject Creation
			select email_template into v_email_subject 
			from   core_mst_temailtemplate
			where  emailtemplate_code = 'EMAIL_SUBJECT_FBPART';
			
			v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Training Program name>>',v_program_name);
			v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Date>>',(SELECT to_char(v_batch_date::udd_date,v_config_value)));
			
			-- Email Content Creation							  
			v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_participant_name);
			v_email_content := replace(v_email_content collate pg_catalog.""default"",'""programName""',v_program_name);
			v_email_content := replace(v_email_content collate pg_catalog.""default"",'""date""',(SELECT to_char(v_batch_date::udd_date,v_config_value)));
			v_email_content := replace(v_email_content collate pg_catalog.""default"",'""feedbackurl""',v_colrec.short_url);

			-- Insert in email tran table
-- 			if v_email_id <> '' and v_program_level:: udd_int > 69 and (v_colrec.short_url <> '' or v_colrec.short_url notnull) then
 			if v_email_id <> ''  then
			raise notice 'v_email_id : %',v_email_id;
			raise notice 'v_colrec.short_url : %',v_colrec.short_url;
			
				if not exists (select * from trng_trn_temailtran
							   where email_id = v_email_id
							   and 	 emailtemplate_code = v_emailtemplate_code
							   and 	 email_content = v_email_content
							   ) then
							call pr_iud_emailtran(   v_email_id,
													 v_emailtemplate_code,
													 v_email_content,
													 v_current_date,
													 'N',
													 'SYSTEM',
													 'SuperAdmin',
												  	 '',
													 v_email_subject);
													 
													 v_email_id := '';
													 v_email_content := '';
													 v_email_subject := '';
													 
				end if;
			end if;
		end loop;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_feedbacktrainer(_user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 01-02-2023
		SP Code : B03FTAE01
		Version No : 01
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_trainer_name udd_desc := '';
	v_program_name udd_desc := '';
	v_program_level udd_int := 0;
	v_email_subject udd_text := '';
	v_batch_date udd_date := null;
	
	v_config_value udd_desc := '';
begin 
		select config_value into v_config_value from core_mst_tconfig
		where config_name = 'date_format'
		and status_code = 'A';
		
		v_emailtemplate_code := 'EMAIL_FEEDBACK_TRAINER';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		FOR v_colrec IN select  tprogram_id,
								tprogrambatch_id,
								feedback_lang_code,
								trainer_part_id,
								short_url
						from 	trng_trn_tsmstran
						where 	status_code = 'A'
						and 	smstemplate_code = 'SMST_TRN_URL'
			Loop
						
			-- Get program level
			select fn_get_programlevel(v_colrec.tprogram_id) into v_program_level;
			
			-- Get Participant Name select  * from trng_trn_ttprogramtrainer
			select fn_get_trainername(v_colrec.trainer_part_id) into v_trainer_name;
			
			-- Get email_id select * from trng_mst_ttrainer limit 1
			select 		t.email_id into v_email_id 
			from   		trng_trn_ttprogramtrainer  as pt
			inner join  trng_mst_ttrainer as t
			on     		pt.trainer_id = t.trainer_id
			and    		t.status_code = 'A'
			where  		pt.tprogram_id = v_colrec.tprogram_id
			and    		pt.tprogrambatch_id = v_colrec.tprogrambatch_id
			and    		pt.trainer_id = v_colrec.trainer_part_id
			and   		pt.confirmation_flag = 'Y'
			and    		pt.status_code <> 'I';
			
			if v_email_id <> '' then
				v_email_id := 'yuvarani012000@gmail.com';
			end if;
			
			-- Get Program Name
			select fn_get_programname(v_colrec.tprogram_id) into v_program_name;
			
			-- Email Subject Creation
			select email_template into v_email_subject 
			from   core_mst_temailtemplate
			where  emailtemplate_code = 'EMAIL_SUBJECT_TRAINER';
			
-- 			v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'{#programname}',v_program_name);
-- 			v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'{#date}',(SELECT to_char(v_current_date::udd_date,v_config_value)));
			v_email_subject = 'Training Management';
			
			-- Email Content Creation							  
			v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_trainer_name);
			v_email_content := replace(v_email_content collate pg_catalog.""default"",'""programName""',v_program_name);
			v_email_content := replace(v_email_content collate pg_catalog.""default"",'""date""',(SELECT to_char(v_current_date::udd_date,v_config_value)));
			v_email_content := replace(v_email_content collate pg_catalog.""default"",'""feedbackurl""',v_colrec.short_url);
			
			-- Insert in email tran table
			if v_email_id <> '' and v_program_level > 69 and (v_colrec.short_url <> '' or v_colrec.short_url notnull) then
				if not exists (select * from trng_trn_temailtran
							   where email_id = v_email_id
							   and 	 emailtemplate_code = v_emailtemplate_code
							   and 	 email_content = v_email_content
							   ) then
							call pr_iud_emailtran(   v_email_id,
													 v_emailtemplate_code,
													 v_email_content,
													 v_current_date,
													 'N',
													 'SYSTEM',
													 'SuperAdmin',
												  	 '',
													 v_email_subject);
													 
													 v_email_id := '';
													 v_email_content := '';
													 v_email_subject := '';
													 
				end if;
			end if;
		end loop;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_programappreq(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 14-02-2023
		SP Code : B07PRGE01
		Version No : 01
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_approver_id udd_code := '';
	v_approver_name udd_desc := '';
	v_program_name udd_desc := '';
	v_created_by udd_code  := '';
	v_state_name udd_desc := '';
	v_state_code udd_code := '';
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
begin 
		v_emailtemplate_code := 'EMAIL_PROGRAM_APPREQ';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get approver id 
		select  approver_id into v_approver_id
		from 	trng_trn_ttprogramapproval
		where	tprogram_id = _tprogram_id;
		
		-- Get Course name 
		select tprogram_name, created_by
		into   v_program_name,  v_created_by
		from   trng_trn_ttprogram
		where  tprogram_id = _tprogram_id;
		
		-- Get email id 
		select  email_id ,user_name
		into    v_email_id, v_approver_name 
		from	core_mst_tuser 
		where   user_code = v_approver_id
		and     status_code = 'A';

		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBPROG_APPREQ';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Training Program Name>>',v_program_name);
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_approver_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						   
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';
			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_programapproved(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 14-02-2023
		SP Code : B07PRGE02
		Version No : 01
	*/
	v_colrec record;
	
	v_current_date udd_date := null;
	v_coordinator_id udd_code  := '';
	v_coordinator_name udd_desc := '';
	v_program_name udd_text := '';
	
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
begin 
		v_emailtemplate_code := 'EMAIL_PROGRAM_APPROVED';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get Course name 
		select tprogram_name, coordinator_id
		into   v_program_name, v_coordinator_id
		from   trng_trn_ttprogram
		where  tprogram_id = _tprogram_id;
		
		-- Get email id 
		select  email_id ,user_name
		into    v_email_id, v_coordinator_name 
		from	core_mst_tuser 
		where   user_code = v_coordinator_id
		and     status_code = 'A';

		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBPROG_APPROVED';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Training Program Name>>',v_program_name);
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_coordinator_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Approved/ Rejected""','approved');
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_programparticipant(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _participant_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 20-02-2023
		
		Updated By : Mangai
		Updated Date : 06-04-2023
		
		SP Code : B07PPAE01
		Version No : 03
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_participant_name udd_desc := '';
	v_program_name udd_text := '';
	v_tprogram_venue_id udd_code := '';
	v_venue_name udd_desc := '';
	v_addr_line udd_text := '';
	v_venue udd_text := '';
	v_batchdate udd_desc := '';
	
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
	v_config_value udd_desc := '';
begin  
		select config_value into v_config_value from core_mst_tconfig
		where config_name = 'date_format'
		and status_code = 'A';
	
		v_emailtemplate_code := 'EMAIL_PROGRAM_PART';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code
		and    lang_code = _lang_code;
		
		-- Get Program name 
		v_program_name := (select fn_get_programname(_tprogram_id));
		
		-- Get batch start and end date
		select to_char(fn_get_batchstartdate(_tprogram_id,_tprogrambatch_id),v_config_value)||' - ' ||
			   to_char(fn_get_batchenddate(_tprogram_id,_tprogrambatch_id),v_config_value) into v_batchdate;
		
		-- Get email id and participant name
		select  email_id, participant_name 
		into    v_email_id, v_participant_name
		from	trng_trn_ttprogramparticipant
		where   tprogram_id = _tprogram_id
		and     tprogrambatch_id = _tprogrambatch_id
		and     batch_date = _batch_date
		and     participant_id = _participant_id
		and     status_code = 'A';
		
		-- Get venue id from batch table
		select case when confirm_venue_id = ''  or confirm_venue_id isnull then
					tprogram_venue_id 
				else 
					confirm_venue_id
				end 
				into v_tprogram_venue_id
		from   trng_trn_ttprogrambatch
		where  tprogram_id  =  _tprogram_id
		and    tprogrambatch_id = _tprogrambatch_id
		and    status_code <> 'I';
		
		-- Get venue name
		select venue_name into v_venue_name
		from   trng_mst_tvenue 
		where  venue_id = v_tprogram_venue_id
		and    status_code = 'A';
		
		v_venue_name := coalesce(v_venue_name,'');
		
		-- Get venue addr line
		select addr_line into v_addr_line
		from   trng_mst_tvenueaddr 
		where  venue_id = v_tprogram_venue_id
		and    status_code = 'A';
		
		v_addr_line := coalesce(v_addr_line,'');
		
		-- venue
		v_venue := v_venue_name || ' - ' || v_addr_line;
		
		v_venue := coalesce(v_venue,'');
		
		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBPROG_PART';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Training Program Name>>',v_program_name);
		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Batch Date>>',v_batchdate :: udd_desc);

		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_participant_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training program name""',v_program_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""date""',v_batchdate :: udd_desc);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""venue""',v_venue);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""time""','');
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_programrejected(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 14-02-2023
		SP Code : B07PRGE03
		Version No : 01
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_coordinator_id udd_code  := '';
	v_coordinator_name udd_desc := '';
	v_program_name udd_text := '';
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
begin  
		v_emailtemplate_code := 'EMAIL_PROGRAM_REJECTED';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get Course name 
		select tprogram_name, coordinator_id 
		into   v_program_name,v_coordinator_id
		from   trng_trn_ttprogram
		where  tprogram_id = _tprogram_id;
		
		-- Get email id 
		select  email_id ,user_name
		into    v_email_id, v_coordinator_name 
		from	core_mst_tuser 
		where   user_code = v_coordinator_id
		and     status_code = 'A';

		-- Email Subject Creation 
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBPROG_REJECTED';

		v_email_subject := replace(v_email_subject collate pg_catalog.""default"",'<<Training Program Name>>',v_program_name);
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_coordinator_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Approved/ Rejected""','rejected');
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_email_trainingorg(_trngorg_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 05-02-2023
		
		SP Code    : B04TORE01
		Version No : 01
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_email_id udd_text := '';
	v_emailtemplate_code udd_text := '';
	v_email_template udd_text := '';
	v_email_content udd_text := '';
	v_email_subject udd_text := '';
	
	v_trngorg_id udd_code := '';
	v_trngorg_name udd_desc := '';
	v_mobile_no udd_code := '';
	v_contact_person udd_desc := '';
begin 
		v_emailtemplate_code := 'EMAIL_TRAINING_ORG';
		v_current_date := (select now()::udd_date);
		
		-- Get template 
		select email_template into v_email_template 
		from   core_mst_temailtemplate
		where  emailtemplate_code = v_emailtemplate_code;
		
		-- Get trngorg_id, trngorg_name, contact person, email id, mobile_no
		select trngorg_id, trngorg_name, mobile_no, email_id,  contact_person
		into   v_trngorg_id,v_trngorg_name,v_mobile_no,v_email_id,v_contact_person
		from  trng_mst_ttrainingorg
		where trngorg_id = _trngorg_id
		and   status_code = 'A';
		
		-- Email Subject Creation  
		select email_template into v_email_subject 
		from   core_mst_temailtemplate
		where  emailtemplate_code = 'EMAIL_SUBJECT_TRNGORG';
		
		-- Email Content Creation							  
		v_email_content := replace(v_email_template collate pg_catalog.""default"",'""Name""',v_contact_person);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training Organisation Name""',v_trngorg_name);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""Training Org ID""',v_trngorg_id);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""user id""',v_mobile_no);
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""password""','123@4567');	
		v_email_content := replace(v_email_content collate pg_catalog.""default"",'""url""','https://tmdev.flexicode.co.in/#/layout');		
		
		-- Insert in email tran table
		if v_email_id <> ''  then
			if not exists (select * from trng_trn_temailtran
						   where email_id = v_email_id
						   and 	 emailtemplate_code = v_emailtemplate_code
						   and 	 email_content = v_email_content
						   ) then
						   
						call pr_iud_emailtran(   v_email_id,
												 v_emailtemplate_code,
												 v_email_content,
												 v_current_date,
												 'N',
												 'SYSTEM',
												 'SuperAdmin',
												 '',
												 v_email_subject);

												 v_email_id := '';
												 v_email_content := '';
												 v_email_subject := '';
			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_config(_config_name udd_desc, INOUT _result_configfetch refcursor DEFAULT 'rs_config'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		
		SP Code    : B01CONF01
		Version No : 1
	*/
begin
	-- stored procedure body
	open _result_configfetch for select 	
										config_value
								 from   core_mst_tconfig
								 where  config_name = _config_name
								 and    status_code = 'A';
								 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_coursedtl(_course_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_course refcursor DEFAULT 'rs_course'::refcursor, INOUT _result_coursemodule refcursor DEFAULT 'rs_coursemodule'::refcursor, INOUT _result_coursecontent refcursor DEFAULT 'rs_coursecontent'::refcursor, INOUT _result_coursetrainer refcursor DEFAULT 'rs_coursetrainer'::refcursor, INOUT _result_coursenote refcursor DEFAULT 'rs_coursenote'::refcursor, INOUT _result_courseattachment refcursor DEFAULT 'rs_courseattachment'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mohan S
		Created date : 19-09-2022
		
		Updated By   : Mohan S
		Updated Date : 01-02-2023
		
		SP Code		 : B04COUG01
		version no 	 : 07
	*/
 	 v_course_level_jsonb_desc udd_jsonb := '[{}]';
 	 v_course_type_jsonb_desc udd_jsonb := '[{}]';
 	 v_subvertical_jsonb_desc udd_jsonb := '[{}]';
 	 v_category_jsonb_desc udd_jsonb := '[{}]';
 	 v_sp_category_jsonb_desc udd_jsonb := '[{}]';
	 v_participant_jsonb_desc udd_jsonb := '[{}]';
	 v_tsubvertical_jsonb_desc udd_jsonb := '[{}]';
	 
	 v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
   -- Store Procedure Body	  
    -- Course --
	open _result_course for select 
  							  course_gid,
  							  course_id,
  							  course_name,
  							  course_ll_name,
  							  course_desc,
							  coalesce(fn_get_course_level_jsonb(course_level_jsonb,_lang_code)::udd_text,'') as course_level_jsonb_desc,
							  coalesce(fn_get_course_type_jsonb(course_type_jsonb,_lang_code)::udd_text,'') as course_type_jsonb_desc,
							  coalesce(fn_get_subvertical_jsonb(subvertical_jsonb,_lang_code)::udd_text,'') as subvertical_jsonb_desc,
							  coalesce(fn_get_category_jsonb(category_jsonb,_lang_code)::udd_text,'') as category_jsonb_desc,
							  coalesce(fn_get_sp_category_jsonb(sp_category_jsonb,_lang_code)::udd_text,'') as sp_category_jsonb_desc,
							  coalesce(fn_get_participant_jsonb(participant_jsonb,_lang_code)::udd_text,'') as participant_jsonb_desc,
  							  vertical_code,
							  fn_get_masterdesc('QCD_VERTICAL',vertical_code, _lang_code) as vertical_desc,
  							  coalesce(course_duration_days,0) as course_duration_days,
  							  coalesce(course_duration_hours,0) as course_duration_hours,
     					 	  coalesce(to_char(validity_from,v_config_value)::udd_code,'') as validity_from,
							  coalesce(to_char(validity_to,v_config_value)::udd_code,'') as validity_to,
							  coalesce(validity_from::udd_code,'') as org_validity_from,
     						  coalesce(validity_to::udd_code,'') as org_validity_to,
							  coalesce(approver_id,'') as approver_id,
							  coalesce(fn_get_username(approver_id) ,'') as approver_name,
							  coalesce(courseapproval_gid,0) as approver_gid,
  							  indefinite_flag,
							  fn_get_masterdesc('QCD_YES_NO',indefinite_flag, _lang_code) as indefinite_flag_desc,
  							  min_participant_count,
  							  max_participant_count,
							  row_timestamp,
  							  status_code,
							  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc,
							  certificate_flag,
							  fn_get_masterdesc('QCD_YES_NO',certificate_flag, _lang_code) as certificate_flag_desc
  						  from trng_mst_tcourse_view
						  where course_id = _course_id;
-- 	  					  and status_code <> 'I';
						  
	 -- Course Module -- 
	 open _result_coursemodule for select 
									  coursemodule_gid,
									  course_id,
									  coursemodule_id,
									  module_name,
									  module_ll_name,
									  module_desc,
									  subvertical_code,
									  fn_get_masterdesc('QCD_SUBVERTICAL',subvertical_code, _lang_code)::udd_text as subvertical_desc,
									  status_code,
									  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
								  from trng_mst_tcoursemodule
								  where course_id = _course_id
								  and   status_code = 'A';
	
   	 -- Course Content -- 
  	 open _result_coursecontent for select 
									  cc.coursecontent_gid,
									  cc.course_id,
									  cc.coursemodule_id,
									  cm.subvertical_code,
									  fn_get_masterdesc('QCD_SUBVERTICAL',cm.subvertical_code, _lang_code)::udd_text || '-' ||
									  cm.module_name as subvertical_desc,
									  cc.material_desc,
									  cc.lang_code,
									  fn_get_languagedesc(cc.lang_code) as lang_desc,
									  cc.file_type_code,
							  	      fn_get_masterdesc('QCD_FILE_TYPE',cc.file_type_code, _lang_code) as file_type_desc,
									  cc.file_name,
									  cc.file_path,
									  cc.status_code,
							  	      fn_get_masterdesc('QCD_STATUS',cc.status_code, _lang_code) as status_desc
								  from trng_mst_tcoursecontent as cc
								  inner join trng_mst_tcoursemodule as cm
								  on 	cc.course_id = cm.course_id
								  and 	cc.coursemodule_id = cm.coursemodule_id
								  and 	cm.status_code = 'A'
								  where cc.course_id = _course_id
								  and   cc.status_code = 'A';
								  
   	 -- Course Trainer -- 
  	 open _result_coursetrainer for select 
									  -- t.trainer_gid,
									  ct.course_id,
									  ct.coursetrainer_gid,
									  ct.trainer_id,
									  t.trainer_name,
									  c.vertical_code,
							  	      -- fn_get_masterdesc('QCD_VERTICAL',ct.vertical_code, _lang_code) as vertical_desc,
							  	      coalesce(fn_get_trainervertical(ct.trainer_id, _lang_code),'') as vertical_desc,
									  coalesce(fn_get_trainersubvertical(ct.trainer_id, _lang_code),'') as  tsubvertical_jsonb_desc,
									  -- coalesce(fn_get_subvertical(subvertical_jsonb, _lang_code),'') as  tsubvertical_jsonb_desc,
									  --coalesce(v_tsubvertical_jsonb_desc::udd_text,'') as tsubvertical_jsonb_desc,
									  t.trngorg_type_code,
							  	      fn_get_masterdesc('QCD_ORG_TYPE',t.trngorg_type_code, _lang_code) as trngorg_type_desc,
									  t.mobile_no,
									  t.trainer_level_code,
							  	      fn_get_masterdesc('QCD_TRAINER_LEVEL',t.trainer_level_code, _lang_code) as trainer_level_desc,
									  ct.trainer_type_code,
							  	      fn_get_masterdesc('QCD_TRAINER_TYPE',ct.trainer_type_code, _lang_code) as trainer_type_desc,
									  ct.status_code,
							  	      fn_get_masterdesc('QCD_STATUS',ct.status_code, _lang_code) as status_desc
					            from  trng_mst_tcourse as c
								inner join trng_mst_tcoursetrainer ct
								on 	  c.course_id = ct.course_id
								and	  ct.status_code = 'A'
								inner join trng_mst_ttrainer as t 
								on 	  t.trainer_id = ct.trainer_id 
								and   t.status_code = 'A'	
								/*left join trng_mst_ttrainerdomain as td
								on 	  td.trainer_id = t.trainer_id 
								and   td.status_code = 'A'*/
								where ct.course_id = _course_id;
								-- and   c.status_code <> 'I';
							
	 -- Course Notes --
/*	 open _result_coursenote for select  
	 							  note_gid,
								  activity_code,
							  	  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
								  activity_ref_id,
-- 								  note_desc,
-- 								  fn_get_masterdesc('QCD_STATUS',note_desc,_lang_code) as note,
-- 								  note_code,
								  case when note_code isnull then 
											note_desc 
										else 
											fn_get_masterdesc('QCD_STATUS', note_code, 'en_US') || 
											case when reject_reason_code <> '' then
												chr(13) || chr(10) || 'Reject Reason : ' 
												|| fn_get_masterdesc('QCD_COU_REJ', reject_reason_code, 'en_US') 
											else
												''
											end
								  end as note_desc,
								  reject_reason_code,
								  created_date::udd_code as org_created_date,
								  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS')as created_date,
-- 								  coalesce(created_date::udd_code,'') as org_created_date
								  created_by
							from  trng_mst_tnote
							where activity_ref_id = _course_id
							order by created_date asc;*/
		call pr_get_notelist(_course_id,_lang_code,_user_code,_role_code,_result_coursenote);
								
	 -- Course Attachment --
	 open _result_courseattachment for select 
	 									  attachment_gid,
										  activity_code,
							  	  		  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  doc_type_code,
							  	      	  fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code, _lang_code) as doc_type_desc,
										  doc_subtype_code,
							  	      	  fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code, _lang_code) as doc_subtype_desc,
										  file_name,
										  file_path,
										  file_version,
										  file_size,
										  attachment_remark,
										  status_code,
							  	      	  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from  trng_mst_tattachment
									where activity_ref_id = _course_id
									and   status_code = 'A';
  
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_dashboard(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_course refcursor DEFAULT 'rs._result_course'::refcursor, INOUT _result_trainers refcursor DEFAULT 'rs._result_trainers'::refcursor, INOUT _result_programs refcursor DEFAULT 'rs._result_programs'::refcursor, INOUT _result_prog_schedule refcursor DEFAULT 'rs._result_prog_schedule'::refcursor, INOUT _result_trainingprog refcursor DEFAULT 'rs._result_trainingprog'::refcursor, INOUT _result_trainingexp refcursor DEFAULT 'rs._result_trainingexp'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 12-09-2022
		
		Updated By   : Mangai
		Updated Date : 3-04-2023
		
		Sp Code      : B01DBDF01
		Version No   : 5
	*/
 	v_vertical_code udd_code := '';
	v_user_level_code udd_code := '';
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_panchayat_code udd_code := '';
	v_village_code  udd_code := '';
begin
	-- Get vertical code from given user code
	select 	vertical_code , user_level_code
	into    v_vertical_code, v_user_level_code
	from 	core_mst_tuser
	where 	user_code = _user_code
	and 	status_code = 'A';

  -- Course --
  open _result_course for select fn_get_dbcoursecount(_user_code)  as Courses;
						  
  -- Trainers __
  open _result_trainers for select fn_get_dbtrainercount(_user_code)  as Trainers;
  
  -- Programs Completed __
  open _result_programs for select fn_get_dbprngcompletecount(_user_code) as ""Programs Completed"";
  
  -- Programs Scheduled __
  open _result_prog_schedule for  select fn_get_dbprngschedulecount(_user_code) as ""Program Scheduled"";  
  
  -- Training Program Complete --
 /* open _result_trainingprog for select 
  										52 as Block,
										100 as State,
										500 as National;*/
										
	open _result_trainingprog for select 
		  								 to_char(execution_status_date,'Month') as month,
										 fn_get_dbprngcompleteblockcount(_user_code) as Block,
										 fn_get_dbprngcompletestatecount(_user_code) as State,
 								     	 fn_get_dbprngcompletenationalcount(_user_code) as National
								  from   trng_trn_ttprogram
								  where  status_code = 'A'
								  and    execution_status_code = 'C'
								  group by to_char(execution_status_date,'Month');
								  										
  -- Training Expense -- 										
 /* open _result_trainingexp for select
  										22 as Budget,
										100 as Actuals;*/
	open _result_trainingexp for select
		  								 to_char(execution_status_date,'Month') as month,
										 fn_get_dbprngcompletebudgetamt(_user_code) as Budget,
										 fn_get_dbprngcompleteexpenseamt(_user_code) as Actuals
								  from   trng_trn_ttprogram
								  where  status_code = 'A'
								  and    execution_status_code = 'C'
								  group by to_char(execution_status_date,'Month');
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_dashboard_v1(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_course refcursor DEFAULT 'rs._result_course'::refcursor, INOUT _result_trainers refcursor DEFAULT 'rs._result_trainers'::refcursor, INOUT _result_programs refcursor DEFAULT 'rs._result_programs'::refcursor, INOUT _result_prog_schedule refcursor DEFAULT 'rs._result_prog_schedule'::refcursor, INOUT _result_trainingprog refcursor DEFAULT 'rs._result_trainingprog'::refcursor, INOUT _result_trainingexp refcursor DEFAULT 'rs._result_trainingexp'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 12-09-2022
		
		Updated By   : Mangai
		Updated Date : 3-04-2023
		
		Sp Code      : B01DBDF01
		Version No   : 5
	*/
 	v_vertical_code udd_code := '';
	v_user_level_code udd_code := '';
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_panchayat_code udd_code := '';
	v_village_code  udd_code := '';
	v_colrec  record;
	v_nsb record;
begin
	-- Get vertical code from given user code
	select 	vertical_code , user_level_code
	into    v_vertical_code, v_user_level_code
	from 	core_mst_tuser
	where 	user_code = _user_code
	and 	status_code = 'A';

  -- Course --
  open _result_course for select fn_get_dbcoursecount(_user_code)  as Courses;
						  
  -- Trainers __
  open _result_trainers for select fn_get_dbtrainercount(_user_code)  as Trainers;
  
  -- Programs Completed __
  open _result_programs for select fn_get_dbprngcompletecount(_user_code) as ""Programs Completed"";
  
  -- Programs Scheduled __
  open _result_prog_schedule for  select fn_get_dbprngschedulecount(_user_code) as ""Program Scheduled"";  
  
  -- Training Program Complete --
	/*open _result_trainingprog for select 
-- 		  								 to_char(execution_status_date,'Month') as month,
-- 										 fn_get_dbprngcompleteblockcount(_user_code) as Block,
-- 										 fn_get_dbprngcompletestatecount(_user_code) as State,
--  								     	 fn_get_dbprngcompletenationalcount(_user_code) as National
										 '['||'{""Month"":""'||to_char(execution_status_date,'Month')||
													   '"",""Block"":""'||fn_get_dbprngcompleteblockcount(_user_code)||
													   '"",""State"":""'||fn_get_dbprngcompletestatecount(_user_code)||
													   '"",""Nattional"":""'||fn_get_dbprngcompletenationalcount(_user_code)
													   ||'""}'
				                         ||']' 
								  from   trng_trn_ttprogram
								  where  status_code = 'A'
								  and    execution_status_code = 'C'
								  group by to_char(execution_status_date,'Month');*/
								  

								  
	/*open _result_trainingprog for select
											to_char(p.execution_status_date,'Month'),
											count(p.*),
											p.tprogram_level_code,
											fn_get_masterdesc('QCD_LEVEL',p.tprogram_level_code,_lang_code) as program_level_desc
									from   trng_trn_ttprogram as p
									inner join trng_mst_tcourse as c
									on     p.course_id = c.course_id
									and    c.status_code = 'A'
									where  c.vertical_code = v_vertical_code
									and    p.tprogram_level_code in ('69','99','89')
									and    p.status_code = 'A'
									and    p.execution_status_code = 'C'
									group by to_char(p.execution_status_date,'Month'),p.tprogram_level_code;*/
									
	open _result_trainingprog for select
											to_char(p.execution_status_date,'Month'),
											count(p.*),
											p.tprogram_level_code,
											fn_get_masterdesc('QCD_LEVEL',p.tprogram_level_code,_lang_code) as program_level_desc
									from   trng_trn_ttprogram as p
									inner join trng_mst_tcourse as c
									on     p.course_id = c.course_id
									and    c.status_code = 'A'
									where  c.vertical_code = v_vertical_code
									and    p.tprogram_level_code in ('69','99','89')
									and    p.status_code = 'A'
									and    p.execution_status_code = 'C'
									group by to_char(p.execution_status_date,'Month'),p.tprogram_level_code;
									
										
  -- Training Expense -- 		
	open _result_trainingexp for select
		  								 to_char(execution_status_date,'Month') as month,
										 fn_get_dbprngcompletebudgetamt(_user_code) as Budget,
										 fn_get_dbprngcompleteexpenseamt(_user_code) as Actuals
-- 										 '['||'{""Month"":""'||to_char(execution_status_date,'Month')||
-- 													   '"",""Budget"":""'||fn_get_dbprngcompletebudgetamt(_user_code)||
-- 													   '"",""Actuals"":""'||fn_get_dbprngcompleteexpenseamt(_user_code)||
-- 													   '""}'
-- 				                         ||']'
								  from   trng_trn_ttprogram
								  where  status_code = 'A'
								  and    execution_status_code = 'C'
								  group by to_char(execution_status_date,'Month');
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_dependentlist(_parent_code udd_code, _lang_code udd_code, INOUT _result_one refcursor DEFAULT 'rs_resultone'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		SP Code : B01MSTF01
	*/
	v_depend_parent_code 	udd_code := '';
begin
	select 		depend_parent_code into v_depend_parent_code 
	from 		core_mst_tmaster
	where 		master_code = _parent_code 
	and 		parent_code = 'SYS'
	and 		status_code = 'A' ;

	-- stored procedure body
	open _result_one for select 
							master_code as depend_code,
							fn_get_masterdesc(parent_code,master_code,_lang_code) as depend_desc
				  from 		core_mst_tmaster
				  where 	parent_code = v_depend_parent_code
				  and		status_code = 'A';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_feedbackparticipant(_tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_user, _lang_code udd_code, _role_code udd_code, INOUT _result_feedbackheader refcursor DEFAULT 'rs_feedbackheader'::refcursor, INOUT _result_fbparticipantlist refcursor DEFAULT 'rs_fbparticipantlistlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 24-01-2023
		
		Created By   : Mangai
		Created Date : 16-02-2023
		
		SP Code : B03FPAF01
		Version No   : 06
	*/
	
	v_questionaire_type_code udd_code := '';
	v_lang_code udd_code := '';
	
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';

	open _result_feedbackheader for select distinct
											    fp.tprogram_id,
												fn_get_programname(fp.tprogram_id) as tprogram_name,
												coordinator_id,
												fn_get_username(coordinator_id) as coordinator_name,
												fn_get_concattrainername(fp.tprogram_id,fp.tprogrambatch_id) as trainer_name,
-- 												p.start_date as org_start_date,
												to_char(p.start_date,v_config_value)|| ' - ' || to_char(p.end_date,v_config_value) as program_date,
-- 												p.end_date as org_end_date,
												fp.tprogrambatch_id,
												fn_get_batchname(fp.tprogram_id,fp.tprogrambatch_id) as batch_name,
												fp.participant_id,
												fn_get_participantname(fp.participant_id) as participant_name,
												fn_get_concattrainername(fp.tprogram_id,fp.tprogrambatch_id)as trainer_name,
-- 												pp.batch_date as org_batch_date,
-- 												to_char(pp.batch_date,v_config_value) as batch_date,
-- 												fn_get_batchenddate(fp.tprogram_id,fp.tprogrambatch_id) as org_batch_end_date,
-- 												fn_get_batchstartdate(fp.tprogram_id,fp.tprogrambatch_id) as org_batch_start_date,
												to_char(fn_get_batchstartdate(fp.tprogram_id,fp.tprogrambatch_id),v_config_value)||' - ' ||
													to_char(fn_get_batchenddate(fp.tprogram_id,fp.tprogrambatch_id),v_config_value) as program_batch_date
									from        trng_trn_tfeedbackparticipant as fp
									inner join  trng_trn_ttprogram as p
									on          fp.tprogram_id = p.tprogram_id
									and         p.status_code <> 'I' 
									inner join  trng_trn_ttprogramparticipant as pp
									on          fp.tprogram_id = pp.tprogram_id
									and         fp.tprogrambatch_id = pp.tprogrambatch_id
									and         fp.participant_id = pp.participant_id
									and         pp.status_code <> 'I'
									where       fp.tprogram_id = _tprogram_id
									and         fp.tprogrambatch_id = _tprogrambatch_id
									and         fp.lang_code = _lang_code;
-- 									and         pp.feedback_status in ('QCD_COMPLETED','QCD_PENDING');

	open _result_fbparticipantlist for select distinct	
												fp.tprogram_id,
												fp.tprogrambatch_id,
-- 												pp.batch_date as org_batch_date,
-- 												to_char(pp.batch_date,v_config_value) as batch_date,
-- 												fn_get_batchenddate(fp.tprogram_id,fp.tprogrambatch_id) as org_batch_end_date,
-- 												to_char(fn_get_batchenddate(fp.tprogram_id,fp.tprogrambatch_id),v_config_value) as batch_end_date,
-- 												fn_get_batchstartdate(fp.tprogram_id,fp.tprogrambatch_id) as org_batch_start_date,
-- 												to_char(fn_get_batchstartdate(fp.tprogram_id,fp.tprogrambatch_id),v_config_value) as batch_start_date,
												fp.participant_id,
												fn_get_participantname(fp.participant_id) as participant_name,
												fp.questionaire_id,
												fn_get_questionairegrpid(fp.question_id) as questionairegrp_id,
												fn_get_questiongroupname(fp.question_id,_lang_code) as questionairegrp_desc,
												fn_get_questiongroupseqno(fp.question_id)as questionairegrp_seq_no,
												fp.question_id,
												qstt.question_desc,
												qst.question_seq_no,
												qst.question_type_code,
												fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,_lang_code) as question_type_desc,
												coalesce(fp.participants_feedback_code,'') as response_code,
												case when qst.question_type_code = 'QCD_FREETEXT' then
															fp.participants_response 
													 else 
															fn_get_masterdesc(qst.question_code,fp.participants_feedback_code,_lang_code) 
													 end as response,
												fp.response_status,
												fn_get_masterdesc('QCD_RESPONSE_STATUS',fp.response_status,_lang_code) as response_status_desc
									from        trng_trn_tfeedbackparticipant as fp
									inner join  trng_mst_tquestion as qst
									on          fp.question_id = qst.question_id
									and         fp.questionaire_id = qst.questionaire_id
									and         qst.status_code = 'A'
									inner join  trng_mst_tquestiontranslate as qstt
									on          qst.question_id = qstt.question_id
									and         fp.lang_code = qstt.lang_code
									inner join  trng_trn_ttprogramparticipant as pp
									on          fp.tprogram_id = pp.tprogram_id
									and         fp.tprogrambatch_id = pp.tprogrambatch_id
									and         fp.participant_id = pp.participant_id
									where       fp.tprogram_id = _tprogram_id
									and         fp.tprogrambatch_id = _tprogrambatch_id
									and         fp.lang_code = _lang_code
-- 									and 		pp.feedback_status in ('QCD_COMPLETED','QCD_PENDING')
-- 									and         qstt.lang_code = _lang_code
									order by    fp.participant_id,questionairegrp_seq_no,question_seq_no;				
																						
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_masterdependdescription(_parent_code udd_code, _depend_code udd_code, _lang_code udd_code, INOUT _result_fetchmstdesc refcursor DEFAULT 'rs_rlfetchmstdesc'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mohan S
		Created Date : 24-08-2022
		SP Code : B01CMBF02
	*/
	v_depend_parent_code 	udd_code := '';
begin
	-- stored procedure body
			select 		depend_parent_code into v_depend_parent_code 
			from 		core_mst_tmaster
			where 		master_code = _parent_code 
			and 		parent_code = 'SYS'
			and 		status_code = 'A' ;
			
	if (v_depend_parent_code <> '' and _depend_code <> '') then
		open _result_fetchmstdesc for  select 		
													a.depend_parent_code,
													a.depend_code,
													a.master_code,
													fn_get_masterdesc(a.parent_code,a.master_code,_lang_code) as master_desc,
													a.rec_slno
										from 		core_mst_tmaster as a 
										where 		a.parent_code = _parent_code 
										and 		a.depend_code = _depend_code
										and 		a.status_code = 'A'
										order by    a.rec_slno;
	else
		open _result_fetchmstdesc for  select 		
													a.depend_parent_code,
													a.depend_code,
													a.master_code,
													fn_get_masterdesc(a.depend_parent_code,a.depend_code,_lang_code) as depend_desc,
													fn_get_masterdesc(a.parent_code,a.master_code,_lang_code) as master_desc,
													a.rec_slno
										from 		core_mst_tmaster as a 
										where 		a.parent_code = _parent_code
										and 		a.status_code = 'A'
										order by    a.rec_slno;
	
	/*
	if (v_depend_parent_code <> '' and _depend_code <> '') then
		open _result_fetchmstdesc for  select 		b.master_code,
													b.master_desc,
													a.depend_parent_code,
													a.depend_code,
													fn_get_masterdesc(a.parent_code,a.master_code,_lang_code) as depend_desc
										from 		core_mst_tmaster as a 
										inner join 	core_mst_tmastertranslate as b 
										on 			a.parent_code = b.parent_code 
										and 		a.master_code = b.master_code 
										where 		a.parent_code = _parent_code 
										and 		a.depend_code = _depend_code 
										and 		b.lang_code = _lang_code
										and 		a.status_code = 'A'
										order  by 	b.master_desc;
	
	/*
		open _result_fetchmstdesc for  select 		b.master_code,
													b.master_desc,
													a.depend_parent_code,
													a.depend_code,
													fn_get_masterdesc(a.depend_parent_code,a.depend_code,_lang_code) as depend_desc
										from 		core_mst_tmaster as a 
										inner join 	core_mst_tmastertranslate as b 
										on 			a.parent_code = b.parent_code 
										and 		a.master_code = b.master_code 
										where 		a.parent_code = v_depend_parent_code 
										and 		a.master_code = _depend_code 
										and 		b.lang_code = _lang_code
										and 		a.status_code = 'A';
										
	*/
	else
		open _result_fetchmstdesc for  select 		b.master_code,
													b.master_desc,
													a.depend_parent_code,
													a.depend_code,
													fn_get_masterdesc(a.depend_parent_code,a.depend_code,_lang_code) as depend_desc
										from 		core_mst_tmaster as a 
										inner join 	core_mst_tmastertranslate as b 
										on 			a.parent_code = b.parent_code 
										and 		a.master_code = b.master_code 
										where 		a.parent_code = _parent_code 
										and 		b.lang_code = _lang_code
										and 		a.status_code = 'A'
										order  by 	b.master_desc;
	*/
	end if;			  				 		
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_masterdescription(_parent_code udd_code, _lang_code udd_code, INOUT _result_fetchmstdesc refcursor DEFAULT 'rs_rlfetchmstdesc'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare 
	/*
		Created By : Mohan S
		Created Date : 07-09-2021
		SP Code : B01CMBF01
	*/
begin
	-- stored procedure body
	/*if _parent_code = 'QCD_QUESTGRP_CODE'
	then
		open _result_fetchmstdesc for  select 		b.master_code as que_master_code,
													b.master_desc as que_master_desc
										from 		core_mst_tmaster as a 
										inner join 	core_mst_tmastertranslate as b 
										on 			a.parent_code = b.parent_code 
										and 		a.master_code = b.master_code 
										where 		a.parent_code = _parent_code 
										and 		b.lang_code = _lang_code
										and 		a.status_code = 'A';
	else*/
		open _result_fetchmstdesc for  select 		b.master_code as master_code,
													b.master_desc as master_desc,
													a.rec_slno
										from 		core_mst_tmaster as a 
										inner join 	core_mst_tmastertranslate as b 
										on 			a.parent_code = b.parent_code 
										and 		a.master_code = b.master_code 
										where 		a.parent_code = _parent_code 
										and 		b.lang_code = _lang_code
										and 		a.status_code = 'A'
										order by    a.rec_slno;
	-- end if;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_masterdtl(_master_code udd_code, _parent_code udd_code, _lang_code udd_code, INOUT _result_mstdtl refcursor DEFAULT 'rs_mstdtl'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare 
	/*
		Created By : Mohan S
		Created Date : 07-09-2022
		SP Code : B01MSTF01
	*/
begin
	-- stored procedure body 
		open _result_mstdtl  for 	select 		b.master_code as master_code,
												a.master_gid as master_gid,
												b.mastertranslate_gid as mastertranslate_gid,
												a.parent_code as parent_code,
												a.depend_parent_code as depend_parent_code,
												a.depend_code as depend_code,
												fn_get_masterdesc('QCD_STATUS',a.status_code,_lang_code) as Status,
												to_char(a.row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp,
 												c.lang_name as lang_name,
 												c.lang_code as lang_code,
												b.master_desc as master_desc
									from 		core_mst_tmaster as a 
									inner join 	core_mst_tmastertranslate as b 
									on 			a.parent_code = b.parent_code 
									and 		a.master_code = b.master_code 
									inner join  core_mst_tlanguage as c 
									on 			b.lang_code = c.lang_code
									where 		a.master_code = _master_code 
									and 		a.parent_code = _parent_code
-- 									and 		c.lang_code <> 'en_US'
									and 		a.status_code = 'A';
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_menulist(_role_code udd_code, _lang_code udd_code, INOUT _result_menufetch refcursor DEFAULT 'rs_menufetch'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 24-08-2022
		SP Code : B01MNUF01
	*/
begin
	-- stored procedure body
	open _result_menufetch for select 	Distinct
								 rol.role_code as role_code,
								 rol.role_name as role_name,
								 rol.status_code as status_code,
								 fn_get_masterdesc('QCD_STATUS',rol.status_code,_lang_code) as status_desc,
				  				 rolmenu.menu_code as menu_code,
								 fn_get_menudesc(rolmenu.menu_code,_lang_code) as menu_desc,
-- 								 mentran.menu_desc as menu_desc,
								 menu.parent_code as parent_code,
								 menu.url_action_method as url_action_method,
								 menu.menu_type_code as menu_type_code,
								 rolmenu.add_flag as add_flag,
								 rolmenu.modifiy_flag as modifiy_flag,
								 rolmenu.view_flag as view_flag,
								 rolmenu.auth_flag as auth_flag,
								 rolmenu.print_flag as print_flag,
								 rolmenu.inactive_flag as inactive_flag,
								 rolmenu.deny_flag as deny_flag,
								 menu.menu_slno
				  from 		 core_mst_trole as rol
				  inner join core_mst_trolemenurights as rolmenu 
				  on 		 rolmenu.role_code = rol.role_code
				  inner join core_mst_tmenutranslate as mentran 
				  on 		 mentran.menu_code = rolmenu.menu_code
				  inner join core_mst_tmenu as menu 
				  on 		 menu.menu_code = mentran.menu_code
				  and 	 	 menu.status_code = 'A'
				  where		 rol.status_code = 'A' 
				  and 		 rolmenu.role_code = _role_code 
-- 				  and   	 mentran.lang_code = _lang_code
				  and 	rolmenu.deny_flag       <> 'Y'
-- 				  and 		 menu.parent_code = 'MAIN'
				  and (	rolmenu.add_flag 		= 'Y' 	or rolmenu.modifiy_flag 	= 'Y'
				  or 	rolmenu.view_flag 		= 'Y' 	or rolmenu.auth_flag 		= 'Y' 
				  or 	rolmenu.print_flag 		= 'Y' 	or rolmenu.inactive_flag 	= 'Y')	
				  order by 	 menu.menu_slno asc;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_menutranslate(_menutranslate_gid udd_int, _lang_code udd_code, INOUT _result_menutranslate refcursor DEFAULT 'rs_menutranslate'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		SP Code      : B01METF01
	*/
	-- Menu Translate Details--
	open _result_menutranslate for select 
							menutranslate_gid,
							menu_code,
							lang_code,	
							menu_desc					
				  from 		core_mst_tmenutranslate 				 
				  where 	menutranslate_gid 	= _menutranslate_gid
		   		  order by 	menutranslate_gid;				  
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_messagedtl(_msg_code udd_code, _lang_code udd_code, INOUT _result_message refcursor DEFAULT 'rs_message'::refcursor, INOUT _result_messagetranslate refcursor DEFAULT 'rs_messagetranslate'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01SCRCUD
		
		Updated By : Chinnasamy
		Updated Date : 16-11-2022
		
		Version No : 02
	*/
	-- Message Details
	open _result_message for select 	
							msg_gid,
							msg_code,											
							status_code,
							fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc,
							created_date::udd_code as org_created_date,
							created_by,
							updated_date,
							updated_by							
				  from 		core_mst_tmessage 				 
				  where 	msg_code 	= _msg_code
		   		  order by 	msg_gid;	

-- Message Translate Details--
	open _result_messagetranslate for select 
							msgtranslate_gid,
							msg_code,
							lang_code,	
							msg_desc					
				  from 		core_mst_tmessagetranslate 				 
				  where 	msg_code 		= _msg_code
		   		  order by 	msgtranslate_gid;				  
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_messagetranslate(_msgtranslate_gid udd_int, _lang_code udd_code, INOUT _result_messagetranslate refcursor DEFAULT 'rs_messagetranslate'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mohan s
		Created Date : 24-08-2022
		SP Code : B01MGTG01
	*/
	-- Message Translate Details--
	open _result_messagetranslate for select 
							msgtranslate_gid,
							msg_code,
							lang_code,	
							msg_desc					
				  from 		core_mst_tmessagetranslate 				 
				  where 	msgtranslate_gid 	= _msgtranslate_gid
		   		  order by 	msgtranslate_gid;				  
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_notedtl(_note_gid udd_int, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_notedtl refcursor DEFAULT 'rs_notedtl'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By   : Mangai
		Created Date : 28-10-2022
		
		Updated By 	 : Mangai 
		Updated Date : 26-11-2022 
		
		SP Code      : B04CONG02
		Version no   : 4
		
	*/
	-- stored procedure body
	open _result_notedtl for select 	
										  note_gid,
										  activity_code,
										  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  --note_desc,
										  case when note_code isnull then 
												note_desc 
										  else 
												fn_get_masterdesc('QCD_NOTE_STATUS', note_code, 'en_US') || 
												case when reject_reason_code <> '' then
													' - ' 
													|| fn_get_masterdesc('QCD_REJ_REASON', reject_reason_code, 'en_US') 
											else
												case when deactivation_reason_code <> '' then
													' - ' 
													|| fn_get_masterdesc('QCD_DEA_REASON', deactivation_reason_code, 'en_US') 
											else
												case when sendback_reason <> '' then
													' - ' 
													|| sendback_reason
											else
												case when note_code = 'A' then
													'' || fn_get_username(created_by) 
											else
												''
												end
												end
												end
												end
										  end as note_desc,
										  note_code,
										  reject_reason_code,
										  deactivation_reason_code,
										  sendback_reason,
										  created_date::udd_date,
										  created_date::udd_code as org_created_date,
										  fn_get_username(created_by) as created_by
									from  trng_mst_tnote
									where note_gid = _note_gid;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_progbudgetdtl(_tprogrambudget_gid udd_int, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_progbudgetdtl refcursor DEFAULT 'rs_progbudgetdtl'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 28-10-2022
		
		Updated By   : Satheesh
		Updated Date : 15-11-2022
		SP Code		 : B07PBUG02		
	*/
 	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
  -- Store Procedure Body
 open _result_progbudgetdtl for select 
  							  		   tprogrambudget_gid,
									   tprogram_id,
									   tprogrambatch_id,
-- 									   batch_date,
									   to_char(batch_date, v_config_value) as batch_date,
									   coalesce(batch_date ::udd_code, '') as org_batch_date,
									   expense_code,
									   fn_get_masterdesc('QCD_EXPENSE',expense_code,_lang_code) as expense_desc,
									   budget_desc,
									   budget_amount,
									   status_code,
									   fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
						         from  trng_trn_ttprogrambudget
						         where tprogrambudget_gid = _tprogrambudget_gid;
						  
End;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_progexpdtl(_tprogramexpense_gid udd_int, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_progexpdtl refcursor DEFAULT 'rs_progexpdtl'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 28-10-2022
		
		Updated By   : Mangai
		Updated Date : 19-11-2022
		
		SP Code		 : B07PEXG02
		Version No   : 3
	*/
 	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
  -- Store Procedure Body
    open _result_progexpdtl for select 
  							  		   pe.tprogramexpense_gid,
									   pe.tprogram_id,
									   pe.tprogrambatch_id,
-- 									   expense_date,
									   to_char(pe.expense_date, v_config_value) as expense_date,
									   pe.expense_code,
									   fn_get_masterdesc('QCD_EXPENSE',pe.expense_code,_lang_code) as expense_code_desc,
									   pe.expense_desc,
									   pe.expense_amount,
									   pe.status_code,
									   fn_get_masterdesc('QCD_STATUS',pe.status_code,_lang_code) as status_desc,
									   fn_get_expenseamount(pe.tprogram_id,pe.tprogrambatch_id) as expenseamount,
									   fn_get_totalexpenseamount(pe.tprogram_id) as total_expenseamount,
									   fn_get_totalbudgetamount(pe.tprogram_id) as total_budgetamount,
									   fn_get_budgetamount(pe.tprogram_id,pe.tprogrambatch_id) as budget_amount,
									   pb.tprogrambatch_remark
						    from  	   trng_trn_ttprogramexpense as pe
							inner join trng_trn_ttprogrambatch as pb
							on         pe.tprogram_id      = pb.tprogram_id
							and        pe.tprogrambatch_id = pb.tprogrambatch_id
							where 	   tprogramexpense_gid = _tprogramexpense_gid;
						  
End;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_questemplate(_questionaire_id udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _trainer_id udd_code, _participant_id udd_code, _user_code udd_user, _lang_code udd_code, _role_code udd_code, INOUT _result_feedbackheader refcursor DEFAULT 'rs_feedbackheader'::refcursor, INOUT _result_feedbacklist refcursor DEFAULT 'rs_feedbacklist'::refcursor, INOUT _result_response refcursor DEFAULT 'rs_response'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 21-02-2023
		
		SP Code      : B03QUEF01
		Version No   : 01
	*/
	
	v_questionaire_type_code udd_code := '';
	v_lang_code udd_code := '';
	
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';

	-- Get questionaire type code
	select questionaire_type_code into v_questionaire_type_code
	from   trng_mst_tquestionaire
	where  questionaire_id = _questionaire_id
	and    status_code = 'A';
	
	-- Get batch lang
	select lang_code into v_lang_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id  = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code = 'C';
	
-- 	raise exception '%',v_questionaire_type_code;
	
	-- stored procedure body	
	if v_questionaire_type_code = 'QCD_TRAINER' then
		open _result_feedbackheader for select	distinct
												t.questionaire_id,
												v_questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',v_questionaire_type_code,v_lang_code) as questionaire_type_desc,												
												t.trainer_id,
												t.tprogram_id,
												p.start_date  as org_start_date,
												p.end_date as org_end_date,
												to_char(p.start_date,v_config_value) as start_date,
												to_char(p.end_date,v_config_value) as end_date,
												t.tprogrambatch_id,
												p.coordinator_id,
												'' as coordinator_name,
-- 												fn_get_username(p.coordinator_id) as coordinator_name,
												'' as trainer_name,
												fn_get_programname (t.tprogram_id) as program_name,
												fn_get_batchname (t.tprogram_id,t.tprogrambatch_id) as batch_name,
												coalesce(fn_get_batchstartdate(t.tprogram_id,t.tprogrambatch_id)::udd_code,'') as org_batch_start_date,
												coalesce(fn_get_batchenddate(t.tprogram_id,t.tprogrambatch_id)::udd_code,'') as org_batch_end_date,
												to_char(fn_get_batchstartdate(t.tprogram_id,t.tprogrambatch_id),v_config_value) as batch_start_date,
												to_char(fn_get_batchenddate(t.tprogram_id,t.tprogrambatch_id),v_config_value) as batch_end_date,
												pt.feedback_status,
												fn_get_masterdesc('QCD_FB_STATUS',pt.feedback_status,_lang_code)as feedback_status_desc
										from   	trng_trn_tfeedbacktrainer as t
										inner join trng_trn_ttprogram as p on t.tprogram_id = p.tprogram_id
										inner join trng_trn_ttprogramtrainer as pt
										on      t.trainer_id = pt.trainer_id
										and     t.tprogram_id = pt.tprogram_id   
										and     t.tprogrambatch_id = pt.tprogrambatch_id
										and     pt.status_code = 'A'
										where   t.questionaire_id = _questionaire_id
										and     t.tprogram_id = _tprogram_id
										and     t.tprogrambatch_id = _tprogrambatch_id
										and     t.trainer_id = _trainer_id;
												
		open _result_feedbacklist for select 
												fbt.feedbacktrainer_gid,
-- 												fbt.trainers_feedback_code as tra_par_feedback_code,
-- 												fn_get_masterdesc(qst.question_code,fbt.trainers_feedback_code,v_lang_code) as tra_par_feedback_desc,
-- 												fbt.trainers_response as tra_par_response,
												'' as tra_par_feedback_code,
												'' as tra_par_feedback_desc,
												'' as tra_par_response,
												q.questionaire_id,
												q.questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
												qg.questionairegrp_id,
												qg.questionairegrp_seq_no,
												qg.questionairegrp_code,
												fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
												qstt.question_desc,
												qst.question_id,
												qst.question,
												qst.question_seq_no,
												qst.question_type_code,
												fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
												qst.question_code,
												fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
												qstt.lang_code,
												fn_get_languagedesc(qstt.lang_code) as lang_desc
									from 		trng_mst_tquestionaire as q
									inner join  trng_mst_tquestionairegrp as qg
									on          q.questionaire_id = qg.questionaire_id
									and         q.status_code = 'A'
									and         qg.status_code = 'A'
									inner join  trng_mst_tquestion as qst
									on			qg.questionairegrp_id = qst.questionairegrp_id
									and         qst.status_code = 'A'
									inner join  trng_mst_tquestiontranslate as qstt
									on          qst.question_id = qstt.question_id
									inner join  trng_trn_tfeedbacktrainer as fbt
									on          q.questionaire_id = fbt.questionaire_id
									and         qst.question_id   = fbt.question_id
									and         qst.question_type_code = fbt.question_type_code
									where       q.questionaire_id = _questionaire_id
									and         qstt.lang_code = v_lang_code
									and         fbt.tprogram_id  = _tprogram_id
									and         fbt.tprogrambatch_id = _tprogrambatch_id
									and         fbt.trainer_id = _trainer_id
									order by questionairegrp_seq_no,question_seq_no;
	end if;
	
	if v_questionaire_type_code = 'QCD_PARTICIPANT' then	
		open _result_feedbackheader for select	distinct
												fbp.questionaire_id,
												v_questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',v_questionaire_type_code,v_lang_code) as questionaire_type_desc,		
												fbp.participant_id,
												fbp.tprogram_id,
												p.start_date as org_start_date,
												p.end_date as org_end_date,
												to_char(p.start_date,v_config_value) as start_date,
												to_char(p.end_date,v_config_value) as end_date,
												fbp.tprogrambatch_id,
												p.coordinator_id,
												fn_get_username(p.coordinator_id) as coordinator_name,
												'' as participant_name,
												fn_get_programname (fbp.tprogram_id) as program_name,
												fn_get_batchname (fbp.tprogram_id,fbp.tprogrambatch_id) as batch_name,
												coalesce(fn_get_batchstartdate(fbp.tprogram_id,fbp.tprogrambatch_id)::udd_code,'') as org_batch_start_date,
												coalesce(fn_get_batchenddate(fbp.tprogram_id,fbp.tprogrambatch_id)::udd_code,'') as org_batch_end_date,
												to_char(fn_get_batchstartdate(fbp.tprogram_id,fbp.tprogrambatch_id),v_config_value) as batch_start_date,
												to_char(fn_get_batchenddate(fbp.tprogram_id,fbp.tprogrambatch_id),v_config_value) as batch_end_date,
												pp.feedback_status,
												fn_get_masterdesc('QCD_FB_STATUS',pp.feedback_status,_lang_code)as feedback_status_desc,
												fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name
										from   	trng_trn_tfeedbackparticipant as fbp
										inner join trng_trn_ttprogram as p on fbp.tprogram_id = p.tprogram_id
										inner join trng_trn_ttprogramparticipant as pp
										on      fbp.participant_id = pp.participant_id
										and     fbp.tprogram_id = pp.tprogram_id   
										and     fbp.tprogrambatch_id = pp.tprogrambatch_id
										and     pp.status_code = 'A'
										where   fbp.questionaire_id = _questionaire_id
										and     fbp.tprogram_id = _tprogram_id
										and     fbp.tprogrambatch_id = _tprogrambatch_id
										and     fbp.participant_id = _participant_id;
		
		open _result_feedbacklist for select distinct
												fbp.feedbackparticipant_gid,
-- 												fbp.participants_feedback_code as tra_par_feedback_code,
-- 												fn_get_masterdesc(qst.question_code,fbp.participants_feedback_code,v_lang_code) as tra_par_feedback_desc,
-- 												fbp.participants_response as tra_par_response,
												'' as tra_par_feedback_code,
												'' as tra_par_feedback_desc,
												'' as tra_par_response,
												q.questionaire_id,
												q.questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
												qg.questionairegrp_id,
												qg.questionairegrp_seq_no,
												qg.questionairegrp_code,
												fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
												qstt.question_desc,
												qst.question_id,
												qst.question,
												qst.question_seq_no,
												qst.question_type_code,
												fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
												qst.question_code,
												fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
												'' as trainer_name
-- 												fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name
									from 		trng_mst_tquestionaire as q
									inner join  trng_mst_tquestionairegrp as qg
									on          q.questionaire_id = qg.questionaire_id
									and         q.status_code = 'A'
									and         qg.status_code = 'A'
									inner join  trng_mst_tquestion as qst
									on			qg.questionairegrp_id = qst.questionairegrp_id
									and         qst.status_code = 'A'
									inner join  trng_mst_tquestiontranslate as qstt
									on          qst.question_id = qstt.question_id
									inner join  trng_trn_tfeedbackparticipant as fbp
									on          q.questionaire_id = fbp.questionaire_id
									and         qst.question_id   = fbp.question_id
									and         qst.question_type_code = fbp.question_type_code
									where       q.questionaire_id = _questionaire_id
								    and         qstt.lang_code = v_lang_code
									and         fbp.tprogram_id  = _tprogram_id
									and         fbp.tprogrambatch_id = _tprogrambatch_id
									and         fbp.participant_id = _participant_id
									order by questionairegrp_seq_no,question_seq_no;
	end if;
	
	open _result_response for select    c.* from (select distinct 
										a.master_code,
										a.parent_code,
										b.master_desc
									from core_mst_tmaster as a
									inner join core_mst_tmastertranslate as b
									on a.master_code = b.master_code
									where a.parent_code = 'QCD_RESPONSE'
									and a.status_code = 'A'
									and b.lang_code = v_lang_code
									and a.parent_code <> 'SYS'
							union all 
									select distinct 
										a.master_code,
										a.parent_code,
										b.master_desc
									from core_mst_tmaster as a
									inner join core_mst_tmastertranslate as b
									on a.master_code = b.master_code
									where a.parent_code in (select a.master_code
															from core_mst_tmaster as a
															inner join core_mst_tmastertranslate as b
															on a.master_code = b.master_code
															where a.parent_code = 'QCD_RESPONSE'
															and a.status_code = 'A')
									and a.status_code = 'A'
									and b.lang_code = v_lang_code
									and a.parent_code <> 'SYS') as c;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_questionaire(_questionaire_id udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_questionaire refcursor DEFAULT 'rs_questionaire'::refcursor, INOUT _result_questionairegrp refcursor DEFAULT 'rs_questionairegrp'::refcursor, INOUT _result_questionairenote refcursor DEFAULT 'rs_questionairenote'::refcursor, INOUT _result_questionaireattach refcursor DEFAULT 'rs_questionaireattach'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 30-09-2022
		
		Updated By   : Mangai  
		Updated Date : 29-11-2022
		
		SP Code : B03QTNG01
		version code : 7
	*/
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	-- stored procedure body
	open _result_questionaire for select 	
							    			questionaire_gid,
							    			questionaire_id,
											questionaire_name,
											questionaire_ll_name,
											questionaire_type_code,
											fn_get_masterdesc('QCD_QUESTIONAIRE', questionaire_type_code, _lang_code) as questionaire_type_desc,
											fn_get_language_jsonb(lang_jsonb,_lang_code)as language_jsonb_desc,
											fn_get_course_jsonb(course_jsonb,_lang_code)as course_jsonb_desc,
											coalesce(to_char(validity_from,v_config_value)::udd_code,'') as validity_from,
  							                coalesce(to_char(validity_to,v_config_value)::udd_code,'') as validity_to,
											coalesce(validity_from::udd_text,'') as org_validity_from,
								            coalesce(validity_to::udd_text,'') as org_validity_to,
											indefinite_flag,
											fn_get_masterdesc('QCD_YES_NO', indefinite_flag, _lang_code) as indefinite_flag_desc,
											status_code,
											fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
											to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp
									from 	trng_mst_tquestionaire
									where   questionaire_id = _questionaire_id;
	
	-- Questionaire Group -- 
	open _result_questionairegrp for select
											qg.questionaire_id,
											q.questionaire_gid,
											qg.questionairegrp_id,
											qg.questionairegrp_gid,
											qg.questionairegrp_code,
											fn_get_masterdesc('QCD_QUESTGRP_CODE', qg.questionairegrp_code, ql.lang_code) as questionairegrp_desc,
											qg.questionairegrp_id,
											qg.questionairegrp_gid,
											qg.questionairegrp_code,
											qg.questionairegrp_seq_no,
											que.question_id,
											que.question_gid,
											que.question,
											que.question_seq_no,
											que.question_type_code,
											fn_get_masterdesc('QCD_RESPONSE', que.question_code, ql.lang_code) as question_description,
											fn_get_masterdesc('QCD_QUESTION_TYPE', que.question_type_code, ql.lang_code) as question_type_desc,
											que.question_code,
											0 as questiontranslate_gid,
											ql.lang_code,
											--qt.questiontranslate_gid,
											--qt.lang_code,
											fn_get_languagedesc(ql.lang_code) as language_desc,
											fn_get_questiondesc(que.question_id,ql.lang_code) as question_desc,
											qg.status_code,
											fn_get_masterdesc('QCD_STATUS', qg.status_code, _lang_code) as status_desc
								from 		trng_mst_tquestionaire as q
								inner join  trng_mst_tquestionairegrp as qg
								on          q.questionaire_id = qg.questionaire_id
								inner join  trng_mst_tquestion as que
								on 			qg.questionaire_id = que.questionaire_id
								and 		qg.questionairegrp_id = que.questionairegrp_id
								inner join	trng_mst_vquestionairelang as ql
								on 			q.questionaire_id = ql.questionaire_id
								and 		ql.questionaire_id = _questionaire_id
								where       q.questionaire_id = _questionaire_id
								order by    que.question_seq_no,qg.questionairegrp_seq_no;
									
	 -- Questionaire Note --
	/* open _result_questionairenote for select 
	 								  note_gid,
									  activity_code,
									  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
									  activity_ref_id,
-- 									  note_desc,
-- 									  note_code,
									  case when note_code isnull then 
												note_desc 
											else 
												fn_get_masterdesc('QCD_STATUS', note_code, 'en_US') || 
												case when reject_reason_code <> '' then
													chr(13) || chr(10) || 'Reject Reason : ' 
													|| fn_get_masterdesc('QCD_TRAINER_REJ', reject_reason_code, 'en_US') 
												else
													''
												end
									  end as note_desc,
								  	  reject_reason_code,
									  created_by,
									  created_date:: udd_code as org_created_date,
									  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS') as created_date
								from  trng_mst_tnote
								where activity_ref_id = _questionaire_id
								order by created_date asc;*/
		call pr_get_notelist(_questionaire_id,_lang_code,_user_code,_role_code,_result_questionairenote);						
	 -- Questionaire Attachment --
	 open _result_questionaireattach for select 
	 									  attachment_gid,
										  activity_code,
										  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  doc_type_code,
										  fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code, _lang_code) as doc_type_desc,
										  doc_subtype_code,
										  fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code, _lang_code) as doc_subtype_desc,
										  file_name,
										  file_path,
										  file_version,
										  file_size,
										  attachment_remark,
										  status_code,
										  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from  trng_mst_tattachment
									where activity_ref_id = _questionaire_id
									and   status_code = 'A';
									
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_role(_role_code udd_code, _lang_code udd_code, INOUT _result_rlfetch refcursor DEFAULT 'rs_rlfetch'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 24-08-2022
		SP Code : B01ROLF01
	*/
begin
	-- stored procedure body
	if _role_code = 'pla' then
		open _result_rlfetch for select 	
									 rol.role_code as role_code,
									 rol.role_name as role_name,
									 rol.status_code as status_code,
									 fn_get_masterdesc('QCD_STATUS',rol.status_code,_lang_code) as status_desc,
									 rolmenu.menu_code as menu_code,
									 mentran.menu_desc as menu_desc,
									 menu.parent_code as parent_code,
									 menu.url_action_method as url_action_method,
									 menu.menu_type_code as menu_type_code,
									 rolmenu.add_flag as add_flag,
									 rolmenu.modifiy_flag as modifiy_flag,
									 rolmenu.view_flag as view_flag,
									 rolmenu.auth_flag as auth_flag,
									 rolmenu.print_flag as print_flag,
									 rolmenu.inactive_flag as inactive_flag,
									 rolmenu.deny_flag as deny_flag
					  from 		 core_mst_trole as rol
					  inner join core_mst_trolemenurights as rolmenu 
					  on 		 rolmenu.role_code = rol.role_code
					  inner join core_mst_tmenutranslate as mentran 
					  on 		 mentran.menu_code = rolmenu.menu_code
					  inner join core_mst_tmenu as menu 
					  on 		 menu.menu_code = mentran.menu_code
					  and 	 	 menu.status_code = 'A'
					  and		 menu.menu_type_code = 'T'
					  where		 rol.status_code = 'A' 
					  and 		 rolmenu.role_code = _role_code 
					  and   	 mentran.lang_code = _lang_code
					  and 		 menu.parent_code <> 'SYS'
					  and 		 menu.parent_code <> 'MAIN'
					  and 		 mentran.menu_desc <> 'Change password'
					  order by 	 menu.menu_slno asc;
	else			  
				  open _result_rlfetch for select * from (select 
														  menu.menu_slno,
								 rol.role_code as role_code,
								 rol.role_name as role_name,
								 rol.status_code as status_code,
								 fn_get_masterdesc('QCD_STATUS',rol.status_code,_lang_code) as status_desc,
				  				 rolmenu.menu_code as menu_code,
								 mentran.menu_desc as menu_desc,
								 menu.parent_code as parent_code,
								 menu.url_action_method as url_action_method,
								 menu.menu_type_code as menu_type_code,
								 rolmenu.add_flag as add_flag,
								 rolmenu.modifiy_flag as modifiy_flag,
								 rolmenu.view_flag as view_flag,
								 rolmenu.auth_flag as auth_flag,
								 rolmenu.print_flag as print_flag,
								 rolmenu.inactive_flag as inactive_flag,
								 rolmenu.deny_flag as deny_flag
				  from 		 core_mst_trole as rol
				  inner join core_mst_trolemenurights as rolmenu 
				  on 		 rolmenu.role_code = rol.role_code
				  inner join core_mst_tmenutranslate as mentran 
				  on 		 mentran.menu_code = rolmenu.menu_code
				  inner join core_mst_tmenu as menu 
				  on 		 menu.menu_code = mentran.menu_code
				  and 	 	 menu.status_code = 'A'
				  and		 menu.menu_type_code = 'L'
				  where		 rol.status_code = 'A' 
				  and 		 rolmenu.role_code = _role_code 
				  and   	 mentran.lang_code = _lang_code
				  and 		 menu.parent_code <> 'SYS'
				  and 		 menu.parent_code <> 'MAIN'
				union all
				  select 	menu.menu_slno,
								 rol.role_code as role_code,
								 rol.role_name as role_name,
								 rol.status_code as status_code,
								 fn_get_masterdesc('QCD_STATUS',rol.status_code,_lang_code) as status_desc,
				  				 rolmenu.menu_code as menu_code,
								 mentran.menu_desc as menu_desc,
								 menu.parent_code as parent_code,
								 menu.url_action_method as url_action_method,
								 menu.menu_type_code as menu_type_code,
								 rolmenu.add_flag as add_flag,
								 rolmenu.modifiy_flag as modifiy_flag,
								 rolmenu.view_flag as view_flag,
								 rolmenu.auth_flag as auth_flag,
								 rolmenu.print_flag as print_flag,
								 rolmenu.inactive_flag as inactive_flag,
								 rolmenu.deny_flag as deny_flag
				  from 		 core_mst_trole as rol
				  inner join core_mst_trolemenurights as rolmenu 
				  on 		 rolmenu.role_code = rol.role_code
				  inner join core_mst_tmenutranslate as mentran 
				  on 		 mentran.menu_code = rolmenu.menu_code
				  inner join core_mst_tmenu as menu 
				  on 		 menu.menu_code = mentran.menu_code
				  and 	 	 menu.status_code = 'A'
				  and		 menu.menu_type_code = 'T'
				  where		 rol.status_code = 'A' 
				  and 		 rolmenu.role_code = _role_code 
				  and   	 mentran.lang_code = _lang_code
				  and 		 menu.parent_code <> 'SYS'
				  and 		 menu.parent_code <> 'MAIN'
				  and 		 mentran.menu_code in ('MASCHP007','MASPRM004')) as a
				  order by a.menu_slno;
	end if;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_screendtl(_screen_code udd_code, _lang_code udd_code, INOUT _result_screen refcursor DEFAULT 'rs_screen'::refcursor, INOUT _result_screendata refcursor DEFAULT 'rs_screendata'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01SCRG02
		
		Updated By : Chinnasamy
		Updated Date : 16-11-2022
	*/
	-- Screen Details
	open _result_screen for select 	
							screen_gid,
							screen_code,
							screen_name,														
							status_code,
							fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc,
							created_date::udd_code as org_created_date,
							created_by,
							updated_date,
							updated_by							
				  from 		core_mst_tscreen 				 
				  where 	screen_code 		= _screen_code
		   		  order by 	status_code,screen_gid;	

		  -- Screen Data Details--
	open _result_screendata for select 
							screendata_gid,
							screen_code,
							lang_code,	
							ctrl_type_code,	
							fn_get_masterdesc('QCD_CTRL_TYPE',ctrl_type_code,_lang_code) as ctrl_type_desc,
							ctrl_id,	
							data_field,	
							label_desc,	
							tooltip_desc,
							default_label_desc,	
							default_tooltip_desc,	
							ctrl_slno,												
							created_date:: udd_code as org_created_date,
							created_by,
							updated_date,
							updated_by							
				  from 		core_mst_tscreendata 				 
				  where 	screen_code 		= _screen_code
		   		  order by 	screendata_gid;		
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_smstran(_pg_id udd_code, _lang_code udd_code, INOUT _result_smstran refcursor DEFAULT 'rs_smstran'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By   : Mangai
		Created Date : 25-01-2022
		SP Code      : B04SMSCXD
		
		Updated By : Chinnasamy
		Updated Date : 16-11-2022
	*/
	
	open _result_smstran for select 
							smstran_gid,
							pg_id,
							smstemplate_code,
							mobile_no,
							sms_text,
							scheduled_date,
							sms_delivered_flag,
							fn_get_masterdesc('QCD_YES_NO',sms_delivered_flag,_lang_code)
																	as sms_delivered_flag_desc,
							user_code,
							role_code,
							status_code,
							fn_get_masterdesc('QCD_STATUS',status_code,_lang_code)
																	as status_code_desc,
							created_date:: udd_code as org_created_date,
							created_by,
							updated_date,
							updated_by
					from    pg_trn_tsmstran
					where   pg_id              = _pg_id
					and     sms_delivered_flag = 'N';
	
END;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_trainerdtl(_trainer_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainer refcursor DEFAULT 'rs_trainer'::refcursor, INOUT _result_traineraddr refcursor DEFAULT 'rs_traineraddr'::refcursor, INOUT _result_trainergeo refcursor DEFAULT 'rs_trainergeo'::refcursor, INOUT _result_trainerdomain refcursor DEFAULT 'rs_trainerdomain'::refcursor, INOUT _result_trainerlang refcursor DEFAULT 'rs_trainerlang'::refcursor, INOUT _result_trainerbank refcursor DEFAULT 'rs_trainerbank'::refcursor, INOUT _result_trainernote refcursor DEFAULT 'rs_trainernote'::refcursor, INOUT _result_trainerattachment refcursor DEFAULT 'rs_trainerattachment'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mohan S
		Created date : 22-09-2022

		Updated by   : Mangai 
		Updated date : 22-02-2022 
		
		SP Code		 : B04TRAG01	
		version no 	 : 8
	*/
 	v_subvertical_jsonb_desc udd_jsonb := '[{}]';
	v_config_value udd_desc := '';
begin
    select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
  -- Store Procedure Body
  -- Trainer --
  open _result_trainer for select 
  							  trainer_gid,
  							  trngorg_id,
  							  trngorg_type_code,
  							  trainer_id,
  							  trainer_name,
  							  trainer_ll_name,
  							  trainer_type_code,
							  fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code, _lang_code) as trainer_type_desc,
  							  trainer_level_code,
							  fn_get_masterdesc('QCD_TRAINER_LEVEL',trainer_level_code, _lang_code) as trainer_level_desc,
  							  coalesce(mobile_no,'0') as mobile_no,
  							  coalesce(email_id,'') as email_id,
  							  gender_code,
							  fn_get_masterdesc('QCD_GENDER',gender_code, _lang_code) as gender_desc,
  							  resource_type_code,
							  fn_get_masterdesc('QCD_RESOURCE_TYPE',resource_type_code, _lang_code) as resource_type_desc,
  							  coalesce(trainer_qualification,'') as trainer_qualification,
 							  coalesce(to_char(validity_from,v_config_value)::udd_code,'') as validity_from,
 							  coalesce(to_char(validity_to,v_config_value)::udd_code,'') as validity_to,
     						  coalesce(validity_from::udd_code,'') as org_validity_from,
 							  coalesce(validity_to::udd_code,'') as org_validity_to,
  							  indefinite_flag,
							  fn_get_masterdesc('QCD_YES_NO',indefinite_flag, _lang_code) as indefinite_flag_desc,
							  coalesce(photo_file_name,'') as photo_file_name,
							  coalesce(photo_file_path,'') as photo_file_path,
  							  status_code,
							  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc,
  						 	  to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp
						 from trng_mst_ttrainer
						 where trainer_id = _trainer_id;
						 --and   status_code = 'A'; (cmd by mohan because deactive record also wants to show instruction came from rajasekar on 03-11-2022)
						  
	 -- Trainer Address --					  
	 open _result_traineraddr for select 
	 								traineraddr_gid,
									trainer_id,
									addr_line,
									addr_pincode,
									state_code,
-- 									fn_get_stateid(state_code) as state_id,
									fn_get_statedesc(state_code) as state_desc,
									district_code,
-- 									fn_get_districtid(district_code) as district_id,
									fn_get_districtdesc(district_code) as district_desc,
									block_code,
-- 									fn_get_blockid(block_code) as block_id,
									fn_get_blockdesc(block_code) as block_desc,
									grampanchayat_code,
-- 									fn_get_panchayatid(grampanchayat_code) as grampanchayat_id,
									fn_get_panchayatdesc(grampanchayat_code) as grampanchayat_desc,
									village_code,
-- 									fn_get_villageid(village_code) as village_id,
									fn_get_villagedesc(village_code) as village_desc,
									status_code,
							  		fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
							  from trng_mst_ttraineraddr
							  where trainer_id = _trainer_id
							  and   status_code = 'A';
							  
	 -- Trainer Geographic --					  
	 open _result_trainergeo for select 
	 								trainergeo_gid,
									trainer_id,
									trainer_level_code,
							 		fn_get_masterdesc('QCD_TRAINER_LEVEL',trainer_level_code, _lang_code) as trainer_level_desc,
									state_code,
									fn_get_statedesc(state_code) as state_desc,
									district_code,
									fn_get_districtdesc(district_code) as district_desc,
									block_code,
									fn_get_blockdesc(block_code) as block_desc,
									grampanchayat_code,
									fn_get_panchayatdesc(grampanchayat_code) as grampanchayat_desc,
									status_code,
							  		fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
							  from trng_mst_ttrainergeo
							  where trainer_id = _trainer_id
							  and   status_code = 'A';			  
							  
	-- Trainer Domain  --					  
	 open _result_trainerdomain for select 
	 									trainerdomain_gid,
										trainer_id,
										vertical_code,
							  			fn_get_masterdesc('QCD_VERTICAL',vertical_code, _lang_code) as vertical_desc,
										subvertical_jsonb :: udd_text,
										coalesce(fn_get_subvertical_jsonb(subvertical_jsonb,_lang_code)::udd_text,'') as subvertical_desc,
										coalesce(fn_get_subvertical(subvertical_jsonb,_lang_code)::udd_text,'') as subvertical_jsonb_desc,
										fn_get_subvertical_code(trainer_id,subvertical_jsonb) as subvertical_jsonb_code,
										area_of_experience,
										yrs_of_experience,
										status_code,
							  			fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from trng_mst_ttrainerdomain
							  where trainer_id = _trainer_id
							  and   status_code = 'A';
							  
								  
	  -- Trainer Lang --					  
	  open _result_trainerlang for select 
	  									trainerlang_gid,
										trainer_id,
										lang_code,
										fn_get_languagedesc(lang_code) as lang_desc,
										read_flag,
										fn_get_masterdesc('QCD_YES_NO',read_flag, _lang_code) as read_flag_desc,
										write_flag,
										fn_get_masterdesc('QCD_YES_NO',write_flag, _lang_code) as write_flag_desc,
										speak_flag,
										fn_get_masterdesc('QCD_YES_NO',speak_flag, _lang_code) as speak_flag_desc,
										status_code,
							  			fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from trng_mst_ttrainerlang
							  where trainer_id = _trainer_id
							  and   status_code = 'A';
						  
	  -- Trainer Bank -- 
	  open _result_trainerbank for select 
	  								    trainerbank_gid,
	  									trainer_id,
										bank_code,
										fn_get_bankname(bank_code) as bank_name,
										branch_name,
										ifsc_code,
										acc_type_code,
							  			fn_get_masterdesc('QCD_BANKACC_TYPE',acc_type_code, _lang_code) as acc_type_desc,
										acc_no,
										status_code,
							  			fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
								  from trng_mst_ttrainerbank
								  where trainer_id = _trainer_id
								  and   status_code = 'A';
							
	 -- Trainer Notes --
	 call pr_get_notelist(_trainer_id,_lang_code,_user_code,_role_code,_result_trainernote);
/*	 open _result_trainernote for select 
	 								  note_gid,
									  activity_code,
									  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
									  activity_ref_id,
-- 									  note_desc,
-- 									  note_code,
									  case when note_code isnull then 
												note_desc 
											else 
												fn_get_masterdesc('QCD_STATUS', note_code, 'en_US') || 
												case when reject_reason_code <> '' then
													chr(13) || chr(10) || 'Reject Reason : ' 
													|| fn_get_masterdesc('QCD_TRAINER_REJ', reject_reason_code, 'en_US') 
												else
													''
												end
									  end as note_desc,
								  	  reject_reason_code,
									  fn_get_username(created_by) as  created_by,
									  created_date:: udd_code as org_created_date,
									  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS') as created_date
								from  trng_mst_tnote
								where activity_ref_id = _trainer_id
								order by created_date asc;
*/								
	 -- Trainer Attachment --
	 open _result_trainerattachment for select 
	 									  attachment_gid,
										  activity_code,
										  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  doc_type_code,
										  fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code, _lang_code) as doc_type_desc,
										  doc_subtype_code,
										  fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code, _lang_code) as doc_subtype_desc,
										  file_name,
										  file_path,
										  file_version,
										  file_size,
										  attachment_remark,
										  status_code,
										  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from  trng_mst_tattachment
									where activity_ref_id = _trainer_id
									and   status_code = 'A';
  
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_trainergroupdtl(_trngorg_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_header refcursor DEFAULT 'rs_header'::refcursor, INOUT _result_groupdtl refcursor DEFAULT 'rs_groupdtl'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mohan S
		Created date : 01-11-2022
		
		Updated By   : Mohan S
		Updated Date : 25-11-2022
		
		SP Code		 : B04TGPG01
		Version No   : 07
	*/
begin
  -- Store Procedure Body
  -- Trainer --
  open _result_header for select 
  							  b.trngorgdomain_gid,
  							  b.trngorg_id,
  							  a.trngorg_gid,
							  a.trngorg_name as group_name,
							  a.trngorg_ll_name as group_ll_name,
							  to_char(a.row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp,
							  -- fn_get_groupname(_trngorg_id) as group_name,
							  -- fn_get_group_ll_name(_trngorg_id) as group_ll_name,
							  -- fn_get_rowtimestamp(_trngorg_id) as row_timestamp,
							  b.vertical_code,
							  fn_get_masterdesc('QCD_VERTICAL',b.vertical_code,_lang_code) as vertical_desc,
							  fn_get_trngorgsubvertical_jsonb(_trngorg_id,_lang_code) as subvertical,
							  fn_get_trainingorglevel(_trngorg_id) as trngorg_level_code,
							  fn_get_masterdesc('QCD_LEVEL',fn_get_trainingorglevel(_trngorg_id),_lang_code) as trngorg_level_desc,
							  a.status_code,
							  fn_get_masterdesc('QCD_STATUS',a.status_code,_lang_code) as status_desc
						 from trng_mst_ttrainingorg as a
						 inner join trng_mst_ttrainingorgdomain as b
						 on a.trngorg_id = b.trngorg_id 
						 -- and b.status_code <> 'I'
						 where a.trngorg_id = _trngorg_id;
						 -- and   a.status_code = 'A';
						  
	 -- Group detail --					  
	 open _result_groupdtl for select 
	 								a.trngorg_id,
	 								b.trngorg_gid,
									c.trngorgdomain_gid,
									a.trainergroup_gid,
									a.trainer_id,
									fn_get_trainername(a.trainer_id) as trainer_name,
									to_char(b.row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp,
									fn_get_trainername(a.trainer_id) as trainer_name,
									fn_get_trainermobileno(trainer_id) as mobile_no,
									b.trngorg_name as group_name,
								  	b.trngorg_ll_name as group_ll_name,
								  	to_char(b.row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp,
									a.status_code,
							  		fn_get_masterdesc('QCD_STATUS',a.status_code,_lang_code) as status_desc
							  from trng_mst_ttrainergroup as a
							  inner join trng_mst_ttrainingorg as b on 
							  a.trngorg_id = b.trngorg_id 
							  -- and b.status_code = 'A'
							  inner join trng_mst_ttrainingorgdomain as c on
							  b.trngorg_id = c.trngorg_id 
							  -- and c.status_code = 'A'
							  where a.trngorg_id = _trngorg_id;
							  --and   a.status_code = 'A';
  
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_trainingorgdtl(_trngorg_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainingorg refcursor DEFAULT 'rs_trainingorg'::refcursor, INOUT _result_trainingorgaddr refcursor DEFAULT 'rs_trainingorgaddr'::refcursor, INOUT _result_trainingorggeo refcursor DEFAULT 'rs_trainingorggeo'::refcursor, INOUT _result_trainingorgdomain refcursor DEFAULT 'rs_trainingorgdomain'::refcursor, INOUT _result_trainingorgtrainer refcursor DEFAULT 'rs_trainingorgtrainer'::refcursor, INOUT _result_trainingorgbank refcursor DEFAULT 'rs_trainingorgbank'::refcursor, INOUT _result_trngorgnote refcursor DEFAULT 'rs_trngorgnote'::refcursor, INOUT _result_trngorgattachment refcursor DEFAULT 'rs_trngorgattachment'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 21-09-2022
		
		Updated By   : Mangai
	    Updated Date : 22-02-2023
		
		SP Code		 : B05TORG01
		version no 	 : 08		
	*/
	
	v_config_value udd_desc := '';

 begin
    select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
 
  -- Store Procedure Body
  -- Training Org -- 
  open _result_trainingorg for select 
  							  trngorg_gid,
  							  trngorg_id,
  							  trngorg_name,
  							  trngorg_ll_name,
							  trngorg_type_code,
							  fn_get_masterdesc('QCD_ORG_TYPE',trngorg_type_code, _lang_code) as trngorg_type_desc,
  							  trngorg_level_code,
							  fn_get_masterdesc('QCD_ORG_LEVEL',trngorg_level_code, _lang_code) as trngorg_level_desc,
							  mobile_no,
							  email_id,
							  coalesce(contact_person,'') as contact_person,
  							  coalesce(to_char(validity_from,v_config_value) ::udd_code,'') as validity_from,
  							  coalesce(to_char(validity_to,v_config_value) ::udd_code,'') as validity_to,
							  coalesce(validity_from::udd_text,'') as org_validity_from,
							  coalesce(validity_to::udd_text,'') as org_validity_to,
  							  indefinite_flag,
							  fn_get_masterdesc('QCD_YES_NO',indefinite_flag, _lang_code) as indefinite_flag_desc,
							  sys_flag,
							  fn_get_masterdesc('QCD_YES_NO',sys_flag, _lang_code) as sys_flag_desc,
							  status_code,
							  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc,
							  to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp
  						  from 	trng_mst_ttrainingorg
						  where trngorg_id = _trngorg_id;
-- 						  and 	created_by = _user_code;
						  -- and   status_code = 'A'; (cmd by mohan because deactive record also wants to show instruction came from rajasekar on 03-11-2022)
						  
  -- Training Org Address -- 
  open _result_trainingorgaddr for select 
								  trngorgaddr_gid,
								  trngorg_id,
								  addr_line,
								  addr_pincode,
								  state_code,
								  fn_get_stateid(state_code) as state_id,
								  fn_get_statedesc(state_code) as state_desc,
								  district_code,
								  fn_get_districtid(district_code) as district_id,
								  fn_get_districtdesc(district_code) as district_desc,
								  block_code,
								  fn_get_blockid(block_code) as block_id,
								  fn_get_blockdesc(block_code) as block_desc,
								  grampanchayat_code,
								  fn_get_panchayatid(grampanchayat_code) as grampanchayat_id,
								  fn_get_panchayatdesc(grampanchayat_code) as grampanchayat_desc,
								  village_code,
								  fn_get_villageid(village_code) as village_id,
								  fn_get_villagedesc(village_code) as village_desc,
								  status_code,
							  	  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
							  from trng_mst_ttrainingorgaddr
							  where trngorg_id = _trngorg_id
							  and   status_code = 'A';
	
   -- Training Org Geo -- 
  open _result_trainingorggeo for select
									  trngorggeo_gid,
									  trngorg_id,
									  trngorg_level_code,
							  		  fn_get_masterdesc('QCD_ORG_LEVEL',trngorg_level_code, _lang_code) as trngorg_level_desc,
									  state_code,
									  fn_get_statedesc(state_code) as state_desc,
									  district_code,
									  fn_get_districtdesc(district_code) as district_desc,
									  block_code,
									  fn_get_blockdesc(block_code) as block_desc,
									  grampanchayat_code,
									  fn_get_panchayatdesc(grampanchayat_code) as grampanchayat_desc,
									  status_code,
							  	      fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
								  from  trng_mst_ttrainingorggeo
								  where trngorg_id = _trngorg_id
								  and   status_code = 'A';
								  
   -- Training Org Domain -- 
  open _result_trainingorgdomain for select  
									  trngorgdomain_gid,
									  trngorg_id,
									  vertical_code,
									  fn_get_masterdesc('QCD_VERTICAL',vertical_code, _lang_code) as vertical_desc,
									  fn_get_trainingorgsubvertical(trngorgdomain_gid,_lang_code) as subvertical_desc,
									  fn_get_trainingorgsubvertical_code(trngorgdomain_gid,_lang_code) as subvertical_code,
									  fn_get_trainingorgsubvertical_jsonb(trngorgdomain_gid,_lang_code)::udd_text as subvertical_jsonb,
									  area_of_experience,
									  yrs_of_experience,
									  status_code,
							  	      fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
					            from  trng_mst_ttrainingorgdomain
								where trngorg_id = _trngorg_id
								and   status_code = 'A';
								
	
  	-- Training Org Trainner --
	open _result_trainingorgtrainer for select 
											 trainer_gid,
											 trngorg_id,
											 trngorg_type_code,
											 trainer_id,
											 trainer_name,
											 trainer_ll_name,
											 trainer_type_code,
											 trainer_level_code,
											 mobile_no,
											 email_id,
											 gender_code,
											 fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code) as gender_desc,
											 resource_type_code,
											 fn_get_masterdesc('QCD_RESOURCE_TYPE', resource_type_code, _lang_code) as resource_type_desc,
											 trainer_qualification,
											 coalesce(to_char(validity_from,v_config_value)::udd_code,'') as validity_from,
  							  				 coalesce(to_char(validity_to,v_config_value) ::udd_code,'') as validity_to,
											 coalesce(validity_from::udd_text,'') as org_validity_from,
											 coalesce(validity_to::udd_text,'') as org_validity_to,
  							  				 indefinite_flag,
											 photo_file_name,
											 photo_file_path,
											 status_code,
											 cadre_id,
											 deactivation_reason_code
										from  trng_mst_ttrainer 
										where trngorg_id = _trngorg_id
										and   status_code = 'A';
											
	-- Training Org Bank --
	open _result_trainingorgbank for select 
										trngorgbank_gid,
										trngorg_id,
										bank_code,
										fn_get_bankname(bank_code) as bank_name,
										branch_name,
										ifsc_code,
										acc_type_code,
							  	     	fn_get_masterdesc('QCD_BANKACC_TYPE',acc_type_code, _lang_code) as acc_type_desc,
										acc_no,
										status_code,
							  	     	fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
								 from   trng_mst_ttrainingorgbank
								 where  trngorg_id = _trngorg_id
								 and    status_code = 'A';
								 
	-- Training Org Notes --
	call pr_get_notelist(_trngorg_id,_lang_code,_user_code,_role_code,_result_trngorgnote);
/*	open _result_trngorgnote for select 
								  note_gid,
								  activity_code,
							  	  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
								  activity_ref_id,
								  note_desc,
								  fn_get_masterdesc('QCD_STATUS',note_desc,_lang_code) as note,
-- 								  note_code,
								  case when note_code isnull then 
											note_desc 
										else 
											fn_get_masterdesc('QCD_STATUS', note_code, 'en_US') || 
											case when reject_reason_code <> '' then
												chr(13) || chr(10) || 'Reject Reason : ' 
												|| fn_get_masterdesc('QCD_TORG_REJ', reject_reason_code, 'en_US') 
											else
												''
											end
								  end as note_desc,
								  reject_reason_code,
								  created_date::udd_code as org_created_date,
								  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS') as created_date,
-- 								  coalesce(created_date::udd_code,'')as org_created_date,
								  fn_get_username(created_by) as created_by
							from  trng_mst_tnote
							where activity_ref_id = _trngorg_id
							order by created_date asc;
*/								
	-- Training Org Attachment --
	open _result_trngorgattachment for select 
										  attachment_gid,
										  activity_code,
							  	  		  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  doc_type_code,
							  	      	  fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code, _lang_code) as doc_type_desc,
										  doc_subtype_code,
							  	      	  fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code, _lang_code) as doc_subtype_desc,
										  file_name,
										  file_path,
										  file_version,
										  file_size,
										  attachment_remark,
										  status_code,
							  	      	  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from  trng_mst_tattachment
									where activity_ref_id = _trngorg_id
									and   status_code 	  = 'A';
										
										
	
End;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_trngprogrambatch(_tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprgmbatch refcursor DEFAULT 'rs_tprgmbatch'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 01-12-2022
		
		Updated by   : Mangai
		Updated date : 05-12-2022
		
		SP Code		 : B07PRGF01
		Version No   : 2
	*/
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
   -- Store Procedure Body	  
   -- Training Program Batch -- 
   open _result_tprgmbatch for select 	
										  pb.tprogrambatch_gid,
										  pb.tprogram_id,
										  pb.tprogrambatch_id,
										  pb.batch_name,
										  pb.batch_ll_name,
										  p.tprogram_name,
										  p.tprogram_level_code,
										  fn_get_masterdesc('QCD_TRAINER_LEVEL',p.tprogram_level_code, _lang_code) as tprogram_level_desc,
										  p.execution_status_code,
										  fn_get_masterdesc('QCD_EXEC_STATUS',p.execution_status_code, _lang_code) as execution_status_desc,
										  p.execution_status_date,
-- 										  pb.execution_status_code as batch_execution_status_code,
-- 										  fn_get_masterdesc('QCD_EXEC_STATUS',pb.execution_status_code, _lang_code) as batch_execution_status_desc,
-- 										  pb.execution_status_date as batch_execution_status_date,
										  pb.lang_code,
										  fn_get_languagedesc(pb.lang_code) as lang_desc,
										  to_char(pb.start_date,v_config_value) as start_date,
										  coalesce(pb.start_date::udd_code,'') as org_start_date,
										  to_char(pb.end_date,v_config_value) as end_date,
										  coalesce(pb.end_date::udd_code,'') as org_end_date,
										  pb.no_of_days,
										  coalesce(pb.tprogram_venue_id,'') as tprogram_venue_id,
										  pb.confirm_venue_id,
										  fn_get_expenseamount(pb.tprogram_id,pb.tprogrambatch_id) as expenseamount,
										  fn_get_totalexpenseamount(pb.tprogram_id) as total_expenseamount,
										  fn_get_budgetamount(pb.tprogram_id,pb.tprogrambatch_id) as budget_amount,
										  fn_get_totalbudgetamount(pb.tprogram_id) as totalbudget_amount,
										  pb.status_code,
										  fn_get_masterdesc('QCD_STATUS',pb.status_code, _lang_code) as status_desc,
										  fn_get_trainercount(pb.tprogram_id,pb.tprogrambatch_id) as trainer_count,
										  fn_get_participantcount(pb.tprogram_id,pb.tprogrambatch_id) as participant_count
							  from 	      trng_trn_ttprogram p
							  inner join  trng_trn_ttprogrambatch pb on p.tprogram_id = pb.tprogram_id
							  and 		  pb.status_code <> 'I'
							  where 	  pb.tprogram_id = _tprogram_id
							  and         pb.tprogrambatch_id = _tprogrambatch_id;
							  -- and         p.status_code <> 'I';
								  

End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_trngprogramdtl(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogram refcursor DEFAULT 'rs_tprogram'::refcursor, INOUT _result_tprgmgeo refcursor DEFAULT 'rs_tprgmgeo'::refcursor, INOUT _result_tprgmbatch refcursor DEFAULT 'rs_tprgmbatch'::refcursor, INOUT _result_tprgmnote refcursor DEFAULT 'rs_tprgmnote'::refcursor, INOUT _result_tprgmattachment refcursor DEFAULT 'rs_tprgmattachment'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 14-10-2022
		
		Updated By   :  Mohan
		Updated Date : 06-04-2023
		
		SP Code		 : B07PRGG01
		Version No   : 16
	*/
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
   -- Store Procedure Body	  
    -- Training Program --
	open _result_tprogram for select 
							  programapproval_gid,
							  coalesce(approver_id,'') as approver_id,
							  fn_get_username(approver_id) as approver_name,
  							  tprogram_gid,
							  tprogram_id,
							  tprogram_name,
							  tprogram_ll_name,
							  course_id,
							  coordinator_id,
							  fn_get_username(coordinator_id) as coordinator_name,
							  tprogram_level_code,
							  fn_get_masterdesc('QCD_TRAINER_LEVEL',tprogram_level_code, _lang_code) as tprogram_level_desc,
							  to_char(start_date,v_config_value)as start_date,
							  coalesce(start_date::udd_code,'') as org_start_date,
							  to_char(end_date,v_config_value) as end_date,
							  coalesce(end_date::udd_code,'') as org_end_date,
							  no_of_days,
							  no_of_batches,
							  budget_amount :: udd_code,
							  actual_amount :: udd_code,
							  budget_remark,
							  execution_status_code,
							  fn_get_masterdesc('QCD_EXEC_STATUS',execution_status_code, _lang_code) as execution_status_desc,
							  to_char(execution_status_date,'DD-MM-YYYY HH:MI:SS:MS') as execution_status_date,
							  execution_status_date as org_execution_status_date,
							  case 
							  	when status_code = 'A' then
									execution_status_code
								else
									status_code
							  end as status_code,
							  case 
							  	when status_code = 'A' then
									fn_get_masterdesc('QCD_STATUS',execution_status_code, _lang_code)
								else
									fn_get_masterdesc('QCD_STATUS',status_code, _lang_code)
							  end as status_desc,
							  --status_code,
							  --fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc,
							  fn_get_totalbudgetamount(tprogram_id) :: udd_code as totalbudget_amount,
							  fn_get_totalexpenseamount(tprogram_id) :: udd_code as total_expenseamount,
							  to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp,
							  coalesce(approver_remark,'') as  approver_remark,
							  coalesce(reject_reason_code,'') as reject_reason_code,
							  fn_get_masterdesc('QCD_REJ_REASON',reject_reason_code, _lang_code) as reject_reason_desc,
							  coalesce(deactivation_reason_code,'') as deactivation_reason_code,
							  fn_get_masterdesc('QCD_DEA_REASON',deactivation_reason_code, _lang_code) as deactivation_reason_desc
					from 	  trng_trn_ttprogram_view
					where     tprogram_id = _tprogram_id;
					-- and       status_code <> 'I';
						  		
	 -- Training Program Geography -- 
	 open _result_tprgmgeo for select 
									  		 pg.tprogramgeo_gid,
											 pg.tprogram_id,
											 pg.tprogram_level_code,
											 fn_get_masterdesc('QCD_TRAINER_LEVEL',pg.tprogram_level_code, _lang_code) as tprogram_level_desc,
											 pg.state_code,
-- 											 case 
-- 											 	when fn_get_statedesc(pg.state_code) = '' then
-- 											 		'ALL'
-- 											 	else
-- 											 		fn_get_statedesc(pg.state_code)
-- 											 end 
-- 											 as state_desc,
											 fn_get_statedesc(pg.state_code) as state_desc,
											 fn_get_stateid(pg.state_code) as state_id,
											 pg.district_code,
-- 											 case 
-- 											 	when fn_get_districtdesc(pg.district_code) = '' then
-- 											 		'ALL'
-- 											 	else
-- 											 		fn_get_districtdesc(pg.district_code)
-- 											 end 
-- 											 as district_desc,
											 fn_get_districtdesc(pg.district_code) as district_desc,
											 fn_get_districtid(pg.district_code) as district_id,
											 pg.block_code,
-- 											 case 
-- 											 	when fn_get_blockdesc(pg.block_code) = '' then
-- 											 		'ALL'
-- 											 	else
-- 											 		fn_get_blockdesc(pg.block_code)
-- 											 end 
-- 											 as block_desc,
											 fn_get_blockdesc(pg.block_code) as block_desc,
											 fn_get_blockid(pg.block_code) as block_id,
											 pg.grampanchayat_code,
-- 											 case 
-- 											 	when fn_get_panchayatdesc(pg.grampanchayat_code) = '' then
-- 											 		'ALL'
-- 											 	else
-- 											 		fn_get_panchayatdesc(pg.grampanchayat_code)
-- 											 end 
-- 											 as panchayat_desc,
											 fn_get_panchayatdesc(pg.grampanchayat_code) as panchayat_desc,
											 fn_get_panchayatid(pg.grampanchayat_code) as grampanchayat_id,
											 pg.village_code,
-- 											 case 
-- 											 	when fn_get_villagedesc(pg.village_code) = '' then
-- 											 		'ALL'
-- 											 	else
-- 											 		fn_get_villagedesc(pg.village_code)
-- 											 end 
-- 											 as village_desc,
											 fn_get_villagedesc(pg.village_code) as village_desc,
											 fn_get_villageid(pg.village_code) as village_id,
											 pg.status_code,
											 fn_get_masterdesc('QCD_STATUS',pg.status_code, _lang_code) as status_desc
								  from		 trng_trn_ttprogram p
								  inner join trng_trn_ttprogramgeo pg on p.tprogram_id = pg.tprogram_id
								  and        pg.status_code <> 'I'
								  where      pg.tprogram_id = _tprogram_id;
								  -- and        p.status_code  <> 'I';
	
   	 -- Training Program Batch -- 
  	 open _result_tprgmbatch for select 	
									  		  pb.tprogrambatch_gid,
											  pb.tprogram_id,
											  pb.tprogrambatch_id,
											  pb.batch_name,
											  pb.batch_ll_name,
											  coalesce(pb.tprogrambatch_remark,'') as tprogrambatch_remark,
											  p.tprogram_name,
	 										  p.tprogram_level_code,
							  				  fn_get_masterdesc('QCD_TRAINER_LEVEL',p.tprogram_level_code, _lang_code) as tprogram_level_desc,
											  p.execution_status_code,
											  fn_get_masterdesc('QCD_EXEC_STATUS',p.execution_status_code, _lang_code) as execution_status_desc,
											  p.execution_status_date,
											  pb.lang_code,
											  fn_get_languagedesc(pb.lang_code) as lang_desc,
											  to_char(pb.start_date,v_config_value) as start_date,
											  coalesce(pb.start_date::udd_code,'') as org_start_date,
											  to_char(pb.end_date,v_config_value) as end_date,
											  coalesce(pb.end_date::udd_code,'') as org_end_date,
											  pb.no_of_days,
											  coalesce(pb.tprogram_venue_id,'') as tprogram_venue_id,
											  pb.confirm_venue_id,
											  fn_get_expenseamount(pb.tprogram_id,pb.tprogrambatch_id):: udd_code as expenseamount,
									   		  fn_get_totalexpenseamount(pb.tprogram_id):: udd_code as total_expenseamount,
											  fn_get_budgetamount(pb.tprogram_id,pb.tprogrambatch_id):: udd_code as budget_amount,
											  fn_get_totalbudgetamount(pb.tprogram_id):: udd_code as totalbudget_amount,
											  pb.status_code as batch_status_code,
											  fn_get_masterdesc('QCD_STATUS',pb.status_code, _lang_code) as batch_status_desc,
											  fn_get_trainercount(pb.tprogram_id,pb.tprogrambatch_id) as trainer_count,
											  fn_get_participantcount(pb.tprogram_id,pb.tprogrambatch_id) as participant_count
								  from 	      trng_trn_ttprogram p
								  inner join  trng_trn_ttprogrambatch pb on p.tprogram_id = pb.tprogram_id
								  and 		  pb.status_code <> 'I'
								  where 	  pb.tprogram_id = _tprogram_id
								  order by    pb.created_date asc;
								  -- and         p.status_code <> 'I';
								  
	-- Training Program Notes --
	call pr_get_notelist(_tprogram_id,_lang_code,_user_code,_role_code,_result_tprgmnote);
/*	 open _result_tprgmnote for select 
	 								  note_gid,
									  activity_code,
									  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
									  activity_ref_id,
-- 									  note_desc,
-- 									  note_code,
									  case when note_code isnull then 
												note_desc 
											else 
												fn_get_masterdesc('QCD_STATUS', note_code, 'en_US') || 
												case when reject_reason_code <> '' then
													chr(13) || chr(10) || 'Reject Reason : ' 
													|| fn_get_masterdesc('QCD_TPROG_REJ', reject_reason_code, 'en_US') 
												else
													''
												end
									  end as note_desc,
									  reject_reason_code,
									  created_by,
									  created_date::udd_code as org_created_date,
-- 									  to_char(created_date :: udd_date,v_config_value) as created_date
									  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS') as created_date
								from  trng_mst_tnote
								where activity_ref_id = _tprogram_id
								order by created_date asc;
*/								
	 -- Training Program Attachment --
	 open _result_tprgmattachment for select 
	 									  attachment_gid,
										  activity_code,
										  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  doc_type_code,
										  fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code, _lang_code) as doc_type_desc,
										  doc_subtype_code,
										  fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code, _lang_code) as doc_subtype_desc,
										  file_name,
										  file_path,
										  file_version,
										  file_size,
										  attachment_remark,
										  status_code,
										  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from  trng_mst_tattachment
									where activity_ref_id = _tprogram_id
									and   status_code = 'A';
  
							
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_fetch_venue(_venue_id udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_venue refcursor DEFAULT 'rs_venue'::refcursor, INOUT _result_venueaddr refcursor DEFAULT 'rs_venueaddr'::refcursor, INOUT _result_venueinfra refcursor DEFAULT 'rs_venueinfra'::refcursor, INOUT _result_venuenote refcursor DEFAULT 'rs_venuenote'::refcursor, INOUT _result_venueattachment refcursor DEFAULT 'rs_venueattachment'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 03-10-2022
		
		Updated By   : Mangai  
		Updated Date : 27-02-2023 
		
		SP Code : B06VENF01
		Version No : 09
	*/
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body
	open _result_venue for select 	
										venue_gid,
							    		venue_id,
										venue_name,
										venue_ll_name,
										venue_type_code,
										fn_get_masterdesc('QCD_VENUE_TYPE', venue_type_code, _lang_code) as venue_type_desc,
										venue_subtype_code,
										fn_get_masterdesc('QCD_VENUE_SUBTYPE', venue_subtype_code, _lang_code) as venue_subtype_desc,
										contact_name,
										contact_mobile_no,
										coalesce(validity_from :: udd_code,'') as org_validity_from,
										coalesce(validity_to:: udd_code,'') as org_validity_to,
										coalesce(to_char(validity_from,v_config_value)::udd_code,'') as validity_from,
 							  			coalesce(to_char(validity_to,v_config_value)::udd_code,'') as validity_to,
										indefinite_flag,
										fn_get_masterdesc('QCD_YES_NO', indefinite_flag, _lang_code) as indefinite_flag_desc,
										others_flag,
										fn_get_masterdesc('QCD_YES_NO', others_flag, _lang_code) as others_flag_desc,
										status_code,
										fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
										to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS')as row_timestamp
								from 	trng_mst_tvenue	
								where   venue_id = _venue_id;
								-- and     status_code = 'A';
								-- and 	others_flag = 'N';
	
	-- Venue Address -- 
	open _result_venueaddr for select 
										va.venueaddr_gid,
										v.venue_id,
										va.addr_line,
										va.addr_pincode,
										coalesce(va.state_code,'') as state_code,
										fn_get_statedesc(va.state_code) as state_desc,
										coalesce(va.district_code,'') as district_code,
										fn_get_districtdesc(va.district_code) as district_desc,
										coalesce(va.block_code,'') as block_code,
										fn_get_blockdesc(va.block_code) as block_desc,
										coalesce(va.grampanchayat_code,'') as grampanchayat_code,
										fn_get_panchayatdesc(va.grampanchayat_code) as grampanchayat_desc,
										coalesce(va.village_code,'') as village_code,
										fn_get_villagedesc(va.village_code) as village_desc,
										va.status_code,
										fn_get_masterdesc('QCD_STATUS', va.status_code, _lang_code) as status_desc,
										to_char(v.row_timestamp,'DD-MM-YYYY HH:MI:SS:MS')as row_timestamp
							from	    trng_mst_tvenue as v
							inner join  trng_mst_tvenueaddr as va
							on          va.venue_id = v.venue_id
							where       va.venue_id    = _venue_id
							and         va.status_code = 'A';
-- 							and         v.status_code  = 'A';
							-- and 		v.otherS_flag = 'N';
	-- Venue Infra --
	open _result_venueinfra for select 
										vi.venueinfra_gid,
										v.venue_id,
										coalesce(vi.facility_id,'') as facility_id,
										coalesce(vi.facility_name,'') as facility_name,
										vi.addr_line,
										vi.addr_pincode,
										coalesce(vi.state_code,'') as state_code,
										fn_get_statedesc(vi.state_code) as state_desc,
										coalesce(vi.district_code,'') as district_code,
										fn_get_districtdesc(vi.district_code) as district_desc,
										coalesce(vi.block_code,'') as block_code,
										fn_get_blockdesc(vi.block_code) as block_desc,
										coalesce(vi.grampanchayat_code,'') as grampanchayat_code,
										fn_get_panchayatdesc(vi.grampanchayat_code) as grampanchayat_desc,
										coalesce(vi.village_code,'') as village_code,
										fn_get_villagedesc(vi.village_code) as village_desc,
										fn_get_blockdesc(vi.block_code)||'-'||
										fn_get_districtdesc(vi.district_code)||'-'||
										fn_get_statedesc(vi.state_code) as block_district_state,
										coalesce(vi.conf_room_count :: udd_code,'') as conf_room_count,
										coalesce(vi.conf_room_capacity :: udd_code,'') as conf_room_capacity,
										coalesce(vi.accom_overnight_flag :: udd_code,'') as accom_overnight_flag,
										fn_get_masterdesc('QCD_YES_NO', vi.accom_overnight_flag, _lang_code) as accom_overnight_desc,
										coalesce(vi.accom_overnight_capacity :: udd_code,'') as accom_overnight_capacity,
										vi.status_code,
										fn_get_masterdesc('QCD_STATUS', vi.status_code, _lang_code) as status_desc
							from       	trng_mst_tvenue as v
							inner join  trng_mst_tvenueaddr as va on v.venue_id = va.venue_id
							and         va.status_code = 'A'
							left join   trng_mst_tvenueinfra as vi on v.venue_id = vi.venue_id
							where       vi.venue_id     = _venue_id
-- 							and         v.status_Code  = 'A'
							and         vi.status_code = 'A';
							-- and 		v.otherS_flag = 'N';
	 -- venue Notes --
	 call pr_get_notelist(_venue_id,_lang_code,_user_code,_role_code,_result_venuenote);
/*	 open _result_venuenote for select 
	 							  note_gid,
								  activity_code,
							  	  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
								  activity_ref_id,
								  note_desc,
								  created_date::udd_code as org_created_date,
								  created_by
							from  trng_mst_tnote
							where activity_ref_id = _venue_id
							order by 1 desc;
*/								
	 -- venue Attachment --
	 open _result_venueattachment for select 
	 									  attachment_gid,
										  activity_code,
							  	  		  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
										  doc_type_code,
							  	      	  fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code, _lang_code) as doc_type_desc,
										  doc_subtype_code,
							  	      	  fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code, _lang_code) as doc_subtype_desc,
										  file_name,
										  file_path,
										  file_version,
										  file_size,
										  attachment_remark,
										  status_code,
							  	      	  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									from  trng_mst_tattachment
									where activity_ref_id = _venue_id
									and   status_code = 'A';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_activecourselist(_course_id udd_code, _course_name udd_desc, _lang_code udd_code, _user_code udd_code, _role_code udd_code, INOUT _result_activecourselst refcursor DEFAULT 'rs_activecourselst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mangai
		Created Date : 04-02-2023
		
		Updated By : Mangai
		Updated Date : 02-03-2023
		
		SP Code    : B04COUG04
		Version No : 1
	*/
	-- stored procedure body 
	open _result_activecourselst for select 	
											course_gid,
											course_id,
											course_name,
											course_ll_name
									  from 	trng_mst_tcourse
									  where course_id not in (select c.course
															  from trng_mst_tquestionaire a,
															 	   jsonb_to_recordset(course_jsonb::udd_jsonb) c(course udd_text)
															  where status_code = 'A'
															  and   course_jsonb <> '[{}]')
									  and   course_name like '%' || _course_name || '%' collate pg_catalog.""default""
									  and   course_id like '%' || _course_id  || '%' collate pg_catalog.""default""
									  and   status_code =  'A'
									  order by 	course_name;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_approverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _village_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_userapprover refcursor DEFAULT 'rs_userapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 20-09-2022
		
		Updated By 		: Mohan S
		Updatde Date 	: 18-11-2022
		
		SP Code 		: B01USRG01
		Version No 		: 04
	*/
	
begin
	if _state_code = '' then 
		_state_code = null;
	end if;
	if _district_code = '' then 
		_district_code = null;
	end if;
	if _block_code = '' then 
		_block_code = null;
	end if;
	if _panchayat_code = '' then 
		_panchayat_code = null;
	end if;
	if _village_code = '' then 
		_village_code = null;
	end if;
	
	-- Store Procedure body --
	if _user_level_code = '89' then
		call pr_get_prgmstateapproverlist(_vertical_code,_user_level_code,_state_code,
										  _result_userapprover);
	elseif _user_level_code = '79' then
		call pr_get_distapproverlist(_vertical_code,_user_level_code, _state_code,
									 _district_code,_result_userapprover);
	elseif _user_level_code = '69' then
		call pr_get_blockapproverlist(_vertical_code,_user_level_code, _state_code,
									 _district_code,_block_code,_result_userapprover);
	elseif _user_level_code = '59' then
		call pr_get_panchayatapproverlist(_vertical_code,_user_level_code, _state_code,
									  _district_code,_block_code,_panchayat_code,
									  _result_userapprover);
	elseif _user_level_code = '49' then
		call pr_get_villageapproverlist(_vertical_code,_user_level_code, _state_code,
									  _district_code,_block_code,_panchayat_code,
									  _village_code,_result_userapprover);
	elseif _user_level_code = '99' then
		open _result_userapprover for select 1;
	end if;				
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_avlbviewtrainer(_trainer_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainer refcursor DEFAULT 'rs_trainer'::refcursor, INOUT _result_trainerprogschdllst refcursor DEFAULT 'rs_trainerlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai
		Created date : 19-12-2022
		
		Updated By 	 : Mangai
		Updated Date : 06-02-2023
		
		SP Code		 : B04TRAG02	
		version no 	 : 03
	*/
 	v_subvertical_jsonb_desc udd_jsonb := '[{}]';
	v_config_value udd_desc := '';
begin
    select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
  -- Store Procedure Body
  -- Trainer --
  open _result_trainer for select 
  							  	trainer_id,
								trngorg_id,
								mobile_no,
								trainer_name,
								trainer_ll_name,
								trainer_type_code,
								fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code,_lang_code)as trainer_type_desc,
								vertical_code,
								fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code)as vertical_desc,
								subvertical_jsonb,
								fn_get_subvertical(org_subvertical_jsonb, _lang_code) as subvertical_desc,
								fn_get_subvertical_jsonb(org_subvertical_jsonb, _lang_code) as subvertical_jsonb_desc,
								trainer_level_code,
								fn_get_masterdesc('QCD_TRAINER_LEVEL',trainer_level_code,_lang_code)as trainer_level_desc,
								resource_type_code,
								fn_get_masterdesc('QCD_RESOURCE_TYPE',resource_type_code,_lang_code)as resource_type_desc
						 from 	trng_mst_ttrainer_view
						 where 	trainer_id = _trainer_id; 
		open _result_trainerprogschdllst for select    tprogram_id,
													   tprogrambatch_id,
													   trainer_id,
												       fn_get_programname(tprogram_id) as program_name,
													   fn_get_programstartdate(tprogram_id) as program_start_date,
													   fn_get_programenddate(tprogram_id) as program_end_date
											  from     trng_trn_ttprogramtrainer
											  where    trainer_id = _trainer_id
											  and      status_code = 'A';
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_bankbranchlist(_course_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_bankbranch refcursor DEFAULT 'rs_bankbranch'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 26-09-2022
		SP Code : B01BNKG02
	*/
begin
	-- stored procedure body
	open _result_bankbranch for select 	
									 'COU_27' as course_id,
									 '29' as state_id,
									 '350' as district_id,
									 '1' as bank_code,
									 'STATE BANK OF INDIA' as bank_name,
									 100 as bank_branch_id,
									 100001 as bank_branch_code,
									 'Madurai'as bank_branch_name,
									 'SBI00000010' as ifsc_code
							 union all 
							 	 select 	
									 'COU_28' as course_id,
									 '25' as state_id,
									 '208' as district_id,
									 '2' as bank_code,
									 'ICICI BANK LTD' as bank_name,
									 101 as bank_branch_id,
									 100002  as bank_branch_code,
									 'Madurai'as bank_branch_name,
									 'ICICI00012' as ifsc_code
							 union all 
							 	 select 	
									 'COU_26' as course_id,
									 '30' as state_id,
									 '400' as district_id,
									 '3' as bank_code,
									 'AXIS BANK' as bank_name,
									 103 as bank_branch_id,
									 100003  as bank_branch_code,
									 'Madurai'as bank_branch_name,
									 'AXI00000013' as ifsc_code
							union all 
							 	 select 	
									 'COU_36' as course_id,
									 '15' as state_id,
									 '629' as district_id,
									 '4' as bank_code,
									 'CANARA BANK' as bank_name,
									 104 as bank_branch_id,
									 100004  as bank_branch_code,
									 'Madurai'as bank_branch_name,
									 'CNA00000014' as ifsc_code
							union all 
							 	 select 	
									 'COU_37' as course_id,
									 '16' as state_id,
									 '578' as district_id,
									 '5' as bank_code,
									 'INDIAN BANK' as bank_name,
									 105 as bank_branch_id,
									 100005 as bank_branch_code,
									 'Madurai'as bank_branch_name,
									 'IND00000015' as ifsc_code;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_banklist(_ifsc_code udd_code, _bank_name udd_desc, _bank_branch_name udd_desc, user_code udd_code, role_code udd_code, lang_code udd_code, INOUT _result_bank refcursor DEFAULT 'rs_bank'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 26-09-2022
		SP Code : B01BNKG01
	*/
begin
	-- stored procedure body
	open _result_bank for select 	   
										bm.bank_id,
										bm.bank_code,
										bm.bank_name,
										bbm.bank_branch_code,
										bbm.bank_branch_name,
										bbm.ifsc_code
						  from       	bank_master as bm
						  inner join 	bank_branch_master as bbm
						  on         	bm.bank_code = bbm.bank_code
						  and           bm.is_active = 1
						  and    		bbm.is_active = 'true'
						  where 		bbm.ifsc_code ilike _ifsc_code || '%' collate pg_catalog.""default""
						  and			bm.bank_name ilike _bank_name || '%' collate pg_catalog.""default""
						  and           bbm.bank_branch_name ilike _bank_branch_name || '%' collate pg_catalog.""default"" ;    
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_batchattachmentlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_batchattachmentlst refcursor DEFAULT 'rs_batchattachmentlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 08-11-2022
		
		SP Code : B07PPAF01
		Version No   : 1
		
	*/
	
begin
	
	-- stored procedure body
	open _result_batchattachmentlst for select 	
											tprogrambatchattachment_gid,
											tprogram_id,
											tprogrambatch_id,
											doc_type_code,
											fn_get_masterdesc('QCD_DOC_TYPE',doc_type_code,_lang_code) as doc_type_desc,
											doc_subtype_code,
											fn_get_masterdesc('QCD_DOC_SUBTYPE',doc_subtype_code,_lang_code) as doc_subtype_desc,
											file_name,
											file_path,
											'' as file_path_encoded,
											file_version,
											file_size,
											attachment_remark,
											status_code,
											fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
									 from 	trng_trn_ttprogrambatchattachment 
									 where 	tprogram_id      = _tprogram_id
									 and    tprogrambatch_id = _tprogrambatch_id
									 and    status_code <> 'I';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_batchexecstatus(_parent_code udd_code, _lang_code udd_code, INOUT _result_status refcursor DEFAULT 'rs_status'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare 
	/*
		Created By : Mohan S
		Created Date : 05-12-2021
		SP Code : B06STSG01
	*/
begin
		open _result_status for  select 		
										b.master_code as master_code,
										b.master_desc as master_desc,
										a.rec_slno
									from 		core_mst_tmaster as a 
									inner join 	core_mst_tmastertranslate as b 
									on 			a.parent_code = b.parent_code 
									and 		a.master_code = b.master_code 
									where 		a.parent_code = _parent_code 
									and 		b.lang_code = _lang_code
									and 		a.master_code in ('H','P','O','C','L')
									and 		a.status_code = 'A';

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_batchprtcountlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_batchprtcountlist refcursor DEFAULT 'rs_batchprtcountlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mangai
		Created Date : 19-10-2022
		
		Updated_by 	 : Mangai
		Updated_date : 09-02-2023
		
		SP Code : B07PBCG01
		version no : 7
	*/
	v_cadre_count udd_int := 0;
	v_lokos_count udd_int := 0;
	v_external_count udd_int := 0;
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body
	open _result_batchprtcountlist for select 	
	        								tprogrambatchcount_gid,
									  		tprogram_id,
											tprogrambatch_id,
-- 											batch_date,
											to_char(batch_date, v_config_value) as batch_date,
											coalesce(batch_date::udd_code,'') as org_batch_date,
											coalesce(batch_count,0) as batch_count,
											fn_get_participantpresentcount(_tprogram_id,_tprogrambatch_id) as participant_present_count,
											status_code,
											fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
											fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_INTERNAL','QCD_INT_CADRE') as cadre_count,
											(fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_INTERNAL','QCD_INT_LOKOS') 
											 								+
											 fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_INTERNAL','QCD_SHG_CLF_VO') )as lokos_count,
											fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_EXTERNAL','QCD_EXTERNAL') as external_count
											from trng_trn_ttprogrambatchcount
											where tprogram_id = _tprogram_id
											and   tprogrambatch_id = _tprogrambatch_id
											and   status_code = 'A'
											order by batch_date::udd_date;
				 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_blockapproverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, INOUT _result_blockapprover refcursor DEFAULT 'rs_blockapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-11-2022
		
		updated By 		: Mohan S
		Updatde Date 	: 09-12-2022
		
		SP Code 		: B01BLKG01
		Version No 		: 02
	*/
	
begin

	-- Store Procedure body --
	open _result_blockapprover for select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code = '79' 
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';
								/*select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';*/

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_blocklist(_district_code udd_code, _lang_code udd_code, INOUT _result_block refcursor DEFAULT 'rs_block'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 17-10-2022
		SP Code : B01BLMG01
		
		Updated_by : Satheesh
		Updated_date : 23-02-2023
	*/
	v_district_id udd_int := 0; 
begin
	v_district_id := (select fn_get_districtid(_district_code));
	-- stored procedure body
	open _result_block for select 	
								block_id,
								state_id,
								district_id,
								block_code,
-- 								block_name_en,
								fn_get_block_ll_desc(block_id,_lang_code) as block_name_local,
								case
								when _lang_code <> 'hi_IN' then
								    block_name_en
								else block_name_local
								end as block_name_en
				  from 			block_master
				  where 		district_id = v_district_id
				  and 			is_active = true
-- 				  order by 		is_active,block_id
				  order by      block_name_en;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_clflist(_block_code udd_code, _lang_code udd_code, INOUT _result_clf refcursor DEFAULT 'rs_clf'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 30-01-2023
		
		SP Code :B01CLFG01
		Version No : 1
	*/
	v_block_id udd_int := 0; 
begin
	v_block_id := (select fn_get_blockid(_block_code));
	-- stored procedure body
	open _result_clf for select
								block_code,
								block_id,
								cbo_type,
								cbo_id,
								cbo_code as clf_cbo_code,
								federation_name as clf_name
						   from  federation_profile_consolidated 
						   where block_id = v_block_id
						   and 	 is_active = true
						   and   cbo_type = 2
						   order by clf_name;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_courseapproverlist(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_courseapproval refcursor DEFAULT 'rs_courseapprovallst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 20-09-2022
		
		Updated By      : Mangai
		Updated Date    : 11-04-2023
		
		SP Code 		: B04CAPG01
		Version No		: 07
	*/
	v_view_flag udd_flag := 'N';
	v_auth_flag udd_flag := 'N';
	v_modifiy_flag udd_flag := 'N';
	
begin
	-- stored procedure body
	select 	view_flag,auth_flag,modifiy_flag 
	into 	v_view_flag,v_auth_flag,v_modifiy_flag 
	from 	core_mst_trolemenurights where menu_code = 'COUAPP002' 
	and 	role_code = _role_code;
	
	if (v_auth_flag = 'Y' or v_modifiy_flag = 'Y') then
		open _result_courseapproval for select 
											c.course_id,
											c.course_name,
											cp.approver_id,
											c.vertical_code,
											fn_get_masterdesc('QCD_VERTICAL', c.vertical_code, _lang_code) as vertical_desc,
											fn_get_course_level(c.course_level_jsonb, _lang_code) as course_level_jsonb_desc,
											fn_get_course_type(c.course_type_jsonb, _lang_code) as course_type_jsonb_desc,
											fn_get_subvertical(c.subvertical_jsonb, _lang_code) as subvertical_jsonb_desc,
-- 											fn_get_username(c.created_by) as maker_name,
											fn_get_username(c.updated_by) as maker_name,
											fn_get_rolename(u.role_code) as designation,
-- 											u.mobile_no as mobile_no,
											fn_get_usermobileno(c.updated_by) as mobile_no,
											c.status_code,
											fn_get_masterdesc('QCD_STATUS', c.status_code, _lang_code) as status_desc
											from trng_mst_tcourse as c
											inner join trng_mst_tcourseapproval as cp
											on c.course_id = cp.course_id
											and cp.approval_status_code in('A','S')
											left join core_mst_tuser as u
											on cp.approver_id = u.user_code 
											and u.status_code = 'A'
											where c.status_code in ('A','I','R','S') -- in ('S','R','B')
											and   cp.approver_id = _user_code
											order by c.course_id desc;
	elseif v_view_flag = 'Y' then 
		open _result_courseapproval for select 
											c.course_id,
											c.course_name,
											cp.approver_id,
											c.vertical_code,
											fn_get_masterdesc('QCD_VERTICAL', c.vertical_code, _lang_code) as vertical_desc,
											fn_get_course_level(c.course_level_jsonb, _lang_code) as course_level_jsonb_desc,
											fn_get_course_type(c.course_type_jsonb, _lang_code) as course_type_jsonb_desc,
											fn_get_subvertical(c.subvertical_jsonb, _lang_code) as subvertical_jsonb_desc,
-- 											fn_get_username(c.created_by) as maker_name,
											fn_get_username(c.updated_by) as maker_name,
											fn_get_rolename(u.role_code) as designation,
-- 											u.mobile_no as mobile_no,
											fn_get_usermobileno(c.updated_by) as mobile_no,
											c.status_code,
											fn_get_masterdesc('QCD_STATUS', c.status_code, _lang_code) as status_desc
											from trng_mst_tcourse as c
											inner join trng_mst_tcourseapproval as cp
											on c.course_id = cp.course_id
											and cp.approval_status_code in('A')
											left join core_mst_tuser as u
											on cp.approver_id = u.user_code 
											and u.status_code = 'A'
											where c.status_code in ('A','I','R') -- in ('S','R','B')
											and   cp.approver_id = _user_code
											order by c.course_id desc;
	
	end if;						

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_courseapproverlov(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _village_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_userapprover refcursor DEFAULT 'rs_userapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 20-09-2022
		
		Updated By 		: Mangai
		Updatde Date 	: 24-03-2022
		
		SP Code 		: B01USRG01
		Version No 		: 05
	*/
	v_user_name udd_desc := '';
	v_role_name udd_desc := '';
	
begin
	if _state_code = '' then 
		_state_code = null;
	end if;
	if _district_code = '' then 
		_district_code = null;
	end if;
	if _block_code = '' then 
		_block_code = null;
	end if;
	if _panchayat_code = '' then 
		_panchayat_code = null;
	end if;
	if _village_code = '' then 
		_village_code = null;
	end if;
	
	-- Store Procedure body --
	if _user_level_code = '89' then
		call pr_get_stateapproverlist(_vertical_code,_user_level_code,_state_code,
										  _result_userapprover);
	elseif _user_level_code = '79' then
		call pr_get_distapproverlist(_vertical_code,_user_level_code, _state_code,
									 _district_code,_result_userapprover);
	elseif _user_level_code = '69' then
		call pr_get_blockapproverlist(_vertical_code,_user_level_code, _state_code,
									 _district_code,_block_code,_result_userapprover);
	elseif _user_level_code = '59' then
		call pr_get_panchayatapproverlist(_vertical_code,_user_level_code, _state_code,
									  _district_code,_block_code,_panchayat_code,
									  _result_userapprover);
	elseif _user_level_code = '49' then
		call pr_get_villageapproverlist(_vertical_code,_user_level_code, _state_code,
									  _district_code,_block_code,_panchayat_code,
									  _village_code,_result_userapprover);
	elseif _user_level_code = '99' then
		-- Get role and user name
		select fn_get_rolename(_role_code) into v_role_name;
		select fn_get_username(_user_code) into v_user_name;
		
		open _result_userapprover for select
											v_user_name, 
											_user_code as user_code, 
											_role_code as role_code,
											v_role_name;
	end if;				
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_courseidsubverticallist(_course_id udd_desc, _vertical_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_desc, INOUT _result_courseidsubvertical refcursor DEFAULT 'rs_courseidsubvertical'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By   : Mohan S
		Created Date : 29-10-2022
		
		Updated By 	 : Mohan S
		Updated Date : 05-11-2022
		
		SP Code 	 : B04SVTG02
	*/
begin
	-- stored procedure body
		open _result_courseidsubvertical for select 
												a.course_id,
												b.subvertical as subvertical_code,
												fn_get_masterdesc('QCD_SUBVERTICAL', b.subvertical, _lang_code) as subvertical_desc
									 from trng_mst_tcourse a,
									 jsonb_to_recordset(a.subvertical_jsonb::udd_jsonb) b(subvertical udd_text)
									 where a.course_id = _course_id
									 and a.vertical_code = _vertical_code
									 and a.status_code <> 'I';
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_courseidverticallist(_course_id udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_desc, INOUT _result_courseidvertical refcursor DEFAULT 'rs_courseidvertical'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By   : Mohan S
		Created Date : 29-10-2022
		SP Code 	 : B04VERG02
	*/
begin
	-- stored procedure body
		open _result_courseidvertical for select 
											course_id,
											vertical_code,
											fn_get_masterdesc('QCD_VERTICAL', vertical_code, _lang_code) as vertical_desc
									 from trng_mst_tcourse 
									 where course_id = _course_id
									 and status_code <> 'I';
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_courselevel(_course_id udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_courselevellist refcursor DEFAULT 'rs_courselevel'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 08-11-2022
		SP Code : B04COUG02
	*/
begin
		-- stored procedure body
		open _result_courselevellist for select  
											course_level,
											fn_get_masterdesc('QCD_COURSE_LEVEL', course_level, _lang_code) as course_level_desc
										from trng_mst_vcourselevel
										where course_id = _course_id
										and status_code = 'A'; 
									
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_coursemateriallist(_course_id udd_code, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_coursemateriallist refcursor DEFAULT 'rs_coursemateriallist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 08-11-2022
		
		Updated By   : Mangai
		Updated Date : 02-12-2022
		
		SP Code      : B04COCG01
		Version No   : 2
		
	*/
	 v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body
	open _result_coursemateriallist for select 	
											cc.coursecontent_gid,
											cc.course_id,
											cc.coursemodule_id,
											cm.module_name,
											cm.module_ll_name,
											coalesce(to_char(c.validity_from,v_config_value)::udd_code,'') as validity_from,
							  				coalesce(to_char(c.validity_to,v_config_value)::udd_code,'') as validity_to,
											cc.material_desc,
											cc.lang_code,
											fn_get_languagedesc(cc.lang_code) as lang_desc,
											cc.file_type_code,
											fn_get_masterdesc('QCD_FILE_TYPE',cc.file_type_code,_lang_code) as file_type_desc,
											cc.file_name,
											cc.file_path,
											cc.status_code,
											fn_get_masterdesc('QCD_STATUS',cc.status_code,_lang_code) as status_desc
								from 		trng_mst_tcourse as c
								inner join	trng_mst_tcoursecontent as cc
								on          c.course_id = cc.course_id
								inner join  trng_mst_tcoursemodule as cm
								on			c.course_id = cm.course_id
								where 	    cc.course_id   = _course_id;
-- 								and         cc.status_code <> 'I';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_coursenamelist(_vertical_code udd_code, _subvertical_jsonb udd_jsonb, _course_level_jsonb udd_jsonb, _course_type_jsonb udd_jsonb, _course_name udd_desc, _status_code udd_code, _screen_mode udd_code, _user_level_code udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_coursenamelist refcursor DEFAULT 'rs_coursename'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 19-09-2022
		
		Updated By : Mohan S
		Updated Date : 26-11-2022
		
		SP Code : B04COUG01
		version no : 02
	*/
	vsql udd_text := '';
	v_status_code udd_desc := '';
begin
	-- set default values
	if _course_level_jsonb isnull then
		_course_level_jsonb = '[{}]';
	end if;

	if _course_type_jsonb isnull then
		_course_type_jsonb = '[{}]';
	end if;

	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;

	
	
	if _screen_mode = 'create' then
			v_status_code := 'and status_code <> ''I'' ';
			_user_code := null;
		elseif _screen_mode = 'modify' then
			v_status_code := 'and status_code not in (''R'',''I'',''S'') ';
		elseif _screen_mode = 'view' then
			v_status_code := '';
			_user_code := null;
	end if ;
		-- drop temporary table
		drop table if exists trng_tmp_tcourseid;
		
		-- create temporary table for course_id
		vsql = 'create temporary table trng_tmp_tcourseid as 
				select 	distinct a.course_id
				from 	trng_mst_tcourse a,
						jsonb_to_recordset(course_level_jsonb::udd_jsonb) b(course_level udd_text),
						jsonb_to_recordset(course_type_jsonb::udd_jsonb) c(course_type udd_text),
						jsonb_to_recordset(subvertical_jsonb::udd_jsonb) d(subvertical udd_text)
				where   1 = 1 ' || v_status_code;

		if _course_name <> '' then
			vsql = vsql || ' and course_name ilike ''' || _course_name || '%''collate pg_catalog.""default""';
		end if;

		 if _vertical_code <> '' then
			 vsql = vsql || ' and vertical_code = ''' || _vertical_code || '''';
		 end if;

		if _subvertical_jsonb <> '[{}]' then
			vsql = vsql || 
					'and     d.subvertical in 
					(
						select dd.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as dd (subvertical udd_code)
					)';
		end if;

		if _course_level_jsonb <> '[{}]' then
			vsql = vsql || 
				'and     b.course_level in 
				(
					select bb.course_level from jsonb_to_recordset(''' || _course_level_jsonb || ''') as bb (course_level udd_code)
				)';
		end if;

		if _course_type_jsonb <> '[{}]' then
			vsql = vsql || 
				'and     c.course_type in 
				(
					select cc.course_type from jsonb_to_recordset(''' || _course_type_jsonb || ''') as cc (course_type udd_code)
				)';
		end if;

		if _status_code <> '' then
			vsql = vsql || ' and a.status_code = ''' || _status_code || '''';
		end if;

		-- execute the query variable vsql
		execute vsql;

		-- stored procedure body
		open _result_coursenamelist for select distinct	
											a.course_id,
											a.course_name,
											a.course_ll_name,
											fn_get_course_type(course_type_jsonb,_lang_code)  as course_type_jsonb_desc,
											fn_get_course_level(course_level_jsonb,_lang_code)  as course_level_jsonb_desc,
											a.vertical_code,
											fn_get_masterdesc('QCD_VERTICAL', a.vertical_code, _lang_code) as vertical_desc,
											fn_get_subvertical(subvertical_jsonb,_lang_code)  as subvertical_jsonb_desc,
											a.row_timestamp,
											a.status_code,
											fn_get_masterdesc('QCD_STATUS', a.status_code, _lang_code) as status_desc
									from 	trng_mst_tcourse a
									inner join trng_tmp_tcourseid e on a.course_id = e.course_id,
									jsonb_to_recordset(course_level_jsonb) b(course_level udd_text)
									where b.course_level::udd_int <= _user_level_code::udd_int
									and   a.vertical_code = _vertical_code
-- 									and  a.created_by = coalesce(_user_code,a.created_by)
									order by a.row_timestamp desc; 
									
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_coursetrainerlist(_course_id udd_code, _trainer_type_code udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _trainer_level_code udd_code, _resource_type_code udd_code, _trainer_name udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainer refcursor DEFAULT 'rs_trainerlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 19-09-2022
		
		Updated By      : Mangai
		Updated Date	: 18-11-2022
		
		SP Code 		: B04TRNG02
		Version No      : 2
	*/
	vsql udd_text := '';
	v_course_level_jsonb udd_jsonb := '[{}]';
	v_trainer_level_code udd_code := '';
begin
/*	select 	course_level_jsonb into v_course_level_jsonb
	from 	trng_mst_tcourse where course_id = _course_id
	and 	status_code <> 'A';
	
	select a.course_level into v_trainer_level_code from
	jsonb_to_recordset(v_course_level_jsonb) a(course_level udd_text);
*/	
	-- set default values
	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;
	
	-- drop temporary table
	drop table if exists trng_tmp_ttrainersubvertical;
	drop table if exists trng_tmp_ttrainerid;
	
	-- create temporary table for trainer_id
	vsql = 'create temporary table trng_tmp_ttrainerid as 
			select 	distinct t.trainer_id
			from 	trng_mst_ttrainer t ';
			
	if _vertical_code <> '' or _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 'left join trng_mst_ttrainerdomain as td on t.trainer_id = td.trainer_id
			and td.status_code = ''A'',
			jsonb_to_recordset(subvertical_jsonb::udd_jsonb) b(subvertical udd_text) ';
	end if;
	
	vsql = vsql || ' where 1=1 and t.status_code <> ''I''';

	if _trainer_name <> '' then
		vsql = vsql || ' and t.trainer_name ilike ''' || _trainer_name || '%''collate pg_catalog.""default""';
	end if;
	
	if _trainer_type_code <> '' then
		vsql = vsql || ' and t.trainer_type_code = ''' || _trainer_type_code || '''';
	end if;
	
	if _vertical_code <> '' then
		vsql = vsql || ' and td.vertical_code = ''' || _vertical_code || '''';
	end if;
	
	if _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 
				'and     b.subvertical in 
				(
					select bb.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as bb (subvertical udd_code)
				)';
	end if;	
	
	if _trainer_level_code <> '' then
		vsql = vsql || ' and t.trainer_level_code = ''' || _trainer_level_code || '''';
	end if;
	
	if _resource_type_code <> '' then
		vsql  = vsql || ' and t.resource_type_code = ''' || _resource_type_code || '''';
	end if;
	
	-- execute the query variable vsql
	execute vsql;
		
	-- stored procedure body
	open _result_trainer for select
								t.trainer_gid,
								t.trainer_id,
								t.trngorg_id,
								t.trainer_name,
								t.trainer_ll_name,
								fn_get_trainersubvertical(t.trainer_id,_lang_code) as subvertical_jsonb_desc,
								t.mobile_no,
								t.email_id,
								t.trainer_type_code,
								fn_get_masterdesc('QCD_TRAINER_TYPE', t.trainer_type_code, _lang_code) as trainer_type_desc,
								coalesce(t.validity_from::udd_text,'') as validity_from,
								coalesce(t.validity_to::udd_text,'') as validity_to,
								coalesce(t.indefinite_flag,'') as indefinite_flag ,
								fn_get_trainervertical(t.trainer_id,_lang_code) as vertical_desc,
								t.trainer_level_code,
								fn_get_masterdesc('QCD_TRAINER_LEVEL', t.trainer_level_code, _lang_code) as trainer_level_desc,
								t.resource_type_code,
								fn_get_masterdesc('QCD_RESOURCE_TYPE', t.resource_type_code, _lang_code) as resource_type_desc,
								t.gender_code,
								t.trainer_qualification,
								fn_get_masterdesc('QCD_GENDER', t.gender_code, _lang_code) as gender_desc
								from trng_mst_ttrainer as t
								inner join trng_tmp_ttrainerid as ti on t.trainer_id = ti.trainer_id
-- 								where trainer_level_code in(v_trainer_level_code)
								order by coalesce(t.updated_date,t.created_date) desc;
							
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_distapproverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, _district_code udd_code, INOUT _result_distapprover refcursor DEFAULT 'rs_distapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-11-2022
		
		updated By 		: Mohan S
		Updatde Date 	: 09-12-2022
		
		SP Code 		: B01DSTG01
		Version No 		: 02
	*/
	
begin

	-- Store Procedure body --
	open _result_distapprover for select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code = '89'
										and   state_code = _state_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';
									/*select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';*/

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_districtlist(_state_code udd_code, _lang_code udd_code, INOUT _result_district refcursor DEFAULT 'rs_district'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 17-10-2022
		SP Code : B01DSMG01
		
		Updated_by : Satheesh
		Updated_date : 23-02-2023
	*/
	v_state_id udd_int := 0;
begin
	v_state_id := (select fn_get_stateid(_state_code));
	
	-- stored procedure body
	open _result_district for select 	
								district_id,
								state_id,
								district_code,
-- 								district_name_en,
                                case when _lang_code <> 'hi_IN' then
									     district_name_en
							    else 
								         district_name_local	     
								end as district_name_en,
								district_name_hi,
								fn_get_district_ll_desc(district_id,_lang_code) as district_name_local
				  from 			district_master
				  where 		state_id = v_state_id
				  and 			is_active = true
-- 				  order by 		is_active,district_id
				  order by      district_name_en;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_emailtran(_lang_code udd_code, _user_code udd_code, _role_code udd_code, INOUT _result_emailtran refcursor DEFAULT 'rs_emailtran'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 31-01-2023
		SP Code : B01EMAG01
		Version No 		: 01
	*/
	
begin
	-- stored procedure body 
	open _result_emailtran for select 
									emailtran_gid,
									email_id,
									emailtemplate_code,
									email_subject,
									email_content,
									scheduled_date,
									email_delivered_flag,
									user_code,
									role_code,
									email_remark
							from 	trng_trn_temailtran
							where	status_code = 'A'
							order by emailtran_gid desc;
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_emptyshorturllist(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_shorturllist refcursor DEFAULT 'rs_shorturllst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 2-03-2023

		SP Code    : B01SMSG02 
		Version No : 1
	*/
	
begin
	-- stored procedure body 	
	open _result_shorturllist for select 
											smstran_gid,
											original_url,
											short_url,
											status_code,
											fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
									from    trng_trn_tsmstran
									where   (short_url = '' or short_url isnull)
									and     original_url <> ''
									and     status_code = 'A';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_executenotelist(_activity_ref_id udd_code, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_notelist refcursor DEFAULT 'rs_notelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 06-02-2023
		
		Updated By   : Mangai
		Updated Date : 5-04-2023
		
		SP Code      : B04CONG02
		Version No : 05
	*/
	v_config_value udd_desc := '';
	v_level_code udd_code := '';
	v_created_date udd_datetime := null;
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- Get created date 
	select created_date into v_created_date
	from   trng_mst_tnote
	where  activity_ref_id = _activity_ref_id
	and    note_code = 'A';
	
	v_level_code := (select fn_get_activitylevelcode(_activity_ref_id));
	-- stored procedure body
	open _result_notelist for select 	
										  note_gid,
										  activity_code,
										  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
-- 										  fn_get_activitylevelcode (_activity_ref_id,activity_code) as v_level_code,
										  --note_desc,
										  case when (note_code isnull or note_code = '') then 
												note_desc 
										  else
										  		case when v_level_code = '99' and note_code = 'A' then
													 'Auto Approved' 
											else
												case when (note_code notnull or note_code <> '') and 
															(note_desc <> 'Auto') then
												fn_get_masterdesc('QCD_NOTE_STATUS', 'QCD_BATCH_NAME', _lang_code) || note_desc || ' ; ' || 
												fn_get_masterdesc('QCD_NOTE_STATUS', 'QCD_BATCH_STATUS', _lang_code)|| fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code) 
											else
												case when (note_code notnull or note_code <> '') and 
															(note_desc = 'Auto') then
												note_desc || ' ' ||fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code)
-- 											else
-- 												case when (note_code notnull or note_code <> '') and 
-- 															(note_desc notnull or note_desc <> '')  then
-- 												fn_get_masterdesc('QCD_NOTE_STATUS', 'QCD_BATCH_STATUS', _lang_code)|| fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code) || ' ; ' || 
-- 												fn_get_masterdesc('QCD_NOTE_STATUS', 'QCD_BATCH_NAME', _lang_code) || fn_get_batchllname(activity_ref_id,tprogrambatch_id) 
											else 
													fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code) || 
												case when reject_reason_code <> '' then
													' - ' 
													|| fn_get_masterdesc('QCD_REJ_REASON', reject_reason_code, _lang_code) 
											else
												case when deactivation_reason_code <> '' then
													' - ' 
													|| fn_get_masterdesc('QCD_DEA_REASON', deactivation_reason_code, _lang_code) 
											else
												case when sendback_reason <> '' then
													' - ' 
													|| sendback_reason
											else
												''
												end
												end
												end
												end
												end
												end
-- 												end
										  end as note_desc,
										  note_code,
										  reject_reason_code,
										  deactivation_reason_code,
										  sendback_reason,
-- 										  created_date::udd_code,
 										  created_date::udd_code as org_created_date,
									  	  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS') as created_date,
										  fn_get_username(created_by) as created_by
									from  trng_mst_tnote
									where activity_ref_id = _activity_ref_id
									and   created_date > v_created_date
									order by org_created_date desc;
			
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_exltrainersrch(_trainer_type_code udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _trainer_level_code udd_code, _resource_type_code udd_code, _trainer_name udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainer refcursor DEFAULT 'rs_trainerlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mangai
		Created Date 	: 27-10-2022
		
		Updated By      : Satheesh
		Updated Date    : 15-11-2022
		
		SP Code         : B05TRAG01
		version no      : 03
		
	*/
	vsql udd_text := '';
	v_config_value udd_desc := '';
begin

	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- set default values
	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;
	
	-- drop temporary table
	drop table if exists trng_tmp_ttrainersubvertical;
	drop table if exists trng_tmp_ttrainerid;
	
	-- create temporary table for trainer_id
	vsql = 'create temporary table trng_tmp_ttrainerid as 
			select 	distinct t.trainer_id
			from 	trng_mst_ttrainer t
			left join trng_mst_ttrainerdomain as td on t.trainer_id = td.trainer_id
			and td.status_code = ''A'' ,
			jsonb_to_recordset(subvertical_jsonb::udd_jsonb) b(subvertical udd_text)
			where 1=1 and t.status_code <> ''I''  ';
			
	if _trainer_name <> '' then
		vsql = vsql || ' and t.trainer_name ilike ''' || _trainer_name || '%''collate pg_catalog.""default""';
	end if;
	
	if _trainer_type_code <> '' then
		vsql = vsql || ' and t.trainer_type_code = ''' || _trainer_type_code || '''';
	end if;
	
	if _vertical_code <> '' then
		vsql = vsql || ' and td.vertical_code = ''' || _vertical_code || '''';
	end if;
	
	if _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 
				'and     b.subvertical in 
				(
					select bb.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as bb (subvertical udd_code)
				)';
	end if;	
	
	if _trainer_level_code <> '' then
		vsql = vsql || ' and t.trainer_level_code = ''' || _trainer_level_code || '''';
	end if;
	
	if _resource_type_code <> '' then
		vsql  = vsql || ' and t.resource_type_code = ''' || _resource_type_code || '''';
	end if;
	
	-- execute the query variable vsql
	execute vsql;
		
	-- stored procedure body
	open _result_trainer for select
								t.trainer_gid,
								t.trainer_id,
								t.trngorg_id,
								t.trainer_name,
								t.trainer_ll_name,
								fn_get_subvertical(subvertical_jsonb, _lang_code) as subvertical_jsonb_desc,
								t.mobile_no,
								t.email_id,
								t.trainer_type_code,
								fn_get_masterdesc('QCD_TRAINER_TYPE', t.trainer_type_code, _lang_code) as trainer_type_desc,
								coalesce(to_char(t.validity_from,v_config_value)::udd_text,'') as validity_from,								
								coalesce(to_char(t.validity_to,v_config_value)::udd_text,'') as validity_to,
 								coalesce(t.validity_from ::udd_code,'') as org_validity_from,
 								coalesce(t.validity_to ::udd_code,'') as org_validity_to,
								coalesce(t.indefinite_flag,'') as indefinite_flag ,
								coalesce(td.vertical_code,'') as vertical_code,
								fn_get_masterdesc('QCD_VERTICAL', td.vertical_code, _lang_code) as vertical_desc,
								t.trainer_level_code,
								fn_get_masterdesc('QCD_TRAINER_LEVEL', t.trainer_level_code, _lang_code) as trainer_level_desc,
								t.resource_type_code,
								fn_get_masterdesc('QCD_RESOURCE_TYPE', t.resource_type_code, _lang_code) as resource_type_desc,
								t.gender_code,
								t.trainer_qualification,
								fn_get_masterdesc('QCD_GENDER', t.gender_code, _lang_code) as gender_desc
								from trng_mst_ttrainer as t
								left join trng_mst_ttrainerdomain as td on t.trainer_id = td.trainer_id
								and td.status_code = 'A' 
								left join trng_tmp_ttrainerid as ti on t.trainer_id = ti.trainer_id
								where t.trainer_type_code = 'QCD_EXTERNAL'
								order by t.trainer_id,coalesce(t.updated_date,t.created_date) ;
							
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_fbquestemplatelist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_lang_code udd_code, _questionaire_type_code udd_code, _user_code udd_user, _lang_code udd_code, _role_code udd_code, INOUT _result_feedbackheader refcursor DEFAULT 'rs_feedbackheader'::refcursor, INOUT _result_feedbacklist refcursor DEFAULT 'rs_feedbacklist'::refcursor, INOUT _result_response refcursor DEFAULT 'rs_response'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

DECLARE
	/*
		Created By   : Mangai
		Created Date : 21-02-2022
		
		Updated By   : Mangai
		Updated Date : 31-03-2022
		
		SP Code      : B03QTEG01
		Version No   : 03
	*/
	v_course_id udd_code := '';
	v_trainer_questionaire_id udd_code := '';
	v_participant_questionaire_id udd_code := '';
	v_lang_code udd_code := '';
	
begin
	-- Get course id 
	select course_id into v_course_id from trng_trn_ttprogram
	where tprogram_id = _tprogram_id
	and status_code = 'A';
	
	-- Get Trainer Questionaire id  
	select 	questionaire_id into v_trainer_questionaire_id
	from 	trng_mst_vquestionairecourse 
	where 	course_id = v_course_id
	and     questionaire_type_code  = 'QCD_TRAINER';
		
	v_trainer_questionaire_id := coalesce(v_trainer_questionaire_id,'');
	
	if v_trainer_questionaire_id = '' then
		select questionaire_id into v_trainer_questionaire_id
		from   trng_mst_tquestionaire
		where  questionaire_type_code  = 'QCD_TRAINER'
		and    course_jsonb = '[{}]'
		and    status_code = 'A';
	end if;
	
	-- Get Participant Questionaire id  
	
	select 	questionaire_id into v_participant_questionaire_id
	from 	trng_mst_vquestionairecourse 
	where 	course_id = v_course_id
	and     questionaire_type_code  = 'QCD_PARTICIPANT';
		
	v_participant_questionaire_id := coalesce(v_participant_questionaire_id,'');	
	
	if v_participant_questionaire_id = '' then
		select questionaire_id into v_participant_questionaire_id
		from   trng_mst_tquestionaire
		where  questionaire_type_code  = 'QCD_PARTICIPANT'
		and    course_jsonb = '[{}]'
		and    status_code = 'A';
	end if;
	
	-- Get batch lang
	select lang_code into v_lang_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id  = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;
-- 	and    status_code = 'C';

	-- store procedure body
	
	if _questionaire_type_code = 'QCD_TARINER'	then										
		if v_trainer_questionaire_id <> '' or v_trainer_questionaire_id notnull then
			open _result_feedbackheader for select	
													'' as questionaire_id,
													'' as questionaire_type_code,
													'' as questionaire_type_desc,												
													'' as trainer_id,
													'' as tprogram_id,
													'' as org_start_date,
													'' as org_end_date,
													'' as start_date,
													'' as end_date,
													'' as tprogrambatch_id,
													'' as coordinator_id,
													'' as coordinator_name,
													'' as trainer_name,
													'' as participant_name,
													'' as program_name,
													'' as batch_name,
													'' as org_batch_start_date,
													'' as org_batch_end_date,
													'' as batch_start_date,
													'' as batch_end_date,
													'' as feedback_status,
													'' as feedback_status_desc;

			open _result_feedbacklist for select 
													'' as feedbacktrainer_gid,
													'' as tra_par_feedback_code,
													'' as tra_par_feedback_desc,
													'' as tra_par_response,
													q.questionaire_id,
													q.questionaire_type_code,
													fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
													qg.questionairegrp_id,
													qg.questionairegrp_seq_no,
													qg.questionairegrp_code,
													fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
													qstt.question_desc,
													qst.question_id,
													qst.question,
													qst.question_seq_no,
													qst.question_type_code,
													fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
													qst.question_code,
													fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
													qstt.lang_code,
													fn_get_languagedesc(qstt.lang_code) as lang_desc
										from 		trng_mst_tquestionaire as q
										inner join  trng_mst_tquestionairegrp as qg
										on          q.questionaire_id = qg.questionaire_id
										and         q.status_code = 'A'
										and         qg.status_code = 'A'
										inner join  trng_mst_tquestion as qst
										on			qg.questionairegrp_id = qst.questionairegrp_id
										and         qst.status_code = 'A'
										inner join  trng_mst_tquestiontranslate as qstt
										on          qst.question_id = qstt.question_id
	-- 									inner join  trng_trn_tfeedbacktrainer as fbt
	-- 									on          q.questionaire_id = fbt.questionaire_id
	-- 									and         qst.question_id   = fbt.question_id
	-- 									and         qst.question_type_code = fbt.question_type_code
										where       q.questionaire_id = v_trainer_questionaire_id
										and         qstt.lang_code = _batch_lang_code
	-- 									and         fbt.tprogram_id  = _tprogram_id
	-- 									and         fbt.tprogrambatch_id = _tprogrambatch_id
	-- 									and         fbt.trainer_id = _trainer_id
										order by questionairegrp_seq_no,question_seq_no;

			open _result_response for select    c.* from (select distinct 
											a.master_code,
											a.parent_code,
											b.master_desc
										from core_mst_tmaster as a
										inner join core_mst_tmastertranslate as b
										on a.master_code = b.master_code
										where a.parent_code = 'QCD_RESPONSE'
										and a.status_code = 'A'
										and b.lang_code = v_lang_code
										and a.parent_code <> 'SYS'
								union all 
										select distinct 
											a.master_code,
											a.parent_code,
											b.master_desc
										from core_mst_tmaster as a
										inner join core_mst_tmastertranslate as b
										on a.master_code = b.master_code
										where a.parent_code in (select a.master_code
																from core_mst_tmaster as a
																inner join core_mst_tmastertranslate as b
																on a.master_code = b.master_code
																where a.parent_code = 'QCD_RESPONSE'
																and a.status_code = 'A')
										and a.parent_code = b.parent_code
										and a.status_code = 'A'
										and b.lang_code = v_lang_code
										and a.parent_code <> 'SYS') as c;
		end if;					
	end if;
	
	if _questionaire_type_code = 'QCD_PARTICIPANT' then
		if v_participant_questionaire_id <> '' or v_participant_questionaire_id notnull then
			open _result_feedbackheader for select	
													'' as questionaire_id,
													'' as questionaire_type_code,
													'' as questionaire_type_desc,												
													'' as trainer_id,
													'' as tprogram_id,
													'' as org_start_date,
													'' as org_end_date,
													'' as start_date,
													'' as end_date,
													'' as tprogrambatch_id,
													'' as coordinator_id,
													'' as coordinator_name,
-- 													'' as trainer_name,
													fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name,
													'' as participant_name,
													'' as program_name,
													'' as batch_name,
													'' as org_batch_start_date,
													'' as org_batch_end_date,
													'' as batch_start_date,
													'' as batch_end_date,
													'' as feedback_status,
													'' as feedback_status_desc;

			open _result_feedbacklist for select distinct
													'' as feedbackparticipant_gid,
													'' as tra_par_feedback_code,
													'' as tra_par_feedback_desc,
													'' as tra_par_response,
													q.questionaire_id,
													q.questionaire_type_code,
													fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
													qg.questionairegrp_id,
													qg.questionairegrp_seq_no,
													qg.questionairegrp_code,
													fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
													qstt.question_desc,
													qst.question_id,
													qst.question,
													qst.question_seq_no,
		-- 											fn_get_masterdesc('',qst.question,_lang_code) as question_desc,
													qst.question_type_code,
													fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
													qst.question_code,
													fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
													fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name
													--qstt.lang_code,
													--fn_get_languagedesc(qstt.lang_code) as lang_desc
	-- 												coalesce(p.participant_id,'') as participant_id,
	-- 												coalesce(p.tprogram_id,'') as tprogram_id,
	-- 												coalesce(p.tprogrambatch_id,'') as tprogrambatch_id,
	-- 												fn_get_participantname(p.participant_id) as participant_name,
	-- 												coalesce(fn_get_batchstartdate(p.tprogram_id,p.tprogrambatch_id)::udd_code,'') as batch_start_date,
	-- 												fn_get_programname (p.tprogram_id) as program_name,
	-- 												fn_get_batchname (p.tprogram_id,p.tprogrambatch_id) as batch_name
										from 		trng_mst_tquestionaire as q
										inner join  trng_mst_tquestionairegrp as qg
										on          q.questionaire_id = qg.questionaire_id
										and         q.status_code = 'A'
										and         qg.status_code = 'A'
										inner join  trng_mst_tquestion as qst
										on			qg.questionairegrp_id = qst.questionairegrp_id
										and         qst.status_code = 'A'
										inner join  trng_mst_tquestiontranslate as qstt
										on          qst.question_id = qstt.question_id
	-- 									inner join  trng_trn_tfeedbackparticipant as fbp
	-- 									on          q.questionaire_id = fbp.questionaire_id
	-- 									and         qst.question_id   = fbp.question_id
	-- 									and         qst.question_type_code = fbp.question_type_code
										where       q.questionaire_id = v_participant_questionaire_id
										and         qstt.lang_code = _batch_lang_code
	-- 									and         fbp.tprogram_id  = _tprogram_id
	-- 									and         fbp.tprogrambatch_id = _tprogrambatch_id
	-- 									and         fbp.participant_id = _participant_id
	-- 									and         _question_lang_code = v_lang_code
										order by questionairegrp_seq_no,question_seq_no;

			open _result_response for select    c.* from (select distinct 
											a.master_code,
											a.parent_code,
											b.master_desc
										from core_mst_tmaster as a
										inner join core_mst_tmastertranslate as b
										on a.master_code = b.master_code
										where a.parent_code = 'QCD_RESPONSE'
										and a.status_code = 'A'
										and b.lang_code = v_lang_code
										and a.parent_code <> 'SYS'
								union all 
										select distinct 
											a.master_code,
											a.parent_code,
											b.master_desc
										from core_mst_tmaster as a
										inner join core_mst_tmastertranslate as b
										on a.master_code = b.master_code
										where a.parent_code in (select a.master_code
																from core_mst_tmaster as a
																inner join core_mst_tmastertranslate as b
																on a.master_code = b.master_code
																where a.parent_code = 'QCD_RESPONSE'
																and a.status_code = 'A')
										and a.parent_code = b.parent_code
										and a.status_code = 'A'
										and b.lang_code = v_lang_code
										and a.parent_code <> 'SYS') as c;
		end if;
	end if;
	
		
-- 	if v_questionaire_type_code = 'QCD_PARTICIPANT' then	
-- 		open _result_feedbacklist for select distinct
-- 												fbp.feedbackparticipant_gid,
-- 												fbp.participants_feedback_code as tra_par_feedback_code,
-- 												fn_get_masterdesc(qst.question_code,fbp.participants_feedback_code,v_lang_code) as tra_par_feedback_desc,
-- 												fbp.participants_response as tra_par_response,
-- 												q.questionaire_id,
-- 												q.questionaire_type_code,
-- 												fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
-- 												qg.questionairegrp_id,
-- 												qg.questionairegrp_seq_no,
-- 												qg.questionairegrp_code,
-- 												fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
-- 												qstt.question_desc,
-- 												qst.question_id,
-- 												qst.question,
-- 												qst.question_seq_no,
-- 												qst.question_type_code,
-- 												fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
-- 												qst.question_code,
-- 												fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
-- 												fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name
-- 									from 		trng_mst_tquestionaire as q
-- 									inner join  trng_mst_tquestionairegrp as qg
-- 									on          q.questionaire_id = qg.questionaire_id
-- 									and         q.status_code = 'A'
-- 									and         qg.status_code = 'A'
-- 									inner join  trng_mst_tquestion as qst
-- 									on			qg.questionairegrp_id = qst.questionairegrp_id
-- 									and         qst.status_code = 'A'
-- 									inner join  trng_mst_tquestiontranslate as qstt
-- 									on          qst.question_id = qstt.question_id
-- 									inner join  trng_trn_tfeedbackparticipant as fbp
-- 									on          q.questionaire_id = fbp.questionaire_id
-- 									and         qst.question_id   = fbp.question_id
-- 									and         qst.question_type_code = fbp.question_type_code
-- 									where       q.questionaire_id = _questionaire_id
-- 								    and         qstt.lang_code = v_lang_code
-- 									and         fbp.tprogram_id  = _tprogram_id
-- 									and         fbp.tprogrambatch_id = _tprogrambatch_id
-- 									and         fbp.participant_id = _participant_id
-- 									order by questionairegrp_seq_no,question_seq_no;
-- 	end if;
	
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_fbquestionlist(_questionaire_id udd_code, _question_lang_code udd_code, _questionaire_type_code udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _trainer_id udd_code, _participant_id udd_code, _batch_lang_code udd_code, _user_code udd_user, _lang_code udd_code, _role_code udd_code, INOUT _result_feedbackheader refcursor DEFAULT 'rs_feedbackheader'::refcursor, INOUT _result_feedbacklist refcursor DEFAULT 'rs_feedbacklist'::refcursor, INOUT _result_response refcursor DEFAULT 'rs_response'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 07-12-2022
		
		Updated By   : Mangai
		Updated Date : 04-02-2023
		
		SP Code      : B03FEDG01
		Version No   : 10
	*/
	
	v_questionaire_type_code udd_code := '';
	v_lang_code udd_code := '';
	
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';

	-- Get questionaire type code
	select questionaire_type_code into v_questionaire_type_code
	from   trng_mst_tquestionaire
	where  questionaire_id = _questionaire_id
	and    status_code = 'A';
	
	-- Get batch lang
	select lang_code into v_lang_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id  = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code = 'C';
	
-- 	raise exception '%',v_questionaire_type_code;
	
	-- stored procedure body	
	if v_questionaire_type_code = 'QCD_TRAINER' then
		open _result_feedbackheader for select	distinct
												t.questionaire_id,
												v_questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',v_questionaire_type_code,v_lang_code) as questionaire_type_desc,												
												t.trainer_id,
												t.tprogram_id,
												p.start_date  as org_start_date,
												p.end_date as org_end_date,
												to_char(p.start_date,v_config_value) as start_date,
												to_char(p.end_date,v_config_value) as end_date,
												t.tprogrambatch_id,
												p.coordinator_id,
												fn_get_username(p.coordinator_id) as coordinator_name,
												fn_get_trainername(t.trainer_id) as trainer_name,
												fn_get_programname (t.tprogram_id) as program_name,
												fn_get_batchname (t.tprogram_id,t.tprogrambatch_id) as batch_name,
												coalesce(fn_get_batchstartdate(t.tprogram_id,t.tprogrambatch_id)::udd_code,'') as org_batch_start_date,
												coalesce(fn_get_batchenddate(t.tprogram_id,t.tprogrambatch_id)::udd_code,'') as org_batch_end_date,
												to_char(fn_get_batchstartdate(t.tprogram_id,t.tprogrambatch_id),v_config_value) as batch_start_date,
												to_char(fn_get_batchenddate(t.tprogram_id,t.tprogrambatch_id),v_config_value) as batch_end_date,
												pt.feedback_status,
												fn_get_masterdesc('QCD_FB_STATUS',pt.feedback_status,_lang_code)as feedback_status_desc
										from   	trng_trn_tfeedbacktrainer as t
										inner join trng_trn_ttprogram as p on t.tprogram_id = p.tprogram_id
										inner join trng_trn_ttprogramtrainer as pt
										on      t.trainer_id = pt.trainer_id
										and     t.tprogram_id = pt.tprogram_id   
										and     t.tprogrambatch_id = pt.tprogrambatch_id
										and     pt.status_code = 'A'
										where   t.questionaire_id = _questionaire_id
										and     t.tprogram_id = _tprogram_id
										and     t.tprogrambatch_id = _tprogrambatch_id
										and     t.trainer_id = _trainer_id;
												
		open _result_feedbacklist for select 
												fbt.feedbacktrainer_gid,
												fbt.trainers_feedback_code as tra_par_feedback_code,
												fn_get_masterdesc(qst.question_code,fbt.trainers_feedback_code,v_lang_code) as tra_par_feedback_desc,
												fbt.trainers_response as tra_par_response,
												q.questionaire_id,
												q.questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
												qg.questionairegrp_id,
												qg.questionairegrp_seq_no,
												qg.questionairegrp_code,
												fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
												qstt.question_desc,
												qst.question_id,
												qst.question,
												qst.question_seq_no,
	-- 											fn_get_masterdesc('',qst.question,_lang_code) as question_desc,
												qst.question_type_code,
												fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
												qst.question_code,
												fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
												qstt.lang_code,
												fn_get_languagedesc(qstt.lang_code) as lang_desc
-- 												coalesce(t.trainer_id,'') as trainer_id,
-- 												coalesce(t.tprogram_id,'') as tprogram_id,
-- 												coalesce(t.tprogrambatch_id,'') as tprogrambatch_id,
-- 												fn_get_trainername(t.trainer_id) as trainer_name,
-- 												fn_get_programname (t.tprogram_id) as program_name,
-- 												fn_get_batchname (t.tprogram_id,t.tprogrambatch_id) as batch_name,
-- 												coalesce(fn_get_batchstartdate(t.tprogram_id,t.tprogrambatch_id)::udd_code,'') as batch_start_date
									from 		trng_mst_tquestionaire as q
									inner join  trng_mst_tquestionairegrp as qg
									on          q.questionaire_id = qg.questionaire_id
									and         q.status_code = 'A'
									and         qg.status_code = 'A'
									inner join  trng_mst_tquestion as qst
									on			qg.questionairegrp_id = qst.questionairegrp_id
									and         qst.status_code = 'A'
									inner join  trng_mst_tquestiontranslate as qstt
									on          qst.question_id = qstt.question_id
									inner join  trng_trn_tfeedbacktrainer as fbt
									on          q.questionaire_id = fbt.questionaire_id
									and         qst.question_id   = fbt.question_id
									and         qst.question_type_code = fbt.question_type_code
									where       q.questionaire_id = _questionaire_id
									and         qstt.lang_code = v_lang_code
									and         fbt.tprogram_id  = _tprogram_id
									and         fbt.tprogrambatch_id = _tprogrambatch_id
									and         fbt.trainer_id = _trainer_id
-- 									and         _question_lang_code = v_lang_code
									order by questionairegrp_seq_no,question_seq_no;
	end if;
	
	if v_questionaire_type_code = 'QCD_PARTICIPANT' then	
		open _result_feedbackheader for select	distinct
												fbp.questionaire_id,
												v_questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',v_questionaire_type_code,v_lang_code) as questionaire_type_desc,		
												fbp.participant_id,
												fbp.tprogram_id,
												p.start_date as org_start_date,
												p.end_date as org_end_date,
												to_char(p.start_date,v_config_value) as start_date,
												to_char(p.end_date,v_config_value) as end_date,
												fbp.tprogrambatch_id,
												p.coordinator_id,
												fn_get_username(p.coordinator_id) as coordinator_name,
												fn_get_participantname(fbp.participant_id) as participant_name,
												fn_get_programname (fbp.tprogram_id) as program_name,
												fn_get_batchname (fbp.tprogram_id,fbp.tprogrambatch_id) as batch_name,
												coalesce(fn_get_batchstartdate(fbp.tprogram_id,fbp.tprogrambatch_id)::udd_code,'') as org_batch_start_date,
												coalesce(fn_get_batchenddate(fbp.tprogram_id,fbp.tprogrambatch_id)::udd_code,'') as org_batch_end_date,
												to_char(fn_get_batchstartdate(fbp.tprogram_id,fbp.tprogrambatch_id),v_config_value) as batch_start_date,
												to_char(fn_get_batchenddate(fbp.tprogram_id,fbp.tprogrambatch_id),v_config_value) as batch_end_date,
												pp.feedback_status,
												fn_get_masterdesc('QCD_FB_STATUS',pp.feedback_status,_lang_code)as feedback_status_desc,
												fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name
										from   	trng_trn_tfeedbackparticipant as fbp
										inner join trng_trn_ttprogram as p on fbp.tprogram_id = p.tprogram_id
										inner join trng_trn_ttprogramparticipant as pp
										on      fbp.participant_id = pp.participant_id
										and     fbp.tprogram_id = pp.tprogram_id   
										and     fbp.tprogrambatch_id = pp.tprogrambatch_id
										and     pp.status_code = 'A'
										where   fbp.questionaire_id = _questionaire_id
										and     fbp.tprogram_id = _tprogram_id
										and     fbp.tprogrambatch_id = _tprogrambatch_id
										and     fbp.participant_id = _participant_id;
		
		open _result_feedbacklist for select distinct
												fbp.feedbackparticipant_gid,
												fbp.participants_feedback_code as tra_par_feedback_code,
												fn_get_masterdesc(qst.question_code,fbp.participants_feedback_code,v_lang_code) as tra_par_feedback_desc,
												fbp.participants_response as tra_par_response,
												q.questionaire_id,
												q.questionaire_type_code,
												fn_get_masterdesc('QCD_QUESTIONAIRE',q.questionaire_type_code,v_lang_code) as questionaire_type_desc,		
												qg.questionairegrp_id,
												qg.questionairegrp_seq_no,
												qg.questionairegrp_code,
												fn_get_masterdesc('QCD_QUESTGRP_CODE',qg.questionairegrp_code,v_lang_code) as questionairegrp_desc,
												qstt.question_desc,
												qst.question_id,
												qst.question,
												qst.question_seq_no,
	-- 											fn_get_masterdesc('',qst.question,_lang_code) as question_desc,
												qst.question_type_code,
												fn_get_masterdesc('QCD_QUESTION_TYPE',qst.question_type_code,v_lang_code) as question_type_desc,
												qst.question_code,
												fn_get_masterdesc('QCD_RESPONSE',qst.question_code,v_lang_code) as question_desc,
												fn_get_concattrainername(_tprogram_id,_tprogrambatch_id) as trainer_name
												--qstt.lang_code,
												--fn_get_languagedesc(qstt.lang_code) as lang_desc
-- 												coalesce(p.participant_id,'') as participant_id,
-- 												coalesce(p.tprogram_id,'') as tprogram_id,
-- 												coalesce(p.tprogrambatch_id,'') as tprogrambatch_id,
-- 												fn_get_participantname(p.participant_id) as participant_name,
-- 												coalesce(fn_get_batchstartdate(p.tprogram_id,p.tprogrambatch_id)::udd_code,'') as batch_start_date,
-- 												fn_get_programname (p.tprogram_id) as program_name,
-- 												fn_get_batchname (p.tprogram_id,p.tprogrambatch_id) as batch_name
									from 		trng_mst_tquestionaire as q
									inner join  trng_mst_tquestionairegrp as qg
									on          q.questionaire_id = qg.questionaire_id
									and         q.status_code = 'A'
									and         qg.status_code = 'A'
									inner join  trng_mst_tquestion as qst
									on			qg.questionairegrp_id = qst.questionairegrp_id
									and         qst.status_code = 'A'
									inner join  trng_mst_tquestiontranslate as qstt
									on          qst.question_id = qstt.question_id
									inner join  trng_trn_tfeedbackparticipant as fbp
									on          q.questionaire_id = fbp.questionaire_id
									and         qst.question_id   = fbp.question_id
									and         qst.question_type_code = fbp.question_type_code
									where       q.questionaire_id = _questionaire_id
								    and         qstt.lang_code = v_lang_code
									and         fbp.tprogram_id  = _tprogram_id
									and         fbp.tprogrambatch_id = _tprogrambatch_id
									and         fbp.participant_id = _participant_id
-- 									and         _question_lang_code = v_lang_code
									order by questionairegrp_seq_no,question_seq_no;
	end if;
	
	open _result_response for select    c.* from (select distinct 
										a.master_code,
										a.parent_code,
										b.master_desc
									from core_mst_tmaster as a
									inner join core_mst_tmastertranslate as b
									on a.master_code = b.master_code
									where a.parent_code = 'QCD_RESPONSE'
									and a.status_code = 'A'
									and b.lang_code = v_lang_code
									and a.parent_code <> 'SYS'
							union all 
									select distinct 
										a.master_code,
										a.parent_code,
										b.master_desc
									from core_mst_tmaster as a
									inner join core_mst_tmastertranslate as b
									on a.master_code = b.master_code
									where a.parent_code in (select a.master_code
															from core_mst_tmaster as a
															inner join core_mst_tmastertranslate as b
															on a.master_code = b.master_code
															where a.parent_code = 'QCD_RESPONSE'
															and a.status_code = 'A')
									and a.parent_code = b.parent_code
									and a.status_code = 'A'
									and b.lang_code = v_lang_code
									and a.parent_code <> 'SYS') as c;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_ifsclist(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_ifsclist refcursor DEFAULT 'rs_ifsclist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 26-09-2022
		SP Code : B01BNKG03
	*/
begin
	-- stored procedure body
	open _result_ifsclist for select 	
												bm.bank_code,
												fn_get_bankname(bm.bank_code) as bank_name,
												bbm.bank_branch_code,
												bbm.bank_branch_name,
												bbm.ifsc_code
								  from       	bank_master as bm
								  inner join 	bank_branch_master as bbm
								  on         	bm.bank_code = bbm.bank_code
								  and           bm.is_active = 1
								  and    		bbm.is_active = 'true' LIMIT 1000;
									 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_internaltrainerlist(_cadreuser_type_code udd_code, _cadreuser_name udd_code, _resource_type udd_code, _role_code udd_code, _category udd_code, _vertical udd_code, _subvertical udd_code, _geo_flag udd_code, _user_code udd_code, _lang_code udd_code, INOUT _result_internaltrainerlst refcursor DEFAULT 'rs_internaltrainer'::refcursor, INOUT _result_address refcursor DEFAULT 'rs_address'::refcursor, INOUT _result_geography refcursor DEFAULT 'rs_geography'::refcursor, INOUT _result_domain refcursor DEFAULT 'rs_domain'::refcursor, INOUT _result_language refcursor DEFAULT 'rs_language'::refcursor, INOUT _result_bank refcursor DEFAULT 'rs_bank'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By : Mohan S
	Created Date : 30-09-2022
	
	Update By : Mangai
	Updated Date : 05-01-2023
	
	SP Code : B05INTG01
	version no : 05
*/
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_panchayat_code udd_code := '';
	v_village_code udd_code := '';
begin
		-- Get geography
		select  state_code,district_code,block_code,panchayat_code,village_code 
		into 	v_state_code,v_district_code,v_block_code,v_panchayat_code,v_village_code 
		from 	core_mst_tuser 
		where 	user_code = _user_code 
		and 	status_code = 'A';

		-- stored procedure body
		open _result_internaltrainerlst for select 
											   cadreuser_id,
											   cadreuser_name as resource_name,
											   shg_name,
											   cadre_resource_type_code as resource_type_code,
											   fn_get_masterdesc('QCD_RESOURCE_TYPE',cadre_resource_type_code,_lang_code)  as resource_type_desc,
											   cadre_role_code as role_code,
											   fn_get_masterdesc('QCD_ROLE',cadre_role_code,_lang_code) as role_desc,
											   cadre_cat_code as category_code,
											   fn_get_masterdesc('QCD_C_CAT',cadre_cat_code,_lang_code) as category_desc,
											   cadre_cat_code as category_code,
											   vertical_code,
											   fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code) as vertical_desc,
											   subvertical_code,
											   fn_get_masterdesc('QCD_SUBVERTICAL',subvertical_code,_lang_code) as subvertical_desc,
											   gender_code,
											   fn_get_masterdesc('QCD_GENDER',gender_code,_lang_code) as gender_desc,
											   mobile_no,
											   coalesce(mail_id,'') as mail_id,
											   coalesce(cadre_level_code,'') as cadre_level_code,
											   fn_get_masterdesc('QCD_LEVEL',cadre_level_code,_lang_code) as cadre_level_desc
											from trng_mst_tcadreuser
											where 
											-- cadreuser_type_code = _cadreuser_type_code and 
											vertical_code = _vertical 
											and   cadreuser_name ilike _cadreuser_name || '%' collate pg_catalog.""default""
											and   cadreuser_id not in (select cadre_id from trng_mst_ttrainer
																	   where trngorg_type_code = 'QCD_INTERNAL'
																	   and status_code = 'A')
-- 											and   state_code = v_state_code
-- 											and   coalesce(district_code,'') = 
-- 											case 
-- 												when coalesce(v_district_code,'') = '' then
-- 													coalesce(district_code,v_district_code)
-- 												else
-- 													coalesce(v_district_code,district_code)
-- 											end
-- 											and   coalesce(block_code,'') = 
-- 											case 
-- 												when coalesce(v_block_code,'') = '' then
-- 													coalesce(block_code,v_block_code)
-- 												else
-- 													coalesce(v_block_code,block_code)
-- 											end
-- 											and   coalesce(grampanchayat_code,'') = 
-- 											case 
-- 												when coalesce(v_panchayat_code,'') = '' then
-- 													coalesce(grampanchayat_code,v_panchayat_code)
-- 												else
-- 													coalesce(v_panchayat_code,grampanchayat_code)
-- 											end
											and   cadre_resource_type_code = 
											case 
												when _resource_type = '' or _resource_type isnull then
													coalesce(cadre_resource_type_code,_resource_type)
												else
													coalesce(_resource_type,cadre_resource_type_code)
											end
											and   cadre_role_code = 
											case 
												when    _role_code isnull or _role_code = ''  then 
														coalesce(cadre_role_code,_role_code)
												else 
														coalesce(_role_code,cadre_role_code) 
											end 
											and   cadre_cat_code = 
											case 
												when    _category isnull or _category = ''  then 
														coalesce(cadre_cat_code,_category)
												else 
														coalesce(_category,cadre_cat_code) 
											end 
											and  subvertical_code =
											case 
												when    _subvertical isnull or _subvertical = ''  then 
														coalesce(subvertical_code,_subvertical)
												else 
														coalesce(_subvertical,subvertical_code) 
											end;
		-- Address --
		open _result_address for select 1;
		open _result_geography for select 1;
		open _result_domain for select 1;
		open _result_language for select 1;
		open _result_bank for select 1;

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_languagelist(INOUT _result_lang refcursor DEFAULT 'rs_lang'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
/*
	Created By : Mangai
	Created Date : 24-08-2022
	
	Sp Code : B01LANG01
*/
	-- stored procedure body
	
	open _result_lang for select 	
							lang_gid,
							lang_code,
							lang_name,
							default_flag,
							case when default_flag = 'Y' then true else false end as ""isDisabled"",
							status_code
				  from 		core_mst_tlanguage
		   		  order by 	lang_gid;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_levellist(_user_level_code udd_code, _user_code udd_user, _lang_code udd_code, _role_code udd_code, INOUT _result_levellist refcursor DEFAULT 'rs_levellist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 10-11-2022
		
		Sp Code : B01MSTG01
		Version No   : 02
	*/
	
begin
	
	-- stored procedure body
	open _result_levellist for select 
											m.master_code,
											fn_get_masterdesc('QCD_LEVEL',m.master_code,_lang_code) as master_desc,
											m.rec_slno
								from   		core_mst_tmaster as m
								inner join	core_mst_tmastertranslate as mt
								on          m.parent_code = mt.parent_code
								and         m.master_code = mt.master_code
								and         m.status_code = 'A'
								where 		m.parent_code = 'QCD_LEVEL'
								and 		m.master_code <= _user_level_code
								and         mt.lang_code = _lang_code
								order by    m.rec_slno;
											
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_mappedvenuelist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_venueaddr refcursor DEFAULT 'rs_venueaddr'::refcursor, INOUT _result_venueinfra refcursor DEFAULT 'rs_venueinfra'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 05-11-2022
		
		Updated By : Mangai
		Updated Date : 10-12-2022
		
		SP Code 	 : B06VENG03
		Version No   : 11
	*/
	v_config_value udd_desc := '';
	v_tprogram_venue_id udd_code := '';
	v_confirm_venue_id udd_code :=  '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- Get venue id select * from trng_trn_ttprogrambatch
	select tprogram_venue_id,confirm_venue_id
	into v_tprogram_venue_id,v_confirm_venue_id
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;

	-- stored procedure body
	-- venue address
	open _result_venueaddr for select 
										coalesce(v_confirm_venue_id,'') as confirm_venue_id,
										coalesce(v_tprogram_venue_id,'') as tprogram_venue_id,
										v.venue_gid,
										v.venue_name,
										v.venue_ll_name,
										v.venue_type_code,
										fn_get_masterdesc('QCD_VENUE_TYPE', v.venue_type_code, _lang_code) as venue_type_desc,
										v.venue_subtype_code,
										fn_get_masterdesc('QCD_VENUE_SUBTYPE', v.venue_subtype_code, _lang_code) as venue_subtype_desc,
										v.contact_name,
										v.contact_mobile_no,
										coalesce(v.tprogram_id,'') as tprogram_id,
										coalesce(v.tprogrambatch_id,'') as tprogrambatch_id,
										va.venueaddr_gid,
										va.venue_id,
										va.addr_line,
										va.addr_pincode,
										va.state_code,
										fn_get_statedesc(va.state_code) as state_desc,
										va.district_code,
										fn_get_districtdesc(va.district_code) as district_desc,
										va.block_code,
										fn_get_blockdesc(va.block_code) as block_desc,
										va.grampanchayat_code,
										fn_get_panchayatdesc(va.grampanchayat_code) as grampanchayat_desc,
										va.village_code,
										fn_get_villagedesc(va.village_code) as village_desc,
										va.status_code,
										fn_get_masterdesc('QCD_STATUS', va.status_code, _lang_code) as status_desc
							from        trng_mst_tvenue  as v
							inner join  trng_mst_tvenueaddr as va
							on          v.venue_id = va.venue_id
							and         v.status_code = 'A'
							where       va.venue_id = v_tprogram_venue_id
							and         va.status_code  = 'A';
	-- venue infra
	open _result_venueinfra for select 
										va.venueaddr_gid,
										va.grampanchayat_code,
										fn_get_panchayatdesc(va.grampanchayat_code) as grampanchayat_desc,
										va.village_code,
										fn_get_villagedesc(va.village_code) as village_desc,
										vi.venueinfra_gid,
										vi.venue_id,
										coalesce(vi.facility_id,'') as facility_id,
										vi.facility_name,
										vi.addr_line,
										vi.addr_pincode,
										fn_get_blockdesc(va.block_code)||'-'||
										fn_get_districtdesc(va.district_code)||'-'||
										fn_get_statedesc(va.state_code) as block_district_state,
										vi.status_code,
										fn_get_masterdesc('QCD_STATUS', vi.status_code, _lang_code) as status_desc
							from        trng_mst_tvenueaddr as va
							left join   trng_mst_tvenueinfra as vi
							on          va.venue_id = vi.venue_id
							and         va.status_code = 'A'
							where       vi.venue_id = v_tprogram_venue_id
							and         vi.status_code  = 'A';
	/*-- venue List -- 
	open _result_mappedvenuelist for select * from trng_mst_tvenueinfra
											pb.tprogram_id,
											pb.tprogrambatch_id,
											pb.tprogram_venue_id,
											pb.confirm_venue_id,
											coalesce(vi.facility_id,'') as facility_id,
											vi.facility_name,
											va.addr_line,
											va.addr_pincode,
											va.state_code,
											fn_get_statedesc(va.state_code) as state_desc,
											va.district_code,
											fn_get_districtdesc(va.district_code) as district_desc,
											va.block_code,
											fn_get_blockdesc(va.block_code) as block_desc,
											va.grampanchayat_code,
											fn_get_panchayatdesc(va.grampanchayat_code) as grampanchayat_desc,
											va.village_code,
											fn_get_villagedesc(va.village_code) as village_desc,
											coalesce(vi.conf_room_count :: udd_code,'') as conf_room_count,
											coalesce(vi.conf_room_capacity :: udd_code,'') as conf_room_capacity,
											coalesce(vi.accom_overnight_flag :: udd_code,'') as accom_overnight_flag,
											fn_get_masterdesc('QCD_YES_NO',vi.accom_overnight_flag,_lang_code) as accom_overnight_desc,
											coalesce(vi.accom_overnight_capacity :: udd_code,'') as accom_overnight_capacity,
											fn_get_blockdesc(va.block_code)||'-'||
											fn_get_districtdesc(va.district_code)||'-'||
											fn_get_statedesc(va.state_code) as block_district_state,
											v.venue_gid,
											v.venue_id,
											v.venue_name,
											v.venue_ll_name,
											v.venue_type_code,
											fn_get_masterdesc('QCD_VENUE_TYPE', v.venue_type_code, _lang_code) as venue_type_desc,
											v.venue_subtype_code,
											fn_get_masterdesc('QCD_VENUE_SUBTYPE', v.venue_subtype_code, _lang_code) as venue_subtype_desc,
											v.contact_name,
											v.contact_mobile_no,
											coalesce(to_char(v.validity_from,v_config_value)::udd_code,'') as validity_from,
 							  				coalesce(to_char(v.validity_to,v_config_value)::udd_code,'') as validity_to,
											v.indefinite_flag,
											fn_get_masterdesc('QCD_YES_NO', v.indefinite_flag, _lang_code) as indefinite_flag_desc,
											v.others_flag,
											fn_get_masterdesc('QCD_YES_NO', v.others_flag, _lang_code) as others_flag_desc,
											v.status_code,
											fn_get_masterdesc('QCD_STATUS', v.status_code, _lang_code) as status_desc,
											to_char(v.row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp
							   from 	    trng_trn_ttprogrambatch as pb
							   inner join   trng_mst_tvenue	as v 
									  on    pb.tprogram_venue_id = v.venue_id
									  and   pb.status_code <> 'I'
							   left join   trng_mst_tvenueaddr as va
							          on    v.venue_id = va.venue_id
									  and   va.status_code <> 'I'
							   left join   trng_mst_tvenueinfra as vi
							          on    v.venue_id = vi.venue_id
									  and   vi.status_code <> 'I'
									  where pb.tprogram_id      = _tprogram_id
									  and   pb.tprogrambatch_id = _tprogrambatch_id
									  and   v.status_code  <> 'I';
		*/
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_masterlist(_parent_code udd_code, _lang_code udd_code, INOUT _result_one refcursor DEFAULT 'rs_resultone'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Vijay Vel
		Created Date : 24-08-2022
		
		SP Code : B01MSTG02
	*/
	-- stored procedure body
	open _result_one for select 	
							master_gid,
							parent_code,
							fn_get_masterdesc('SYS',parent_code,_lang_code) as parent_desc,
							master_code,
							fn_get_masterdesc(parent_code,master_code,'en_US') as master_desc,
							fn_get_masterdesc(parent_code,master_code,_lang_code) as value_desc,
							depend_parent_code,
							fn_get_masterdesc('SYS',depend_parent_code,_lang_code) as depend_parent_desc,
							depend_code,
							fn_get_masterdesc(depend_parent_code,depend_code,_lang_code) as depend_desc,
							sys_flag,
							fn_get_masterdesc('QCD_YES_NO',sys_flag,_lang_code) as sys_flag_desc,
							status_code,
							fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc,
							created_date,
							created_by,
							updated_date,
							updated_by,
							to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') as row_timestamp
				  from 		core_mst_tmaster
				  where 	parent_code = _parent_code
		   		  order by 	core_mst_tmaster.row_timestamp desc;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_menulist(_lang_code udd_code, _user_code udd_user, _role_code udd_code, _block_code udd_code, INOUT _result_menu refcursor DEFAULT 'rs_menulist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		SP Code      : B01MENG01
		
	*/
	-- stored procedure body
	open _result_menu for select 	
								m.menu_gid,
								mt.menutranslate_gid,
								mt.menu_code,
								mt.menu_desc,
								m.status_code,
								fn_get_masterdesc('QCD_STATUS',m.status_code,_lang_code) as status_desc
				 from 			core_mst_tmenu as m
				 inner join 	core_mst_tmenutranslate as mt
				 on 			m.menu_code   = mt.menu_code
				 where 			mt.lang_code  = _lang_code
				 and			m.status_code = 'A'
				 order by 		m.status_code,m.menu_code;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_messagedesclist(_lang_code udd_code, INOUT _result_messagedesc refcursor DEFAULT 'rs_messagedesc'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mohan
		Created Date : 24-02-2022
		SP Code : B01MSGG05
	*/
	-- stored procedure body
	open _result_messagedesc for select 	
									msg_code,
									fn_get_msg(msg_code, _lang_code) as msg_desc,
									_lang_code as lang_code
						  from 		core_mst_tmessage
						  where 	status_code = 'A'
						  order by 	msg_code;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_messagedescription(_msg_code udd_code, _lang_code udd_code, INOUT _result_msgdesc refcursor DEFAULT 'rs_msgdesc'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 30-09-2022
		SP Code : B01MSGG03
	*/
	v_count udd_int := 0;
begin
	-- stored procedure body
	open _result_msgdesc for select 
							 fn_get_msg(_msg_code, _lang_code) as fn_get_msg;
	

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_messagelist(_screen_code udd_code, _lang_code udd_code, _user_code udd_code, INOUT _result_message refcursor DEFAULT 'rs_messagelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mohan
		Created Date : 24-08-2022
		SP Code : B01MSGG01
	*/
	-- stored procedure body
	open _result_message for select distinct 
										c.screen_code,
										fn_get_screenname(c.screen_code) as screen_name,
										d.msg_gid,
										e.msgtranslate_gid,
										e.msg_code,
										e.lang_code,
										fn_get_languagedesc(e.lang_code) as lang_desc,
										e.msg_desc,
										d.status_code,
										fn_get_masterdesc('QCD_STATUS',d.status_code,_lang_code) as status_desc
								from  core_mst_tmetadata as a
								inner join core_mst_tmetadatamsg as b 
								on 	  a.metadata_code = b.metadata_code
								and   b.status_code = 'A'
								inner join core_mst_tscreensp as c
								on 	  b.metadata_code = c.sp_code 
								and   c.status_code = 'A'
								inner join core_mst_tmessage as d
								on    b.msg_code = d.msg_code
								and   d.status_code = 'A'
								inner join core_mst_tmessagetranslate as e
								on    d.msg_code = e.msg_code 
								where a.status_code = 'A'
-- 								and e.msg_code !~~* '%CMNCMN%' collate pg_catalog.""default""
								and   c.screen_code = 
								case 
									when _screen_code = '' or _screen_code isnull then
										coalesce(c.screen_code,_screen_code)
									else
										coalesce(_screen_code,c.screen_code)
								end
								and    e.lang_code = _lang_code
								and    e.msg_code not ilike '%CMNCMN%' collate pg_catalog.""default""
								order by fn_get_screenname(c.screen_code);
						/*select 	
								msg.msg_gid,
								msgtran.msgtranslate_gid,
								msgtran.msg_code,
								msgtran.msg_desc,
								msg.status_code,
								fn_get_masterdesc('QCD_STATUS',msg.status_code,_lang_code) as status_desc
				 from 			core_mst_tmessage as msg
				 inner join 	core_mst_tmessagetranslate as msgtran
				 on 			msg.msg_code = msgtran.msg_code
				 where 			msgtran.lang_code = _lang_code
				 and			msg.status_code = 'A'
				 order by 		msg.status_code,msg.msg_code;*/
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_mobilesyncdtl(_tprogram_id udd_code, _role_code udd_code, _user_code udd_code, _sync_type_code udd_code, INOUT _result_mblsync refcursor DEFAULT 'rs_mblsync'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare 
	/*
		Created By : Mohan s
		Created Date : 18-01-2023
		SP Code : B01MBSG01
		version no : 01
	*/
begin
	-- stored procedure body
	
if not exists  (select 	* 
				   	from 	core_mst_tmobilesync
				   	where 	tprogram_id = _tprogram_id
					and 	role_code = _role_code
					and 	user_code = _user_code
					and 	sync_type_code = _sync_type_code
					and		status_code = 'A'
				   ) then
				   
	Insert into core_mst_tmobilesync (		tprogram_id,
											role_code,
											user_code,
											sync_type_code,
											last_sync_date,
											prev_last_sync_date,
											status_code,
											created_date,
											created_by)
								values 		(_tprogram_id,
											_role_code,
											_user_code,
											_sync_type_code,
											'2020-01-01',
											'2020-01-01',
											'A',
											now(),
											_user_code);
	end if;

	open _result_mblsync for select 	
							mobilesync_gid,
							tprogram_id,
							role_code,
							user_code,
							sync_type_code,
							(last_sync_date::timestamp without time zone)::text as last_sync_date,
							(prev_last_sync_date::timestamp without time zone)::text as prev_last_sync_date,
							status_code,
							created_date,
							created_by,
							updated_date,
							updated_by,
							(now()::timestamp without time zone)::text as ""system_datetime""
				  from 		core_mst_tmobilesync
				  where 	tprogram_id = _tprogram_id
				  and 		role_code = _role_code
				  and 		user_code = _user_code
				  and 		sync_type_code = _sync_type_code
				  and 		status_code = 'A';
				  
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_notelist(_activity_ref_id udd_code, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_notelist refcursor DEFAULT 'rs_notelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 28-10-2022
		
		Updated By   : Mangai
		Updated Date : 05-04-2023
		
		SP Code      : B04CONG01
		Version No : 15
	*/
	v_config_value udd_desc := '';
	v_level_code udd_code := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	v_level_code := (select fn_get_activitylevelcode(_activity_ref_id));
	-- stored procedure body
	open _result_notelist for select 	
										  note_gid,
										  activity_code,
										  fn_get_masterdesc('QCD_ACTIVITY',activity_code, _lang_code) as activity_desc,
										  activity_ref_id,
-- 										  fn_get_activitylevelcode (_activity_ref_id,activity_code) as v_level_code,
										  --note_desc,
										  case when (note_code isnull or note_code = '') then 
												note_desc 
										  else
										  		case when v_level_code = '99' and note_code = 'A' then
													 'Auto Approved' 
											else
												case when (note_code notnull or note_code <> '') and 
															(note_desc <> 'Auto') then
												fn_get_masterdesc('QCD_NOTE_STATUS', 'QCD_BATCH_NAME', _lang_code) || note_desc || ' ; ' ||
												fn_get_masterdesc('QCD_NOTE_STATUS', 'QCD_BATCH_STATUS', _lang_code)|| fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code)
											else
												case when (note_code notnull or note_code <> '') and 
															(note_desc = 'Auto') then
												note_desc || ' ' ||fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code)
											else
													 fn_get_masterdesc('QCD_NOTE_STATUS', note_code, _lang_code) || 
												case when reject_reason_code <> '' then
													' - ' 
													|| fn_get_masterdesc('QCD_REJ_REASON', reject_reason_code, _lang_code) 
											else
												case when deactivation_reason_code <> '' then
													' - ' 
													|| fn_get_masterdesc('QCD_DEA_REASON', deactivation_reason_code, _lang_code) 
											else
												case when sendback_reason <> '' then
													' - ' 
													|| sendback_reason
-- 											else
-- 												case when (note_code notnull or note_code <> '') and 
-- 															(note_desc notnull or note_desc <> '')then
-- -- 													'Batch Name: '||note_desc || ', Batch Status: ' || fn_get_masterdesc('QCD_STATUS', note_code, 'en_US')
-- 												' : Batch Status , ' ||note_desc ||  ' : Batch Name'
											else
												''
												end
												end
												end
												end
												end
												end
										  end as note_desc,
										  note_code,
										  reject_reason_code,
										  deactivation_reason_code,
										  sendback_reason,
-- 										  created_date::udd_code,
 										  created_date::udd_code as org_created_date,
									  	  to_char(created_date,'DD-MM-YYYY HH:MI:SS:MS') as created_date,
										  case when created_by = 'System' then
										  			created_by
											   else
												fn_get_username(created_by)
										  end as created_by
									from  trng_mst_tnote
									where activity_ref_id = _activity_ref_id
									order by org_created_date desc;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_panchayatapproverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, INOUT _result_gpapprover refcursor DEFAULT 'rs_gpapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-11-2022
		
		updated By 		: Mohan S
		Updatde Date 	: 09-12-2022
		
		SP Code 		: B01PANG01
		Version No 		: 02
	*/
	
begin

	-- Store Procedure body --
	open _result_gpapprover for select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code = '69'
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';
								/*select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   panchayat_code = _panchayat_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';*/

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_panchayatlist(_block_code udd_code, _lang_code udd_code, INOUT _result_panchayatlist refcursor DEFAULT 'rs_panlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mangai
		Created Date : 17-10-2022
		SP Code : B01GPMG01
		
		Updated date : 23-02-2023
		Updated by : Satheesh
	*/
	v_block_id udd_int := 0;
begin
	v_block_id := (select fn_get_blockid(_block_code));
	-- stored procedure body
	open _result_panchayatlist for select 	
									  	panchayat_id,
										fn_get_panchayatdesc(panchayat_id) as panchayat_desc,
										state_id,
										fn_get_statedesc(state_id) as state_desc,
										district_id,
										fn_get_districtdesc(district_id) as district_desc,
										block_id,
										fn_get_blockdesc(block_id) as block_desc,
										panchayat_code,
-- 										panchayat_name_en,
										fn_get_panchayat_ll_desc(panchayat_id,_lang_code) as panchayat_name_local,
										case 
										when _lang_code <> 'hi_IN' then
										     panchayat_name_en
										else
										     panchayat_name_local
										end as panchayat_name_en
							from 		panchayat_master
				  			where 		block_id = v_block_id
				 		 	and 		is_active = true
				  			order by 	panchayat_name_en;
				 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_participantcount(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogmpartcount refcursor DEFAULT 'rs_tprogpartcount'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mangai
		Created Date : 04-11-2022
		
		SP Code  : B07PPAG01
		Version No : 1
	*/
begin
	
	-- stored procedure body
	-- lokos,cadre,external Count
	open _result_tprogmpartcount for select 	
										tprogram_id,
										tprogrambatch_id,
										batch_date,
										fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_INTERNAL','QCD_INT_CADRE') as cadre_count,
										fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_INTERNAL','QCD_INT_LOKOS') as lokos_count,
										fn_get_participantcount(tprogram_id,tprogrambatch_id,batch_date,'QCD_EXTERNAL','QCD_EXTERNAL') as external_count
									from trng_trn_ttprogramparticipant
									where tprogram_id = _tprogram_id
									and   tprogrambatch_id = _tprogrambatch_id
									and   batch_date = _batch_date 
									and   status_code = 'A'
									group by tprogram_id,tprogrambatch_id,batch_date;
									    
										
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_prgmstateapproverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, INOUT _result_stateapprover refcursor DEFAULT 'rs_stateapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-11-2022
		
		updated By 		: Mohan S
		Updatde Date 	: 09-12-2022
		
		SP Code 		: B01STAG01
		Version No 		: 01
	*/
	
begin

	-- Store Procedure body --
	open _result_stateapprover for  select
										user_name,
										user_code,
										role_code,
										fn_get_rolename(role_code) as role_name
									from  core_mst_tuser 
									where vertical_code = _vertical_code
									and   user_level_code = '89'
									and   status_code 	= 'A'
									and   role_code = 'TrainingMaster';
									/*select
										user_name,
										user_code,
										role_code,
										fn_get_rolename(role_code) as role_name
									from  core_mst_tuser 
									where vertical_code = _vertical_code
									and   user_level_code > _user_level_code
									and   state_code = _state_code 
									and   status_code 	= 'A'
									and   role_code = 'TrainingMaster';*/

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_progbudgetlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_progbudgetlst refcursor DEFAULT 'rs_progbudgetlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 28-10-2022
		
		Updated By   : Satheesh
		Updated Date : 15-11-2022
		SP Code      : B07PBUG01
		
		version no   : 02
		
	*/
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body
	open _result_progbudgetlst for select 	
											tprogrambudget_gid,
											tprogram_id,
											tprogrambatch_id,
-- 											batch_date,
											to_char(batch_date, v_config_value) as batch_date,
											coalesce(batch_date ::udd_code,'') as org_batch_date,
											expense_code,
											fn_get_masterdesc('QCD_EXPENSE',expense_code,_lang_code) as expense_desc,
											budget_desc,
											budget_amount :: udd_code,
											status_code,
											fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
									 from 	trng_trn_ttprogrambudget 
									 where 	tprogram_id      = _tprogram_id
									 and    tprogrambatch_id = _tprogrambatch_id
									 and    status_code <> 'I';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_progexplist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_progexplst refcursor DEFAULT 'rs_progexplst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mangai
		Created Date : 28-10-2022
		
		Updated By   : Mangai
		Updated Date : 13-01-2023
		
		SP Code      : B07PEXG01
		version code : 03
		
	*/
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body
	open _result_progexplst for select 	
											tprogramexpense_gid,
											tprogram_id,
											tprogrambatch_id,
											expense_date::udd_date as org_expense_date,
											to_char(expense_date, v_config_value) as expense_date,
-- 											expense_date,
											expense_code,
											fn_get_masterdesc('QCD_EXPENSE',expense_code,_lang_code) as expense_code_desc,
											coalesce(expense_desc,'') as expense_desc,
											expense_amount :: udd_code,
											status_code,
											fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc,
											fn_get_expenseamount(tprogram_id,tprogrambatch_id) :: udd_code as expenseamount,
									   		fn_get_totalexpenseamount(tprogram_id) :: udd_code as total_expenseamount,
									   		fn_get_totalbudgetamount(tprogram_id) :: udd_code as total_budgetamount,
									   		fn_get_budgetamount(tprogram_id,tprogrambatch_id) :: udd_code as budget_amount,
											coalesce(expense_reason,'') as expense_reason
									 from 	trng_trn_ttprogramexpense 
									 where 	tprogram_id      = _tprogram_id
									 and    tprogrambatch_id = _tprogrambatch_id
									 and    status_code <> 'I';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_questionairelist(_questionaire_name udd_desc, _questionaire_type_code udd_code, _course_jsonb udd_jsonb, _status_code udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_questionairelist refcursor DEFAULT 'rs_questionairelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 30-09-2022
		
		Updated By : Mangai
		Updated Date : 15-11-2022
		
		Updated By   : Satheesh
		Updated Date : 15-11-2022
		
		SP Code : B03QTNG01
		version code : 5
	*/
	vsql udd_text := '';
	v_config_value udd_desc := '';
begin
	
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	if _course_jsonb isnull then
		_course_jsonb = '[{}]';
	end if;
	
	-- drop temporary table
	drop table if exists trng_tmp_tquestionaireid;
	
	-- create temporary table for course_id
	vsql = 'create temporary table trng_tmp_tquestionaireid as 
			select 	distinct a.questionaire_id
			from 	trng_mst_tquestionaire a,
					jsonb_to_recordset(course_jsonb::udd_jsonb) b(course udd_text)
			where   1 = 1 ';
	
	if _questionaire_name <> '' then
			vsql = vsql || ' and questionaire_name ilike ''' || _questionaire_name || '%''collate pg_catalog.""default""';
	end if;
	
	if _questionaire_type_code <> '' then
			vsql = vsql || ' and questionaire_type_code = ''' || _questionaire_type_code || '''';
	end if;
	
	if _course_jsonb <> '[{}]' then
		vsql = vsql || 
				'and     b.course in 
				(
					select bb.course from jsonb_to_recordset(''' || _course_jsonb || ''') as bb (course udd_code)
				)';
	end if;
	
	if _status_code <> '' then
		vsql = vsql || ' and a.status_code = ''' || _status_code || '''';
	end if;
	
	-- execute the query variable vsql
	execute vsql;
		
	-- stored procedure body
	open _result_questionairelist for select 	
							    			a.questionaire_id,
											a.questionaire_name,
											a.questionaire_ll_name,
											a.questionaire_type_code,
											fn_get_masterdesc('QCD_QUESTIONAIRE', a.questionaire_type_code, _lang_code) as questionaire_type_desc,
											fn_get_language(a.lang_jsonb,_lang_code) as language_jsonb_desc,
											fn_get_course(a.course_jsonb,_lang_code) as course_jsonb_desc,
  										    coalesce(a.validity_from::udd_code,'') as org_validity_from,
   							                coalesce(a.validity_to::udd_code,'') as org_validity_to,
  											coalesce(to_char(a.validity_from,v_config_value)::udd_code,'') as validity_from,
   											coalesce(to_char(a.validity_to,v_config_value)::udd_code,'') as validity_to,
											a.indefinite_flag,
											fn_get_masterdesc('QCD_YES_NO', a.indefinite_flag, _lang_code) as indefinite_flag_desc,
											a.status_code,
											fn_get_masterdesc('QCD_STATUS', a.status_code, _lang_code) as status_desc
									from 	trng_mst_tquestionaire as a
									inner join trng_tmp_tquestionaireid as b on a.questionaire_id = b.questionaire_id
									order by coalesce(a.updated_date,a.created_date) desc; 
-- 									and     a.status_code <> 'I';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_roleinfo(_role_id udd_bigint, INOUT _result_roleinfo refcursor DEFAULT 'rs_roleinfo'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mohan S
		Created Date : 09-03-2023
		SP Code : B01ROLG02
		Version No : 01
	*/
	-- stored procedure body 
	open _result_roleinfo for select 
									_role_id as role_id,
									fn_get_rolecode(_role_id) as role_code,
									fn_get_rolename(fn_get_rolecode(_role_id)) as role_name;
									
		
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_rolelist(_lang_code udd_code, INOUT _result_role refcursor DEFAULT 'rs_role'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By : Mohan S
	Created Date : 24-08-2022
	SP Code : B01ROLG03
*/
begin
	-- stored procedure body
	open _result_role for select 	
							 role_gid,
							 role_code,
							 role_name,
							 status_code,
							 fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
					from 	 core_mst_trole
					where    status_code = 'A'
					order by role_gid;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_rolemenulist(_lang_code udd_code, INOUT _result_rolemenu refcursor DEFAULT 'rs_rolemenu'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mangai
		Created Date :24-08-2022
		
		Sp Code    : B01ROLG01
		Version No : 1
	*/
	-- stored procedure body
	open _result_rolemenu for select 	
						 menu.menu_gid as menu_gid,
						 menu.menu_code as menu_code,
						 menu.parent_code as parent_code,
						 menu.menu_slno as menu_slno,
						 menu.url_action_method as url_action_method,
						 menu.status_code as status_code,
						 fn_get_masterdesc('QCD_STATUS',menu.status_code,_lang_code) as status_desc,
						 menutran.menu_desc as menu_desc
				from 	 core_mst_tmenu as menu
				inner join core_mst_tmenutranslate as menutran on menu.menu_code = menutran.menu_code
				where 	 menutran.lang_code = _lang_code
				and 	 menu.status_code = 'A'
		   		order by menu.menu_slno;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_screendatalist(_screen_code udd_code, _lang_code udd_code, INOUT _result_screendata refcursor DEFAULT 'rs_screendata'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mohan S
		Created Date : 24-08-2022
		SP Code : B01SNDG01
	*/
begin
	-- stored procedure body
	/* open _result_screendata for select 	
							screendata_gid,
							screen_code,
							lang_code,
							ctrl_type_code,
							ctrl_id,
							data_field,
							label_desc,
							tooltip_desc,
							default_label_desc,
							default_tooltip_desc,
							ctrl_slno,
							created_date,
							created_by,
							updated_date,
							updated_by
				  from 		core_mst_tscreendata
				  where 	screen_code = _screen_code
				  and 		lang_code = _lang_code
		   		  order by 	ctrl_slno;*/
				  
				  
		open _result_screendata for SELECT
										 a.concat_field,
										 coalesce(a.screendata_gid,b.screendata_gid) as screendata_gid,
										 coalesce(a.screen_code,b.screen_code) as screen_code,
										 coalesce(a.lang_code,b.lang_code)as lang_code,
										 coalesce(a.ctrl_type_code,b.ctrl_type_code)as ctrl_type_code,
										 coalesce(a.ctrl_id,b.ctrl_id)as ctrl_id,
										 coalesce(a.data_field,b.data_field)as data_field,
										 coalesce(a.label_desc,b.label_desc)as label_desc,
										 coalesce(a.tooltip_desc,b.tooltip_desc)as tooltip_desc,
										 coalesce(a.default_label_desc,b.default_label_desc)as default_label_desc,
										 coalesce(a.default_tooltip_desc,b.default_tooltip_desc)as default_tooltip_desc,
										 coalesce(a.ctrl_slno,b.ctrl_slno)as ctrl_slno,
										 coalesce(a.created_date,b.created_date)as created_date,
										 coalesce(a.created_by,b.created_by)as created_by,
										 coalesce(a.updated_date,b.updated_date)as updated_date,
										 coalesce(a.updated_by,b.updated_by)as updated_by
							 from        screendata_view as b
							 left join   screendata_view as a
							 on          a.lang_code    = _lang_code
							 and 		 a.screen_code  = _screen_code
							 and 		 b.concat_field = a.concat_field
							 where 		 b.screen_code  = _screen_code
							 and 	     b.lang_code    = 'en_US'
							 order by    b.ctrl_slno,b.ctrl_id;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_screenlist(_lang_code udd_code, _user_code udd_code, INOUT _result_screen refcursor DEFAULT 'rs_screenlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01SCRG01
	*/
	-- stored procedure body
	open _result_screen for select 	
									screen_gid,
									screen_code,
									screen_name,
									status_code,
									fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc,
									created_date,
									created_by,
									updated_date,
									updated_by
							  from 		core_mst_tscreen
							  order by 	status_code,screen_code;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_screenmessagelist(_screen_code udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, INOUT _result_screenmessage refcursor DEFAULT 'rs_screenmessagelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By : Mohan S
		Created Date : 06-03-2023
		SP Code : B01MSGG02
	*/
	-- stored procedure body
	open _result_screenmessage for select distinct 
										c.screen_code,
										fn_get_screenname(c.screen_code) as screen_name,
										d.msg_gid,
										e.msgtranslate_gid,
										e.msg_code,
										e.lang_code,
										fn_get_languagedesc(e.lang_code) as lang_desc,
										e.msg_desc,
										d.status_code,
										fn_get_masterdesc('QCD_STATUS',d.status_code,_lang_code) as status_desc
								from  core_mst_tmetadata as a
								inner join core_mst_tmetadatamsg as b 
								on 	  a.metadata_code = b.metadata_code
								and   b.status_code = 'A'
								inner join core_mst_tscreensp as c
								on 	  b.metadata_code = c.sp_code 
								and   c.status_code = 'A'
								inner join core_mst_tmessage as d
								on    b.msg_code = d.msg_code
								and   d.status_code = 'A'
								inner join core_mst_tmessagetranslate as e
								on    d.msg_code = e.msg_code 
								where a.status_code = 'A'
-- 								and e.msg_code !~~* '%CMNCMN%' collate pg_catalog.""default""
								and   c.screen_code = 
								case 
									when _screen_code = '' or _screen_code isnull then
										coalesce(c.screen_code,_screen_code)
									else
										coalesce(_screen_code,c.screen_code)
								end
								and    e.lang_code = _lang_code
								and    e.msg_code not ilike '%CMNCMN%' collate pg_catalog.""default""
								order by fn_get_screenname(c.screen_code);
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_screennamelist(_lang_code udd_code, INOUT _result_bankscreennamelist refcursor DEFAULT 'rs_screennamelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		SP Code      : B01SCRG01
	*/
begin
	-- stored procedure body
	open _result_bankscreennamelist for select
												 screen_code,
												 screen_name
									    from 	 core_mst_tscreen
										where    status_code = 'A'
										and      screen_code like 'W%' collate pg_catalog.""default"";
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_shglist(_clf_cbo_code udd_desc, _vo_cbo_code udd_desc, _lang_code udd_code, INOUT _result_shg refcursor DEFAULT 'rs_shg'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 30-01-2023
		
		Updated By : Mangai
		Updated Date : 09-02-2023
		
		SP Code : B01SHGG01
		Version No : 2
	*/
	
begin
	
	-- stored procedure body
	open _result_shg for select 
								shg_code as shg_id,
								shg_code,
								shg_name,
								parent_cbo_id,
								parent_cbo_code								
						from    shg_profile_consolidated	
						where   parent_cbo_code in
													(
														select cbo_code from federation_profile_consolidated
														where parent_cbo_code in (
															select cbo_code from federation_profile_consolidated
															where cbo_type = 2
-- 															and cbo_code = _clf_cbo_code
														)
-- 						and parent_cbo_type = 2
						and cbo_type = 1
						and cbo_code = _vo_cbo_code
						)
						and     is_active = 'true'
					    order by shg_name;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_shgnamelist(_state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _village_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_shgnamelist refcursor DEFAULT 'rs_shgnamelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mangai
		Created Date : 07-11-2022
		
		Updated By : Mangai
		Updated Date : 01-03-2023
		
		SP Code     : B01SHGG01
		verision no : 04
	*/
begin
	
	-- stored procedure body
	open _result_shgnamelist for select distinct
									   coalesce(shg_id :: udd_code,'') as shg_id,
									   shg_code,
									   shg_name,
									   shg_name_local,
									   state_code,
-- 									   fn_get_statedesc(state_code) as state_desc,
									   district_code,
-- 									   fn_get_districtdesc(district_code) as district_desc,
									   block_code,
									   --fn_get_blockdesc(block_code) as block_desc,
									   panchayat_code,
									   --fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
									   village_code
									   --fn_get_villagedesc(village_code) as village_desc
								from    shgmember_profileconsolidated_view
								where   state_code = _state_code
								and     district_code  =  _district_code
								and     block_code = _block_code
								and 	panchayat_code = _panchayat_code
								and     village_code = _village_code
								order by shg_name;
								/*where   state_code = 
								case 
									when    _state_code isnull or _state_code = ''  then 
											coalesce(state_code,_state_code)
									else 
											coalesce(_state_code,state_code) 
								end 	
								and     district_code = 
								case 
									when    _district_code isnull or _district_code = ''  then 
											coalesce(district_code,_district_code)
									else 
											coalesce(_district_code,district_code) 
								end
								and 	block_code =    
								case 
									when    _block_code isnull or _block_code = ''  then 
											coalesce(block_code,_block_code)
									else 
											coalesce(_block_code,block_code) 
								end
								and     panchayat_code = 
								case 
									when    _panchayat_code isnull or _panchayat_code = ''  then 
											coalesce(panchayat_code,_panchayat_code)
									else 
											coalesce(_panchayat_code,panchayat_code) 
								end
								and     village_code = 
								case 
									when    _village_code isnull or _village_code = ''  then 
											coalesce(village_code,_village_code)
									else 
											coalesce(_village_code,village_code) 
								end 
								order by shg_name;*/
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_smstran(_tprogram_id udd_code, _tprogrambatch_id udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, INOUT _result_smstran refcursor DEFAULT 'rs_smstran'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mangai
		Created Date 	: 21-01-2023
		
		Updated By 	 	: Mangai
		Updated Date 	: 30-03-2023

		SP Code : B01SMSG01 
		version No : 2
	*/
	v_sms_template 	udd_text;
	v_sms_url		udd_text;
	v_sms_api_key	udd_text;
	v_sms_sender_id udd_text;
	v_sms_channel	udd_text;
	v_sms_dcs		udd_text;
	v_sms_flashsms	udd_text;
	v_sms_route		udd_text;
begin
	-- stored procedure body
	-- SMS 
	v_sms_url = fn_get_configvalue('sms_url');
	v_sms_api_key = fn_get_configvalue('sms_api_key');
	v_sms_sender_id = fn_get_configvalue('sms_sender_id');
	v_sms_channel = fn_get_configvalue('sms_channel');
	v_sms_dcs = fn_get_configvalue('sms_dcs');
	v_sms_flashsms = fn_get_configvalue('sms_flashsms');
	v_sms_route = fn_get_configvalue('sms_route');
	
	open _result_smstran for select 
								smstran_gid,
								tprogram_id,
								tprogrambatch_id,
								feedback_lang_code,
-- 								fn_get_languagedesc(feedback_lang_code) as feedback_lang_desc,
								feedback_type_code,
-- 								fn_get_masterdesc('',feedback_type_code,_lang_code) as feedback_type_desc,
								questionaire_id,
								trainer_part_id,
								mobile_no,
								original_url,
								short_url,
								smstemplate_code,
								dlt_template_id,
								v_sms_url 		as sms_url,
								v_sms_api_key 	as sms_api_key,
								v_sms_sender_id as sms_sender_id,
								v_sms_channel 	as sms_channel,
								v_sms_dcs 		as sms_dcs,
								v_sms_flashsms 	as sms_flashsms,
								v_sms_route 	as sms_route,
								sms_text,
								scheduled_date,
								sms_delivered_flag,
-- 								fn_get_masterdesc('QCD_YES_NO',sms_delivered_flag,_lang_code)as sms_delivered_flag_desc,
								concat
								(
									v_sms_url,
									'APIKey=',v_sms_api_key,
									'&senderid=',v_sms_sender_id,
									'&channel=',v_sms_channel,	
									'&DCS=',v_sms_dcs,
									'&flashsms=',v_sms_flashsms,
									'&number=91',mobile_no,
									'&text=',sms_text,
									'&route=',v_sms_route,
									'&EntityId&dlttemplateid=',dlt_template_id
								) as SMS,
								user_code,
								role_code,
								sms_remark
						from 	trng_trn_tsmstran
						where	status_code = 'A'
						and     feedback_type_code <> 'QCD_TRAINER'
-- 						and     mobile_no not in ('0','')
						order by smstran_gid desc;
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_stateapproverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, INOUT _result_stateapprover refcursor DEFAULT 'rs_stateapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-11-2022
		
		updated By 		: Mohan S
		Updatde Date 	: 09-12-2022
		
		SP Code 		: B01STAG01
		Version No 		: 01
	*/
	
begin

	-- Store Procedure body --
	open _result_stateapprover for  select
										user_name,
										user_code,
										role_code,
										fn_get_rolename(role_code) as role_name
									from  core_mst_tuser 
									where vertical_code = _vertical_code
									and   user_level_code = '99'
									and   status_code 	= 'A'
									and   role_code = 'TrainingMaster';
									/*select
										user_name,
										user_code,
										role_code,
										fn_get_rolename(role_code) as role_name
									from  core_mst_tuser 
									where vertical_code = _vertical_code
									and   user_level_code > _user_level_code
									and   state_code = _state_code 
									and   status_code 	= 'A'
									and   role_code = 'TrainingMaster';*/

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_statedistblocklist(_lang_code udd_code, _user_code udd_user, _role_code udd_code, INOUT _result_sdblist refcursor DEFAULT 'rs_sdblist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
begin
	/*
		Created By   : Mohan S
		Created Date : 29-10-2022
		SP Code      : B01SDBG01
		
	*/
	-- stored procedure body
	open _result_sdblist for select 
								 fn_get_statedesc(state_id)	|| '-' ||
								 fn_get_districtdesc(district_id) || '-' ||
								 fn_get_blockdesc(block_id) as state_dist_block,
								 block_code
							 from  block_master
							 where is_active = true
				  			 order by is_active,block_id;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_statelist(_state_code udd_code, _lang_code udd_code, INOUT _result_state refcursor DEFAULT 'rs_state'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 07-10-2022
		
		Updated By : Mangai
		Updated Date : 05-11-2022
		
		SP Code : B01STMG01
	*/
begin
	-- stored procedure body
	if _state_code = '' then
		open _result_state for select 	
									state_id,
									state_code,
									state_name_en,
									state_name_hi,
									fn_get_state_ll_desc(state_id,_lang_code) as state_name_local
					  from 			state_master
					  where 		is_active = true
-- 					  order by 		is_active,state_id
					  order by      state_name_en;
	else
		open _result_state for select 	
									state_id,
									state_code,
									state_name_en,
									state_name_hi,
									fn_get_state_ll_desc(state_id,_lang_code) as state_name_local
					  from 			state_master
					  where 		state_code = _state_code
					  and           is_active = true
-- 					  order by 		is_active,state_id
					  order by      state_name_en;
	end if;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_subverticallist(_course_id udd_desc, _tab_type udd_code, _lang_code udd_desc, INOUT _result_subvertical refcursor DEFAULT 'rs_subvertical'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By   : Mohan S
		Created Date : 17-09-2022
		SP Code 	 : B04SVTG01
	*/
begin
	-- stored procedure body
	if _tab_type = 'course_module' then
		open _result_subvertical for select 
										a.course_id,
										b.subvertical as subvertical_code,
										fn_get_masterdesc('QCD_SUBVERTICAL', b.subvertical, _lang_code) as subvertical_desc
									 from trng_mst_tcourse a,
									 jsonb_to_recordset(a.subvertical_jsonb::udd_jsonb) b(subvertical udd_text)
									 where a.course_id = _course_id
									 and a.status_code <> 'I';
	    else if _tab_type = 'course_content' then
			open _result_subvertical for select 
											course_id,
											subvertical_code,
											coursemodule_id,
											fn_get_masterdesc('QCD_SUBVERTICAL',subvertical_code, _lang_code) || '-' ||
											module_name as subvertical_desc
										 from trng_mst_tcoursemodule
										 where course_id = _course_id
										 and status_code = 'A';
		else 
			open _result_subvertical for select '';
		end if;
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_syncwtm(_user_code udd_code, _last_sync_date udd_date, _role_code udd_code, _mobile_no udd_code, INOUT _result_syncwtm refcursor DEFAULT 'rs_syncwtm'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 01-10-2022
		SP Code : B01SYNG02
	*/
	
	v_last_sync_date udd_datetime;
begin
	select 	last_sync_date into v_last_sync_date 
	from 	core_mst_tmobilesync
	where 	
-- 	tprogram_id			= _tprogram_id
			user_code		= _user_code
	and		role_code		= _role_code
	and 	mobile_no 		= _mobile_no
	and		sync_type_code	= 'WTM'	
	and		status_code		= 'A';
	
	insert into core_mst_tmobilesync
	(
		tprogram_id,
		role_code,
		user_code,
		mobile_no,
		sync_type_code,
		last_sync_date,
		prev_last_sync_date,
		status_code,
	 	created_date,
		created_by
	)
	values
	(
		'',
		_role_code,
		_user_code,
		_mobile_no,
		'WTM',
		now(),
		now(),
		'A',
		now(),
		_user_code
	)
	on conflict
		(tprogram_id,user_code,role_code,mobile_no,sync_type_code)
	do update set 
		last_sync_date 		= now(),
		prev_last_sync_date = v_last_sync_date,
		updated_date 		= now(),
		updated_by 			= _user_code;
	
	-- stored procedure body 
	open _result_syncwtm for 
							select 	
							    generate_mobilesync_script(
							 	db_schema_name collate pg_catalog.""default"",
								src_table_name::text,
								concat('1 = 1 ',coalesce(default_condition,''),
								case 
									when trngprogram_flag = 'Y' then concat(' and tprogram_id=',chr(39),'',chr(39)) 
									else '' 
								end,
								case 
									when user_flag = 'Y' then concat(' and user_code=',chr(39),_user_code,chr(39)) 
									else '' 
								end,
								case 
									when role_flag = 'Y' then concat(' and role_code=',chr(39),_role_code,chr(39)) 
									else '' 
								end,
								case 
									when mobile_flag = 'Y' then concat(' and mobile_no=',chr(39),_mobile_no,chr(39)) 
									else '' 
								end,
								case 
									 when date_flag = 'Y' then concat(' and (created_date >= ',chr(39),_last_sync_date,chr(39),'
																		or updated_date >=',chr(39),_last_sync_date,chr(39),')')
									 else '' 
								end)::text,
								dest_table_name::text,
								ignore_fields::text[])::text
				  from 		 core_mst_tmobilesynctable 
				  where 	 role_code = _role_code 
				  and 		 status_code = 'A'
				  
				  union all 
				  select patch_qry from core_mst_tpatchqry
				  		 where 	 role_code = _role_code
						 and	(created_date::udd_date  >= _last_sync_date
						 or 	 updated_date::udd_date  >= _last_sync_date)
				  		 and 	 status_code = 'A';

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_syncwtm(_tprogram_id udd_code, _user_code udd_code, _last_sync_date udd_date, _role_code udd_code, _mobile_no udd_code, INOUT _result_syncwtm refcursor DEFAULT 'rs_syncwtm'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 01-10-2022
		
		Updated By  : Mangai
		Updated Date : 15-12-2022
		
		SP Code : B01SYNG02
		Version No : 2
	*/
	
	v_last_sync_date udd_datetime;
	v_colrec record;
begin
	select 	last_sync_date into v_last_sync_date 
	from 	core_mst_tmobilesync
	where	user_code		= _user_code
	and		role_code		= _role_code
-- 	and 	mobile_no 		= _mobile_no
	and     tprogram_id     = _tprogram_id
	and		sync_type_code	= 'WTM'	
	and		status_code		= 'A';
	
	insert into core_mst_tmobilesync
	(
		tprogram_id,
		role_code,
		user_code,
		mobile_no,
		sync_type_code,
		last_sync_date,
		prev_last_sync_date,
		status_code,
	 	created_date,
		created_by
	)
	values
	(
		_tprogram_id,
		_role_code,
		_user_code,
		'',
		'WTM',
		now(),
		now(),
		'A',
		now(),
		_user_code
	)
	on conflict
		(tprogram_id,user_code,role_code,mobile_no,sync_type_code)
-- 		(tprogram_id,user_code,role_code,sync_type_code)
	do update set 
		last_sync_date 		= now(),
		prev_last_sync_date = v_last_sync_date,
		updated_date 		= now(),
		updated_by 			= _user_code;

	
	
	-- stored procedure body 
	open _result_syncwtm for 
							select patch_qry as generate_mobilesync_script 
							from core_mst_tpatchqry
							where 	 role_code = _role_code
							and	(created_date::udd_date  >= _last_sync_date
							or 	 updated_date::udd_date  >= _last_sync_date)
							and 	 status_code = 'A'
							 
						  union all 
						  
							select 	
							    generate_mobilesync_script(
							 	db_schema_name collate pg_catalog.""default"",
								src_table_name::text,
								concat('1 = 1 ',coalesce(default_condition,''),
								case 
									when trngprogram_flag = 'Y' then concat(' and tprogram_id=',chr(39),'',chr(39)) 
									else '' 
								end,
								case 
									when user_flag = 'Y' then concat(' and user_code=',chr(39),_user_code,chr(39)) 
									else '' 
								end,
								case 
									when role_flag = 'Y' then concat(' and role_code=',chr(39),_role_code,chr(39)) 
									else '' 
								end,
-- 								case 
-- 									when mobile_flag = 'Y' then concat(' and mobile_no=',chr(39),_mobile_no,chr(39)) 
-- 									else '' 
-- 								end,
								case 
									 when date_flag = 'Y' then concat(' and (created_date >= ',chr(39),_last_sync_date,chr(39),'
																		or updated_date >=',chr(39),_last_sync_date,chr(39),')')
									 else '' 
								end)::text,
								dest_table_name::text,
								ignore_fields::text[])::text
				  from 		 core_mst_tmobilesynctable 
				  where 	 role_code = _role_code 
				  and        sync_group_name = 'core'
				  and 		 status_code = 'A';
				  				  
				
				  /*update core_mst_tpatchqry
				  set    created_date  = now(),
					     updated_date  = now()
				  where 	 role_code = _role_code
				  and	(created_date::udd_date  >= _last_sync_date
				  or 	 updated_date::udd_date  >= _last_sync_date)
				  and 	 status_code = 'A';
						 
					*/	 
				 

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_syncwtmprngdtl(_tprogram_id udd_code, _user_code udd_code, _last_sync_date udd_date, _role_code udd_code, INOUT _result_syncwtm refcursor DEFAULT 'rs_syncwtm'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 16-12-2022
		
		Updated By : Mohan
		Updated Date : 01-04-2023
		
		SP Code : B01SYNG04
		Version No : 5
	*/
	
	v_last_sync_date udd_datetime;
	v_tprogram_level_code udd_code := '';
	v_user_level_code udd_code := '';
	
	v_state_code udd_code := ''; 
	v_district_code udd_code := ''; 
	v_block_code udd_code := ''; 
	v_grampanchayat_code udd_code := ''; 
	v_village_code udd_code := '';

begin
	-- Refresh Materialized View
-- 	call pr_sch_refreshallmv('public');

	select 	last_sync_date into v_last_sync_date 
	from 	core_mst_tmobilesync
	where	user_code		= _user_code
	and		role_code		= _role_code
-- 	and 	mobile_no 		= _mobile_no
	and     tprogram_id     = _tprogram_id
	and		sync_type_code	= 'WTM'	
	and		status_code		= 'A';
	
	insert into core_mst_tmobilesync
	(
		tprogram_id,
		role_code,
		user_code,
		mobile_no,
		sync_type_code,
		last_sync_date,
		prev_last_sync_date,
		status_code,
		tprogram_lock,
	 	created_date,
		created_by
	)
	values
	(
		_tprogram_id,
		_role_code,
		_user_code,
		'',
		'WTM',
		now(),
		now(),
		'A',
		'Y',
		now(),
		_user_code
	)
	on conflict
		(tprogram_id,user_code,role_code,sync_type_code)
-- 		(tprogram_id,user_code,role_code,sync_type_code)
	do update set 
		last_sync_date 		= now(),
		prev_last_sync_date = v_last_sync_date,
		updated_date 		= now(),
		updated_by 			= _user_code;
		
	-- Get tprogram level
	select tprogram_level_code into v_tprogram_level_code
	from   trng_trn_ttprogram 
	where  tprogram_id = _tprogram_id	
	and    status_code not in ('I','R');
	
	if  v_tprogram_level_code <= '59' then
		update  core_mst_tmobilesynctable
		set 	status_code = 'A'
		where 	src_table_name in ('trng_mst_tcadreuser','shgmember_profileconsolidated_view')
		and  	sync_group_name = 'program_dtl';
		
		select 	state_code,district_code,block_code,grampanchayat_code,village_code
		into 	v_state_code,v_district_code,v_block_code,v_grampanchayat_code,v_village_code
		from 	trng_trn_ttprogramgeo
		where  	tprogram_id = _tprogram_id
		and   	status_code = 'A';
	else
		update  core_mst_tmobilesynctable
		set 	status_code = 'I'
		where 	src_table_name in ('trng_mst_tcadreuser','shgmember_profileconsolidated_view')
		and  	sync_group_name = 'program_dtl'
		and 	status_code = 'A';
	end if;
	

	-- stored procedure body 
	open _result_syncwtm for 
							select 
							    generate_mobilesync_script(
							 	db_schema_name collate pg_catalog.""default"",
								src_table_name::text,
								concat('1 = 1 ',coalesce(default_condition,''),
								case 
									when trngprogram_flag = 'Y' then concat(' and tprogram_id=',chr(39),_tprogram_id,chr(39)) 
									else '' 
								end,
								case 
									when activity_ref_flag = 'Y' then concat(' and activity_ref_id=',chr(39),_tprogram_id,chr(39))
									else '' 
								end,
								case 
									when user_flag = 'Y' then concat(' and user_code=',chr(39),_user_code,chr(39))
									else '' 
								end,
								case 
									when role_flag = 'Y' then concat(' and role_code=',chr(39),_role_code,chr(39)) 
									else '' 
								end,
								case 
									when dest_table_name = 'trng_mst_tcoursecontent' or dest_table_name = 'trng_mst_tcoursemodule' then 
									   concat(' and course_id =',chr(39),(select course_id from trng_trn_ttprogram 
											  							where tprogram_id = _tprogram_id
											  							and status_code not in ('I','R')),chr(39))
									else '' 
								end,
								case 
								   when offline_flag = 'Y' and trainer_flag = 'Y' and v_tprogram_level_code >= '59' 
									   														then concat(' and trim(state_code)=',chr(39),trim(v_state_code),chr(39),
																										' and trim(district_code)=',chr(39),trim(v_district_code),chr(39),
																										' and trim(block_code)=',chr(39),trim(v_block_code),chr(39),
																										' and trim(panchayat_code)=',chr(39),trim(v_grampanchayat_code),chr(39)) 
								   when offline_flag = 'Y' and v_tprogram_level_code = '59'then concat(' and trim(state_code)=',chr(39),trim(v_state_code),chr(39),
																										' and trim(district_code)=',chr(39),trim(v_district_code),chr(39),
																										' and trim(block_code)=',chr(39),trim(v_block_code),chr(39),
																										' and trim(panchayat_code)=',chr(39),trim(v_grampanchayat_code),chr(39)) 
								   when offline_flag = 'Y' and v_tprogram_level_code = '49' then concat(' and trim(state_code)=',chr(39),trim(v_state_code),chr(39),
																										' and trim(district_code)=',chr(39),trim(v_district_code),chr(39),
																										' and trim(block_code)=',chr(39),trim(v_block_code),chr(39),
																										' and trim(panchayat_code)=',chr(39),trim(v_grampanchayat_code),chr(39),
																										' and trim(village_code)=',chr(39),trim(v_village_code),chr(39)) 
									 
									else '' 
								end,
									   
								case 
									 when date_flag = 'Y' then concat(' and (created_date >= ',chr(39),_last_sync_date,chr(39),'
																		or updated_date >=',chr(39),_last_sync_date,chr(39),')')
									 else '' 
								end)::text,
								dest_table_name::text,
								ignore_fields::text[])::text
				  from 		 core_mst_tmobilesynctable 
				  where 	 role_code = _role_code 
				  and        sync_group_name = 'program_dtl'
				  and 		 status_code = 'A'
				  
				  union all 
				  select patch_qry from core_mst_tpatchqry
				  		 where 	 role_code = _role_code
						 and	(created_date::udd_date  >= _last_sync_date
						 or 	 updated_date::udd_date  >= _last_sync_date)
				  		 and 	 status_code = 'A';
		 
		  -- TrngProgram  Lock
		  if not exists (select * from trng_trn_ttprogramlock
						 where 	tprogram_id = _tprogram_id) then
				  insert into trng_trn_ttprogramlock
							  (tprogram_id)
				  values (_tprogram_id);
		  end if;

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_syncwtmprngheader(_user_code udd_code, _last_sync_date udd_date, _role_code udd_code, INOUT _result_syncwtm refcursor DEFAULT 'rs_syncwtm'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 16-12-2022
		
		Updated By 	 : Mangai
		Updated Date : 28-03-2022
		
		SP Code : B01SYNG03
		Version No : 3
	*/
	
	v_last_sync_date udd_datetime;
	v_colrec record;
	v_tprogram_id udd_code := '';
	v_user_vertical udd_code := '';
	v_user_level udd_code := '';
begin

	/*
	for v_tprogram_id in (	select tprogram_id from trng_trn_ttprogram 
						   	where execution_status_code in ('H','P') 
							and status_code = 'A'
							and coordinator_id = _user_code
						    and (created_date >= _last_sync_date
						    or updated_date >= _last_sync_date)
						  ) 
	loop
		/*if not exists (	select * from core_mst_tmobilesync where tprogram_id = v_tprogram_id
						and user_code = _user_code 
						and role_code = _role_code 
						and sync_type_code = 'WTM' ) then */
			select 	last_sync_date into v_last_sync_date 
			from 	core_mst_tmobilesync
			where	user_code		= _user_code
			and		role_code		= _role_code
			and 	tprogram_id     = v_tprogram_id
			and		sync_type_code	= 'WTM'	
			and		status_code		= 'A';

			insert into core_mst_tmobilesync
			(
				tprogram_id,
				role_code,
				user_code,
				mobile_no,
				sync_type_code,
				last_sync_date,
				prev_last_sync_date,
				status_code,
				created_date,
				created_by
			)
			values
			(
				v_tprogram_id,
				_role_code,
				_user_code,
				'',
				'WTM',
				now(),
				now(),
				'A',
				now(),
				_user_code
			)
		--end if;
		on conflict
			(tprogram_id,user_code,role_code,sync_type_code)
		do update set 
			last_sync_date 		= now(),
			prev_last_sync_date = v_last_sync_date,
			updated_date 		= now(),
			updated_by 			= _user_code;
	end loop;
	*/
	-- stored procedure body 
	-- Get user vertical and level
	select fn_get_userverticalcode(_user_code) into v_user_vertical;
	select fn_get_userlevelcode(_user_code) into v_user_level;
	
	open _result_syncwtm for 
							select 	
							    generate_mobilesync_script(
							 	db_schema_name collate pg_catalog.""default"",
								src_table_name::text,
								concat('1 = 1 ',coalesce(default_condition,''),
								case 
									when trngprogram_flag = 'Y' then concat(' and tprogram_id=',chr(39),'',chr(39)) 
									else '' 
								end,
-- 								 case 
-- 									when trngprogram_flag = 'Y' then concat(' and tprogram_id in (',chr(39), chr(39), 
-- 																			(	select tprogram_id from trng_trn_ttprogram 
-- 																				where execution_status_code in ('H','P') 
-- 																				and status_code = 'A'
-- 																				and coordinator_id = 'TCN2023'
-- 																				and (created_date >= '2020-01-01'
-- 																				or updated_date >= '2020-01-01') ),')',chr(39),chr(39)) 
-- 									else '' 
-- 								end,
								case 
									when user_flag = 'Y' then concat(' and coordinator_id =',chr(39),_user_code,chr(39),
																	 ' and vertical_code =',chr(39),v_user_vertical,chr(39),
																	 ' and tprogram_level_code <=',chr(39),v_user_level,chr(39)) 
									else '' 
								end,
								case 
									when role_flag = 'Y' then concat(' and role_code=',chr(39),_role_code,chr(39)) 
									else '' 
								end,
-- 								case 
-- 									when mobile_flag = 'Y' then concat(' and mobile_no=',chr(39),_mobile_no,chr(39)) 
-- 									else '' 
-- 								end,
								case 
									 when date_flag = 'Y' then concat(' and (created_date >= ',chr(39),_last_sync_date,chr(39),'
																		or updated_date >=',chr(39),_last_sync_date,chr(39),')')
									 else '' 
								end)::text,
								dest_table_name::text,
								ignore_fields::text[])::text
				  from 		 core_mst_tmobilesynctable 
				  where 	 role_code = _role_code 
				  and        sync_group_name = 'program_header'
				  and 		 status_code = 'A'
				  
				  union all 
				  select patch_qry from core_mst_tpatchqry
				  		 where 	 role_code = _role_code
						 and	(created_date::udd_date  >= _last_sync_date
						 or 	 updated_date::udd_date  >= _last_sync_date)
				  		 and 	 status_code = 'A';

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tavailablelist(_trngorg_type_code udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _start_date udd_date, _end_date udd_date, _trngorg_id udd_code, _vertical_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tavailabe refcursor DEFAULT 'rs_availablelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
Declare
	/*
		Created By   : Mohan
		Created Date : 17-10-2022
		
		Updated By   : Mohan S
		Updated Date : 06-02-2023
		
		SP Code      : B07MATG01
		Version No   : 10
	*/
	v_course_id udd_code := '';
	v_config_value udd_desc := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	if _trngorg_type_code = 'QCD_INTERNAL' then
			_trngorg_id = 'TOR_INTERNAL';
		else if _trngorg_type_code = 'QCD_EXTERNAL' then
			_trngorg_id = 'TOR_EXTERNAL';
		end if;
	end if;
	
	-- Get Course id against tprogramid
	select 	course_id into v_course_id from trng_trn_ttprogram
	where 	tprogram_id = _tprogram_id;
	
	-- stored procedure body 
	if 	(_trngorg_type_code = 'QCD_INTERNAL') or (_trngorg_type_code = 'QCD_EXTERNAL') then
		open _result_tavailabe for select distinct
										trainer_id,
										mobile_no,
										trainer_name,
-- 										trainer_ll_name,
										--trainer_type_code,
										--fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code,_lang_code) as trainer_type_desc,
										trngorg_type_code,
										fn_get_masterdesc('QCD_ORG_TYPE',trngorg_type_code,_lang_code) as trngorg_type_desc,
										email_id,
										gender_code,
										fn_get_masterdesc('QCD_GENDER',gender_code,_lang_code) as gender_desc,
										trainer_level_code,
										fn_get_masterdesc('QCD_TRAINER_LEVEL',trainer_level_code,_lang_code) as trainer_level_desc,
										fn_get_tavailableflag(trainer_id, _tprogrambatch_id, _start_date, _end_date) as available,
										fn_get_masterdesc('QCD_YES_NO',
														  fn_get_tavailableflag(trainer_id, _tprogrambatch_id, _start_date, _end_date),
														  _lang_code) as available_desc,
										vertical_code,
										fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code) as vertical_desc,
										coalesce(to_char(validity_from,v_config_value)::udd_code,'') as validity_from,
							  			coalesce(to_char(validity_to,v_config_value)::udd_code,'') as validity_to,
										coalesce(validity_from::udd_code,'') as org_validity_from,
										coalesce(validity_to::udd_code,'') as org_validity_to,
										indefinite_flag,
										fn_get_masterdesc('QCD_YES_NO',indefinite_flag,_lang_code) as indefinite_flag_desc
-- 										subvertical_jsonb::udd_text,
-- 										fn_get_subvertical(subvertical_jsonb::udd_jsonb,_lang_code) as subvertical_jsonb_desc
									from trng_mst_ttrainer_view 
									where trngorg_type_code = _trngorg_type_code
									--and   course_id = v_course_id
									and   trngorg_id = _trngorg_id
									and   vertical_code = _vertical_code
									and   trainer_id not in (select trainer_id from trng_trn_ttprogramtrainer
															where tprogram_id = _tprogram_id
															and tprogrambatch_id = _tprogrambatch_id
															and status_code = 'A')
									and   status_code = 'A';
		 
	elseif  _trngorg_type_code = 'QCD_ORGANIZATION' then
		 	open _result_tavailabe for select distinct
										t.trainer_id,
										t.mobile_no,
										t.trainer_name,
										t.trainer_ll_name,
										torg.trngorg_name,
										torg.trngorg_ll_name,
										--trainer_type_code,
										--fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code,_lang_code) as trainer_type_desc,
										torg.trngorg_type_code,
										fn_get_masterdesc('QCD_ORG_TYPE',torg.trngorg_type_code,_lang_code) as trngorg_type_desc,
										torg.email_id,
										t.gender_code,
										fn_get_masterdesc('QCD_GENDER',t.gender_code,_lang_code) as gender_desc,
										t.trainer_level_code,
										fn_get_masterdesc('QCD_TRAINER_LEVEL',t.trainer_level_code,_lang_code) as trainer_level_desc,
										'Y' as available,
										fn_get_masterdesc('QCD_YES_NO','Y',_lang_code) as available_desc,
										tod.vertical_code,
										fn_get_masterdesc('QCD_VERTICAL',tod.vertical_code,_lang_code) as vertical_desc,
										coalesce(to_char(t.validity_from,v_config_value)::udd_code,'') as validity_from,
							  			coalesce(to_char(t.validity_to,v_config_value)::udd_code,'') as validity_to,
										coalesce(t.validity_from::udd_code,'') as org_validity_from,
										coalesce(t.validity_to::udd_code,'') as org_validity_to,
										t.indefinite_flag,
										fn_get_masterdesc('QCD_YES_NO',t.indefinite_flag,_lang_code) as indefinite_flag_desc
-- 										tod.subvertical_jsonb::udd_text,
-- 										fn_get_subvertical(tod.subvertical_jsonb::udd_jsonb,_lang_code) as subvertical_jsonb_desc
							from  		trng_mst_ttrainingorg as torg
							left join   trng_mst_ttrainingorgdomain as tod	
							on          torg.trngorg_id = tod.trngorg_id
							inner join  trng_mst_ttrainer as t
							on          torg.trngorg_id = t.trngorg_id
							and         t.status_code <> 'I'
							where 		torg.trngorg_type_code = _trngorg_type_code
						--  and   		course_id = v_course_id
							and         t.trainer_id not in (select trainer_id from trng_trn_ttprogramtrainer
															where tprogram_id = _tprogram_id
															and tprogrambatch_id = _tprogrambatch_id
															and status_code = 'A')
							and   		torg.trngorg_id = _trngorg_id
							and   		vertical_code = _vertical_code
							and   		torg.status_code = 'A';
	else
	open _result_tavailabe for select 	 distinct
												t.trainer_id,
												t.mobile_no,
												t.trainer_name,
												t.trainer_ll_name,
												torg.trngorg_name,
												torg.trngorg_ll_name,
												--trainer_type_code,
												--fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code,_lang_code) as trainer_type_desc,
												torg.trngorg_type_code,
												fn_get_masterdesc('QCD_ORG_TYPE',torg.trngorg_type_code,_lang_code) as trngorg_type_desc,
												torg.email_id,
												t.gender_code,
												fn_get_masterdesc('QCD_GENDER',t.gender_code,_lang_code) as gender_desc,
												t.trainer_level_code,
												fn_get_masterdesc('QCD_TRAINER_LEVEL',t.trainer_level_code,_lang_code) as trainer_level_desc,
												'Y' as available,
												fn_get_masterdesc('QCD_YES_NO','Y',_lang_code) as available_desc,
												tod.vertical_code,
												fn_get_masterdesc('QCD_VERTICAL',tod.vertical_code,_lang_code) as vertical_desc,
												coalesce(to_char(t.validity_from,v_config_value)::udd_code,'') as validity_from,
												coalesce(to_char(t.validity_to,v_config_value)::udd_code,'') as validity_to,
												coalesce(t.validity_from::udd_code,'') as org_validity_from,
												coalesce(t.validity_to::udd_code,'') as org_validity_to,
												t.indefinite_flag,
												fn_get_masterdesc('QCD_YES_NO',t.indefinite_flag,_lang_code) as indefinite_flag_desc
									  from       trng_mst_ttrainingorg as torg
									  inner JOIN  trng_mst_ttrainingorgdomain tod
   									  ON         torg.trngorg_id= tod.trngorg_id 
									  and 		 tod.status_code = 'A'
									  inner join trng_mst_ttrainerdomain as td
									  on 		 tod.vertical_code = td.vertical_code
									  and 		 td.status_code = 'A'
									  inner join trng_mst_ttrainergroup as tg
									  on         torg.trngorg_id= tg.trngorg_id  
  									  AND        tg.status_code = 'A'
									  inner join trng_mst_ttrainer as t
									  on 		 tg.trainer_id = t.trainer_id 
									  and 		 t.status_code = 'A'
									  where 	 torg.trngorg_type_code = 'QCD_GROUP'
									  and        t.trainer_id not in ( select trainer_id from trng_trn_ttprogramtrainer
																		where tprogram_id =_tprogram_id
																		and tprogrambatch_id = _tprogrambatch_id
-- 																		and trngorg_id = _trngorg_id
																		and status_code = 'A')
									  and 		tod.vertical_code = _vertical_code
									  and 		torg.trngorg_id = _trngorg_id
									  and 		torg.status_code = 'A';	
	
/*	else
			 open _result_tavailabe for select distinct
												trainer_id,
												group_name,
												mobile_no,
												--trainer_type_code,
												--fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_level_code,_lang_code) as trainer_level_desc,
												trngorg_type_code,
												fn_get_masterdesc('QCD_ORG_TYPE',trngorg_type_code,_lang_code) as trngorg_type_desc,
												trainer_level_code,
												fn_get_masterdesc('QCD_TRAINER_LEVEL',trainer_level_code,_lang_code) as trainer_level_desc,
												email_id,
												vertical_code,
												fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code) as vertical_desc,
												subvertical_jsonb :: udd_text,
												fn_get_subvertical(subvertical_jsonb,_lang_code) as subvertical_jsonb_desc,
												fn_get_tavailableflag(trainer_id, _tprogrambatch_id, _start_date, _end_date) as available
											from trng_mst_ttrainergroup_view
											where trngorg_type_code = _trngorg_type_code
											--and   course_id = v_course_id
											and   trngorg_id = _trngorg_id
											and   vertical_code = _vertical_code
											and   status_code = 'A';
*/
	end if;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tpreprogmparticipantlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tpreprogmpartlist refcursor DEFAULT 'rs_tpreprogmpartlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mohan S
		Created Date : 15-10-2022
		
		Updated By   : Satheesh S
		Updated Date : 16-11-2022
		
		SP Code : B07TMPG01
		version no : 03
	*/
	v_config_value udd_desc := '';
begin
    select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';

    -- stored procedure body
	open _result_tpreprogmpartlist for select 	
									  		tprogram_id,
											tprogrambatch_id,
											to_char(_batch_date,v_config_value) as batch_date,
											coalesce(_batch_date ::udd_code,'') as org_batch_date,
											participant_type_code,
											fn_get_masterdesc('QCD_PRT_TYPE', participant_type_code, _lang_code) as participant_type_desc,
											participant_subtype_code,
											fn_get_masterdesc('QCD_PRT_SUBTYPE', participant_subtype_code, _lang_code) as participant_subtype_desc,
											participant_id,
											participant_name,
											participant_ll_name,
											fatherhusband_name,
											fatherhusband_ll_name,
											shg_id,
											mobile_no,
											email_id,
											gender_code,
											fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code) as gender_desc,
											attendance_flag,
											fn_get_masterdesc('QCD_ATTENDANCE', attendance_flag, _lang_code) as attendance_flag_desc,
											status_code,
											fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc
											from trng_trn_ttprogramparticipant
											where tprogram_id = _tprogram_id
											and   tprogrambatch_id = _tprogrambatch_id
											and   batch_date = _batch_date - Interval '1 day'
											and   status_code = 'A';
				 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogapproverlist(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogapproverlst refcursor DEFAULT 'rs_tprogapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mangai
		Created Date 	: 17-10-2022
		
		Updated By 		: Mangai
		Updated Date 	: 06-04-2023
		
		SP Code 		: B07PAPG01
		version no	    : 11
	*/
	 v_config_value udd_desc := '';
	 
	 v_view_flag udd_flag := 'N';
	 v_auth_flag udd_flag := 'N';
	 v_modifiy_flag udd_flag := 'N';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';

	-- stored procedure body
	select 	view_flag,auth_flag,modifiy_flag 
	into 	v_view_flag,v_auth_flag,v_modifiy_flag 
	from 	core_mst_trolemenurights where menu_code = 'TRPATP002' 
	and 	role_code = _role_code;
	
	if (v_auth_flag = 'Y' or v_modifiy_flag = 'Y') then
		open _result_tprogapproverlst for select 
											tpp.programapproval_gid,
											p.tprogram_id,
											p.tprogram_name,
											p.tprogram_ll_name,
											p.coordinator_id,
											fn_get_usermobileno(p.coordinator_id) as mobile_no,
											p.no_of_batches,
											fn_get_username(p.coordinator_id) as coordinator_name,
											-- pp.mobile_no,	
											p.tprogram_level_code,
											fn_get_masterdesc('QCD_TRAINER_LEVEL',p.tprogram_level_code,_lang_code) as tprogram_level_desc,
											tpp.approver_id,
											coalesce(to_char(p.start_date,v_config_value)::udd_code,'') as start_date,
											coalesce(to_char(p.end_date,v_config_value)::udd_code,'') as end_date,
											coalesce(p.start_date::udd_code,'') as org_start_date,
											coalesce(p.end_date::udd_code,'') as rrg_end_date,
											tpp.approval_status_code,
											p.execution_status_code,
											case 
											when tpp.approval_status_code = 'A' then
												p.execution_status_code
											else
												tpp.approval_status_code
											end as status_code,
											case 
											when tpp.approval_status_code = 'A' then
												fn_get_masterdesc('QCD_STATUS',p.execution_status_code, _lang_code)
											else
												fn_get_masterdesc('QCD_STATUS',tpp.approval_status_code, _lang_code)
											end as status_desc
	-- 										tpp.approval_status_code as status_code,
	-- 										fn_get_masterdesc('QCD_STATUS',tpp.approval_status_code,_lang_code) as status_desc
								from        trng_trn_ttprogram as p
								inner join  trng_trn_ttprogramapproval as tpp
								on p.tprogram_id = tpp.tprogram_id 
								and tpp.approval_status_code in('A','S','B','R')
								where p.status_code in ('A','S','B','R')
								and   p.execution_status_code in ('H','D')
								and   tpp.approver_id = _user_code
								order by p.row_timestamp desc;
	elseif v_view_flag = 'Y' then
			open _result_tprogapproverlst for select 
											tpp.programapproval_gid,
											p.tprogram_id,
											p.tprogram_name,
											p.tprogram_ll_name,
											p.coordinator_id,
											fn_get_usermobileno(p.coordinator_id) as mobile_no,
											p.no_of_batches,
											fn_get_username(p.coordinator_id) as coordinator_name,
											-- pp.mobile_no,	
											p.tprogram_level_code,
											fn_get_masterdesc('QCD_TRAINER_LEVEL',p.tprogram_level_code,_lang_code) as tprogram_level_desc,
											tpp.approver_id,
											coalesce(to_char(p.start_date,v_config_value)::udd_code,'') as start_date,
											coalesce(to_char(p.end_date,v_config_value)::udd_code,'') as end_date,
											coalesce(p.start_date::udd_code,'') as org_start_date,
											coalesce(p.end_date::udd_code,'') as rrg_end_date,
											tpp.approval_status_code,
											p.execution_status_code,
											case 
											when tpp.approval_status_code = 'A' then
												p.execution_status_code
											else
												tpp.approval_status_code
											end as status_code,
											case 
											when tpp.approval_status_code = 'A' then
												fn_get_masterdesc('QCD_STATUS',p.execution_status_code, _lang_code)
											else
												fn_get_masterdesc('QCD_STATUS',tpp.approval_status_code, _lang_code)
											end as status_desc
	-- 										tpp.approval_status_code as status_code,
	-- 										fn_get_masterdesc('QCD_STATUS',tpp.approval_status_code,_lang_code) as status_desc
								from        trng_trn_ttprogram as p
								inner join  trng_trn_ttprogramapproval as tpp
								on p.tprogram_id = tpp.tprogram_id 
								and tpp.approval_status_code in ('A','B','R')  --('A','S','B','R')
								where p.status_code in ('A','B','R') --('A','S','B','R')
								and   p.execution_status_code in ('H','D')
								and   tpp.approver_id = _user_code
								order by p.row_timestamp desc;
	else
		open _result_tprogapproverlst for select 1;
	end if;	
		
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogbatchparticipant(_intuser_type_code udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _resource_type udd_code, _c_role_code udd_code, _category udd_code, _vertical udd_code, _subvertical udd_code, _participant_name udd_desc, _state_id udd_int, _district_id udd_int, _block_id udd_int, _panchayat_id udd_int, _village_id udd_int, _user_level_code udd_code, _shg_name udd_desc, _clf_cbo_code udd_desc, _vo_cbo_code udd_desc, _geo_flag udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_batchparticipantlst refcursor DEFAULT 'rs_batchparticipant'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By : Mohan S
	Created Date : 30-09-2022
	
	Updated By : Mangai
	Updated Date : 11-04-2023
	
	SP Code : B05INTG01
	version no : 20
*/
	v_state_code udd_code := ''; 
	v_district_code udd_code := ''; 
	v_block_code udd_code := ''; 
	v_grampanchayat_code udd_code := ''; 
	v_village_code udd_code := ''; 
	
	v_cadrevillagecount udd_int := 0;
	v_cadrepanchayatcount udd_int := 0;
	v_cadreblockcount udd_int := 0;
	v_cadredistrictcount udd_int := 0;
	
	v_lokosvillagecount udd_int := 0;
	v_lokospanchayatcount udd_int := 0;
	v_lokosblockcount udd_int := 0;
	v_lokosdistrictcount udd_int := 0;
begin
	if _intuser_type_code = 'QCD_CADRE' then
			open _result_batchparticipantlst for select 
													   'cadre' as source_from,
													   cadreuser_id as participant_id,
													   cadreuser_name as participant_name,
													   shg_name,
													   father_husband_name,
													   gender_code,
													   fn_get_masterdesc('QCD_GENDER',gender_code,_lang_code)  as gender_desc,
													   mobile_no,
													   coalesce(mail_id,'') as email_id,
													   cadre_resource_type_code,
													   fn_get_masterdesc('QCD_RESOURCE_TYPE',cadre_resource_type_code,_lang_code)  as cadre_resource_type_desc,
													   cadre_role_code,
													   fn_get_masterdesc('QCD_ROLE',cadre_role_code,_lang_code)  as cadre_role_desc,
													   cadre_cat_code,
													   fn_get_masterdesc('QCD_C_CAT',cadre_cat_code,_lang_code)  as cadre_cat_desc,
													   vertical_code,
													   fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code)  as vertical_desc,
													   subvertical_code,
													   fn_get_masterdesc('QCD_SUBVERTICAL',subvertical_code,_lang_code)  as subvertical_desc,
													   addr_state_code,
													   fn_get_statedesc(addr_state_code) as state_desc,
													   addr_district_code,
													   fn_get_districtdesc(addr_district_code) as district_desc,
													   addr_block_code,
													   fn_get_blockdesc(addr_block_code) as block_desc,
													   addr_grampanchayat_code,
													   fn_get_panchayatdesc(addr_grampanchayat_code) as grampanchayat_desc,
													   addr_village_code,
													   fn_get_panchayatdesc(addr_village_code) as village_desc,
													   status_code,
													   fn_get_masterdesc('QCD_STATUS',status_code,_lang_code)  as status_desc
												from   trng_mst_tcadreuser
												where  cadreuser_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
												and    cadreuser_id not in (select participant_id from trng_trn_ttprogramparticipant
																			where participant_type_code = 'QCD_INTERNAL'
																			and participant_subtype_code = 'QCD_INT_CADRE'
																			and tprogram_id = _tprogram_id
																			and tprogrambatch_id = _tprogrambatch_id	
																			and batch_date = _batch_date
																			and status_code = 'A')
												and  vertical_code = _vertical
												and    cadre_resource_type_code = 
												case 
													when _resource_type = '' or _resource_type isnull then
														coalesce(cadre_resource_type_code,_resource_type)
													else
														coalesce(_resource_type,cadre_resource_type_code)
												end
												and   cadre_role_code = 
												case 
													when    _c_role_code isnull or _c_role_code = ''  then 
															coalesce(cadre_role_code,_c_role_code)
													else 
															coalesce(_c_role_code,cadre_role_code) 
												end 
												and   cadre_cat_code = 
												case 
													when    _category isnull or _category = ''  then 
															coalesce(cadre_cat_code,_category)
													else 
															coalesce(_category,cadre_cat_code) 
												end 
												and  subvertical_code =
												case 
													when    _subvertical isnull or _subvertical = ''  then 
															coalesce(subvertical_code,_subvertical)
													else 
															coalesce(_subvertical,subvertical_code) 
												end 
												and status_code = 'A';
			end if;	
			
	if _geo_flag = 'N' then
			--Lokos
		/*	select fn_get_lokosvillagecount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
											_vertical,_subvertical,_participant_name,_state_id,_district_id,_block_id,
											_panchayat_id,_village_id,_user_level_code,_shg_name,_user_code,_role_code,
											_lang_code) into v_lokosvillagecount;

			select fn_get_lokospanchayatcount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
											_vertical,_subvertical,_participant_name,_state_id,_district_id,_block_id,
											_panchayat_id,_user_level_code,_shg_name,_user_code,_role_code,
											_lang_code) into v_lokospanchayatcount;

			select fn_get_lokosblockcount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
											_vertical,_subvertical,_participant_name,_state_id,_district_id,_block_id,
											_user_level_code,_shg_name,_user_code,_role_code,
											_lang_code) into v_lokosblockcount;

			select fn_get_lokosdistrictcount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
											_vertical,_subvertical,_participant_name,_state_id,_district_id,_user_level_code,
											 _shg_name,_user_code,_role_code,_lang_code) into v_lokosdistrictcount;

			if v_lokosvillagecount = 0 then		
				_village_id := 0;
			end if;

			if v_lokospanchayatcount = 0 then
				_panchayat_id := 0;
			end if;

			if v_lokosblockcount = 0 then
				_block_id := 0;
			end if;

			if v_lokosdistrictcount = 0 then
				_district_id := 0;
			end if;
*/
			-- stored procedure body
		if _intuser_type_code = 'QCD_LOKOS' then 
				open _result_batchparticipantlst for select 
														  'SHG' as source_from,
														   coalesce(shg_member_id :: udd_code, '') as participant_id,
		-- 												   shg_member_id  as participant_id,
														   shg_member_name as participant_name,
														   shg_name,
														   shg_name_local,
														   shg_id,
														   shg_code,
														   shg_member_id,
														   shg_member_name_local,
														   shg_member_relation_name_local,
														   dob,
														   age,
														   age_as_on,
														   created_date,
														   last_updated_date,
														   vo_cbo_code,
														   vo_name,
														   clf_cbo_code,
														   clf_name,
														   gender::udd_code as gender_code,
														   fn_get_masterdesc('QCD_GENDER',gender::udd_code,_lang_code)  as gender_desc,
														   shg_member_relation_name as fathers_husband_name,
														   coalesce(member_phone,'0') as mobile_no,
														   '' as email_id,
														   state_id,
														   state_code,
														   fn_get_statedesc(state_code) as state_desc,
														   district_id,
														   district_code,
														   fn_get_districtdesc(district_code) as district_desc,
														   block_id,
														   block_code,
														   fn_get_blockdesc(block_code) as block_desc,
														   panchayat_id,
														   panchayat_code,
														   fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
														   village_id,
														   village_code,
														   fn_get_villagedesc(village_code) as village_desc,
														   '' as vertical_code,
														   '' as vertical_desc,
														   '' as subvertical_code,
														   '' as subvertical_desc
													from   shgmember_profileconsolidated_view
													where  shg_member_name ilike _participant_name||'%' collate pg_catalog.""default""
-- 													and    shg_name ilike _shg_name||'%' collate pg_catalog.""default""
													and    shg_member_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
													and    shg_member_id::udd_code not in (select participant_id from trng_trn_ttprogramparticipant
																				 where participant_type_code = 'QCD_INTERNAL'
																				 and participant_subtype_code = 'QCD_INT_LOKOS'
																				 and tprogram_id = _tprogram_id
																				 and tprogrambatch_id = _tprogrambatch_id	
																				 and batch_date = _batch_date
																				 and status_code = 'A')
													/*and state_id = _state_id
													and district_id = _district_id
													and block_id = _block_id
													and panchayat_id = _panchayat_id
													and village_id = _village_id*/
													and    state_id    = _state_id 
													and    district_id =
													case 
														when    _district_id isnull or _district_id = 0  then 
																coalesce(district_id,_district_id)
														else 
																coalesce(_district_id,district_id) 
													end 
													and    block_id =
													case 
														when    _block_id isnull or _block_id = 0  then 
																coalesce(block_id,_block_id)
														else 
																coalesce(_block_id,block_id) 
													end 
													and    panchayat_id =
													case 
														when    _panchayat_id isnull or _panchayat_id = 0  then 
																coalesce(panchayat_id,_panchayat_id)
														else 
																coalesce(_panchayat_id,panchayat_id) 
													end 
													and    village_id =
													case 
														when    _village_id isnull or _village_id = 0  then 
																coalesce(village_id,_village_id)
														else 
																coalesce(_village_id,village_id) 
													end
													and  shg_code =
													case
														when _shg_name isnull or _shg_name  = '' then
																coalesce(shg_code,_shg_name)
														else 
																coalesce(_shg_name,shg_code)
													end;
-- 													limit 100;
			end if;
	end if;
	
	if _geo_flag = 'Y' then
			if _intuser_type_code = 'QCD_LOKOS' then
				open _result_batchparticipantlst for select 
														  'SHG' as source_from,
														   coalesce(shg_member_id :: udd_code, '') as participant_id,
		-- 												   shg_member_id  as participant_id,
														   shg_member_name as participant_name,
														   shg_name,
														   shg_name_local,
														   shg_id,
														   shg_code,
														   shg_member_id,
														   shg_member_name_local,
														   shg_member_relation_name_local,
														   dob,
														   age,
														   age_as_on,
														   created_date,
														   last_updated_date,
														   vo_cbo_code,
														   vo_name,
														   clf_cbo_code,
														   clf_name,
														   gender::udd_code as gender_code,
														   fn_get_masterdesc('QCD_GENDER',gender::udd_code,_lang_code)  as gender_desc,
														   shg_member_relation_name as fathers_husband_name,
														   coalesce(member_phone,'0') as mobile_no,
														   '' as email_id,
														   state_id,
														   state_code,
														   fn_get_statedesc(state_code) as state_desc,
														   district_id,
														   district_code,
														   fn_get_districtdesc(district_code) as district_desc,
														   block_id,
														   block_code,
														   fn_get_blockdesc(block_code) as block_desc,
														   panchayat_id,
														   panchayat_code,
														   fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
														   village_id,
														   village_code,
														   fn_get_villagedesc(village_code) as village_desc,
														   '' as vertical_code,
														   '' as vertical_desc,
														   '' as subvertical_code,
														   '' as subvertical_desc
													from   shgmember_profileconsolidated_view
													where  shg_member_name ilike '%'||  _participant_name||'%' collate pg_catalog.""default""
-- 													and    shg_name ilike _shg_name||'%' collate pg_catalog.""default
													and    shg_member_id::udd_code not in (select participant_id from trng_trn_ttprogramparticipant
																				 where participant_type_code = 'QCD_INTERNAL'
																				 and participant_subtype_code = 'QCD_INT_LOKOS'
																				 and tprogram_id = _tprogram_id
																				 and tprogrambatch_id = _tprogrambatch_id	
																			 	 and batch_date = _batch_date
																				 and status_code = 'A')
													
													and    state_id    = _state_id 
													and    district_id =
													case 
														when    _district_id isnull or _district_id = 0  then 
																coalesce(district_id,_district_id)
														else 
																coalesce(_district_id,district_id) 
													end 
													and    block_id =
													case 
														when    _block_id isnull or _block_id = 0  then 
																coalesce(block_id,_block_id)
														else 
																coalesce(_block_id,block_id) 
													end 
													and    panchayat_id =
													case 
														when    _panchayat_id isnull or _panchayat_id = 0  then 
																coalesce(panchayat_id,_panchayat_id)
														else 
																coalesce(_panchayat_id,panchayat_id) 
													end 
													and    village_id =
													case 
														when    _village_id isnull or _village_id = 0  then 
																coalesce(village_id,_village_id)
														else 
																coalesce(_village_id,village_id) 
													end
													and  shg_code =
													case
														when _shg_name isnull or _shg_name  = '' then
																coalesce(shg_code,_shg_name)
														else 
																coalesce(_shg_name,shg_code)
													end;
-- 													limit 100;
			end if;
	end if;
	
	-- SHG CLF/VO
		if _intuser_type_code = 'QCD_SHG_CLF_VO' then
			if _state_id = 0 then
				_state_id := null;
			end if;
			
			if _district_id = 0 then
				_district_id := null;
			end if;
			
			if _block_id = 0 then
				_block_id := null;
			end if;
			
			open _result_batchparticipantlst for select
													  'SHG CLF/VO' as source_from,
													   coalesce(shg_member_id :: udd_code, '') as participant_id,
	-- 												   shg_member_id  as participant_id,
													   shg_member_name as participant_name,
													   shg_id,
													   shg_name,
													   -- fn_get_shgname(a.shg_id) as shg_name,
													   gender::udd_code as gender_code,
													   fn_get_masterdesc('QCD_GENDER',gender::udd_code,_lang_code)  as gender_desc,
													   shg_member_relation_name as fathers_husband_name,
													   coalesce(member_phone,'0') as mobile_no,
													   '' as email_id,
													   state_code,
													   fn_get_statedesc(state_code) as state_desc,
													   district_code,
													   fn_get_districtdesc(district_code) as district_desc,
													   block_code,
													   fn_get_blockdesc(block_code) as block_desc,
													   panchayat_code,
													   fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
													   village_code,
													   fn_get_villagedesc(village_code) as village_desc ,
													   vo_cbo_code,
													   vo_name,
													   clf_cbo_code,
													   clf_name,
													   '' as vertical_code,
													   '' as vertical_desc,
													   '' as subvertical_code,
													   '' as subvertical_desc
								     			 from  shgmember_profileconsolidated_view
													where    shg_member_id::udd_code not in (select participant_id from trng_trn_ttprogramparticipant
																			 where participant_type_code = 'QCD_INTERNAL'
																			 and participant_subtype_code = 'QCD_SHG_CLF_VO'
																			 and tprogram_id = _tprogram_id
																			 and tprogrambatch_id = _tprogrambatch_id	
																			 and batch_date = _batch_date
																			 and status_code = 'A')
-- 													and    shg_name ilike _shg_name||'%' collate pg_catalog.""default""
													and    shg_member_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
													and    state_id = 
													case 
													when    _state_id isnull or _state_id = 0  then 
															coalesce(state_id,_state_id)
													else 
															coalesce(_state_id,state_id) 
													end
													and    district_id = 
													case 
													when    _district_id isnull or _district_id = 0  then 
															coalesce(district_id,_district_id)
													else 
															coalesce(_district_id,district_id) 
													end
													and    block_id = 
													case 
													when    _block_id isnull or _block_id = 0  then 
															coalesce(block_id,_block_id)
													else 
															coalesce(_block_id,block_id) 
													end
													and  clf_cbo_code =
													case
														when _clf_cbo_code isnull or _clf_cbo_code  = '' then
																coalesce(clf_cbo_code,_clf_cbo_code)
														else 
																coalesce(_clf_cbo_code,clf_cbo_code)
													end
													and  vo_cbo_code =
													case
														when _vo_cbo_code isnull or _vo_cbo_code  = '' then
																coalesce(vo_cbo_code,_vo_cbo_code)
														else 
																coalesce(_vo_cbo_code,vo_cbo_code)
													end
													and  shg_code =
													case
														when _shg_name isnull or _shg_name  = '' then
																coalesce(shg_code,_shg_name)
														else 
																coalesce(_shg_name,shg_code)
													end;
-- 													or shg_id notnull
-- 													limit 100;
		end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogbatchparticipant_web(_intuser_type_code udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _resource_type udd_code, _c_role_code udd_code, _category udd_code, _vertical udd_code, _subvertical udd_code, _participant_name udd_desc, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _village_code udd_code, _user_level_code udd_code, _shg_name udd_desc, _clf_cbo_code udd_desc, _vo_cbo_code udd_desc, _geo_flag udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_batchparticipantlst refcursor DEFAULT 'rs_batchparticipant'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By   : Mangai
	Created Date : 13-12-2022
	
	Updated By : Mangai
	Updated Date : 11-04-2023
	
	SP Code : B05INTG02
	version no : 16
*/
	v_state_code udd_code := ''; 
	v_district_code udd_code := ''; 
	v_block_code udd_code := ''; 
	v_grampanchayat_code udd_code := ''; 
	v_village_code udd_code := ''; 
	
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_village_id udd_int := 0;
	
	v_cadrevillagecount udd_int := 0;
	v_cadrepanchayatcount udd_int := 0;
	v_cadreblockcount udd_int := 0;
	v_cadredistrictcount udd_int := 0;
	
	v_lokosvillagecount udd_int := 0;
	v_lokospanchayatcount udd_int := 0;
	v_lokosblockcount udd_int := 0;
	v_lokosdistrictcount udd_int := 0;
begin
		
		-- stored procedure body
-- Cadre
		if _intuser_type_code = 'QCD_INT_CADRE' then
			open _result_batchparticipantlst for select 
													   'cadre' as source_from,
													   cadreuser_id as participant_id,
													   cadreuser_name as participant_name,
													   shg_name,
													   father_husband_name,
													   gender_code,
													   fn_get_masterdesc('QCD_GENDER',gender_code,_lang_code)  as gender_desc,
													   mobile_no,
													   coalesce(mail_id,'') as email_id,
													   cadre_resource_type_code,
													   fn_get_masterdesc('QCD_RESOURCE_TYPE',cadre_resource_type_code,_lang_code)  as cadre_resource_type_desc,
													   cadre_role_code,
													   fn_get_masterdesc('QCD_ROLE',cadre_role_code,_lang_code)  as cadre_role_desc,
													   cadre_cat_code,
													   fn_get_masterdesc('QCD_C_CAT',cadre_cat_code,_lang_code)  as cadre_cat_desc,
													   vertical_code,
													   fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code)  as vertical_desc,
													   subvertical_code,
													   fn_get_masterdesc('QCD_SUBVERTICAL',subvertical_code,_lang_code)  as subvertical_desc,
													   state_code,
													   fn_get_statedesc(state_code) as state_desc,
													   district_code,
													   fn_get_districtdesc(district_code) as district_desc,
													   block_code,
													   fn_get_blockdesc(block_code) as block_desc,
													   grampanchayat_code,
													   fn_get_panchayatdesc(grampanchayat_code) as grampanchayat_desc,
													   status_code,
													   fn_get_masterdesc('QCD_STATUS',status_code,_lang_code)  as status_desc
												from   trng_mst_tcadreuser
												where  cadreuser_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
												and    cadreuser_id not in (select participant_id from trng_trn_ttprogramparticipant
																			where participant_type_code = 'QCD_INTERNAL'
																			and participant_subtype_code = 'QCD_INT_CADRE'
																			and tprogram_id = _tprogram_id
																			and tprogrambatch_id = _tprogrambatch_id	
																			and batch_date = _batch_date
																			and status_code = 'A')
												and  vertical_code = _vertical
												and    cadre_resource_type_code = 
												case 
													when _resource_type = '' or _resource_type isnull then
														coalesce(cadre_resource_type_code,_resource_type)
													else
														coalesce(_resource_type,cadre_resource_type_code)
												end
												and   cadre_role_code = 
												case 
													when    _c_role_code isnull or _c_role_code = ''  then 
															coalesce(cadre_role_code,_c_role_code)
													else 
															coalesce(_c_role_code,cadre_role_code) 
												end 
												and   cadre_cat_code = 
												case 
													when    _category isnull or _category = ''  then 
															coalesce(cadre_cat_code,_category)
													else 
															coalesce(_category,cadre_cat_code) 
												end 
												and  subvertical_code =
												case 
													when    _subvertical isnull or _subvertical = ''  then 
															coalesce(subvertical_code,_subvertical)
													else 
															coalesce(_subvertical,subvertical_code) 
												end 
												and status_code = 'A';
		end if;
-- Cadre		

--Lokos
		-- 	Get id for geo
		select fn_get_stateid(_state_code) into v_state_id;
		select fn_get_districtid(_district_code) into v_district_id;
		select fn_get_blockid(_block_code) into v_block_id;
		select fn_get_panchayatid(_panchayat_code) into v_panchayat_id;
		select fn_get_villageid(_village_code) into v_village_id;
		
	if _geo_flag = 'QCD_ACCROSS_GEO' then
		--Lokos
		/*select fn_get_lokosvillagecount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
										_vertical,_subvertical,_participant_name,v_state_id,v_district_id,v_block_id,
										v_panchayat_id,v_village_id,_user_level_code,_shg_name,_user_code,_role_code,
										_lang_code) into v_lokosvillagecount;

		select fn_get_lokospanchayatcount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
										_vertical,_subvertical,_participant_name,v_state_id,v_district_id,v_block_id,
										v_panchayat_id,_user_level_code,_shg_name,_user_code,_role_code,
										_lang_code) into v_lokospanchayatcount;

		select fn_get_lokosblockcount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
										_vertical,_subvertical,_participant_name,v_state_id,v_district_id,v_block_id,
										_user_level_code,_shg_name,_user_code,_role_code,
										_lang_code) into v_lokosblockcount;

		select fn_get_lokosdistrictcount(_intuser_type_code,_tprogram_id,_resource_type,_c_role_code,_category,
										_vertical,_subvertical,_participant_name,v_state_id,v_district_id,_user_level_code,
										 _shg_name,_user_code,_role_code,_lang_code) into v_lokosdistrictcount;

		if v_lokosvillagecount = 0 then		
			v_village_id := 0;
		end if;

		if v_lokospanchayatcount = 0 then
			v_panchayat_id := 0;
		end if;

		if v_lokosblockcount = 0 then
			v_block_id := 0;
		end if;

		if v_lokosdistrictcount = 0 then
			v_district_id := 0;
		end if;
		*/			

		if _intuser_type_code = 'QCD_INT_LOKOS' then
			open _result_batchparticipantlst for select 
													  'SHG' as source_from,
													   coalesce(shg_member_id :: udd_code, '') as participant_id,
	-- 												   shg_member_id  as participant_id,
													   shg_member_name as participant_name,
													   shg_id,
													   shg_name,
													   shg_code,
													   gender::udd_code as gender_code,
													   fn_get_masterdesc('QCD_GENDER',gender::udd_code,_lang_code)  as gender_desc,
													   shg_member_relation_name as fathers_husband_name,
													   coalesce(member_phone,'0') as mobile_no,
													   '' as email_id,
													   state_code,
													   fn_get_statedesc(state_code) as state_desc,
													   district_code,
													   fn_get_districtdesc(district_code) as district_desc,
													   block_code,
													   fn_get_blockdesc(block_code) as block_desc,
													   panchayat_code,
													   fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
													   village_code,
													   fn_get_villagedesc(village_code) as village_desc,
													   '' as vertical_code,
													   '' as vertical_desc,
													   '' as subvertical_code,
													   '' as subvertical_desc
												from   shgmember_profileconsolidated_view
												where  shg_member_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
-- 												and    shg_name ilike '%'|| _shg_name||'%' collate pg_catalog.""default""
												and    shg_member_id::udd_code not in (select participant_id from trng_trn_ttprogramparticipant
																			 where participant_type_code = 'QCD_INTERNAL'
																			 and participant_subtype_code = 'QCD_INT_LOKOS'
																			 and tprogram_id = _tprogram_id
																			 and tprogrambatch_id = _tprogrambatch_id	
																			 and batch_date = _batch_date
																			 and status_code = 'A')
												and    state_id    = v_state_id 
												and    district_id =
												case 
													when    v_district_id isnull or v_district_id = 0  then 
															coalesce(district_id,v_district_id)
													else 
															coalesce(v_district_id,district_id) 
												end 
												and    block_id =
												case 
													when    v_block_id isnull or v_block_id = 0  then 
															coalesce(block_id,v_block_id)
													else 
															coalesce(v_block_id,block_id) 
												end 
												and    panchayat_id =
												case 
													when    v_panchayat_id isnull or v_panchayat_id = 0  then 
															coalesce(panchayat_id,v_panchayat_id)
													else 
															coalesce(v_panchayat_id,panchayat_id) 
												end 
												and    village_id =
												case 
													when    v_village_id isnull or v_village_id = 0  then 
															coalesce(village_id,v_village_id)
													else 
															coalesce(v_village_id,village_id) 
												end
												and  shg_code =
												case
													when _shg_name isnull or _shg_name  = '' then
															coalesce(shg_code,_shg_name)
													else 
															coalesce(_shg_name,shg_code)
												end;
-- 												limit 100;
		end if;
	end if;

	if _geo_flag = 'QCD_WITH_GEO' then
		if _intuser_type_code = 'QCD_INT_LOKOS' then
			open _result_batchparticipantlst for select 
													   'SHG' as source_from,
													   coalesce(shg_member_id :: udd_code, '') as participant_id,
	-- 												   shg_member_id  as participant_id,
													   shg_member_name as participant_name,
													   shg_name,
													   shg_id,
													   shg_code,
													   gender::udd_code as gender_code,
													   fn_get_masterdesc('QCD_GENDER',gender::udd_code,_lang_code)  as gender_desc,
													   shg_member_relation_name as fathers_husband_name,
													   coalesce(member_phone,'0') as mobile_no,
													   '' as email_id,
													   state_code,
													   fn_get_statedesc(state_code) as state_desc,
													   district_code,
													   fn_get_districtdesc(district_code) as district_desc,
													   block_code,
													   fn_get_blockdesc(block_code) as block_desc,
													   panchayat_code,
													   fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
													   village_code,
													   fn_get_villagedesc(village_code) as village_desc,
													   '' as vertical_code,
													   '' as vertical_desc,
													   '' as subvertical_code,
													   '' as subvertical_desc
												from   shgmember_profileconsolidated_view
												where  shg_member_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
-- 												and    shg_name ilike '%'||_shg_name||'%' collate pg_catalog.""default""
												and    shg_member_id::udd_code not in (select participant_id from trng_trn_ttprogramparticipant
																			 where participant_type_code = 'QCD_INTERNAL'
																			 and participant_subtype_code = 'QCD_INT_LOKOS'
																			 and tprogram_id = _tprogram_id
																			 and tprogrambatch_id = _tprogrambatch_id	
																			 and batch_date = _batch_date
																			 and status_code = 'A')
												and    state_id    = v_state_id 
												and    district_id =
												case 
													when    v_district_id isnull or v_district_id = 0  then 
															coalesce(district_id,v_district_id)
													else 
															coalesce(v_district_id,district_id) 
												end 
												and    block_id =
												case 
													when    v_block_id isnull or v_block_id = 0  then 
															coalesce(block_id,v_block_id)
													else 
															coalesce(v_block_id,block_id) 
												end 
												and    panchayat_id =
												case 
													when    v_panchayat_id isnull or v_panchayat_id = 0  then 
															coalesce(panchayat_id,v_panchayat_id)
													else 
															coalesce(v_panchayat_id,panchayat_id) 
												end 
												and    village_id =
												case 
													when    v_village_id isnull or v_village_id = 0  then 
															coalesce(village_id,v_village_id)
													else 
															coalesce(v_village_id,village_id) 
												end
												and  shg_code =
												case
													when _shg_name isnull or _shg_name  = '' then
															coalesce(shg_code,_shg_name)
													else 
															coalesce(_shg_name,shg_code)
												end;
-- 												limit 100;
		end if;
	end if;
--Lokos

-- SHG CLF/VO
		if _intuser_type_code = 'QCD_SHG_CLF_VO' then
			if _state_code = '' then
				_state_code := null;
			end if;
			
			if _district_code = '' then
				_district_code := null;
			end if;
			
			if _block_code = '' then
				_block_code := null;
			end if;
			
			open _result_batchparticipantlst for select
													  'SHG CLF/VO' as source_from,
													   coalesce(shg_member_id :: udd_code, '') as participant_id,
	-- 												   shg_member_id  as participant_id,
													   shg_member_name as participant_name,
													   shg_id,
													   shg_name,
													   -- fn_get_shgname(a.shg_id) as shg_name,
													   gender::udd_code as gender_code,
													   fn_get_masterdesc('QCD_GENDER',gender::udd_code,_lang_code)  as gender_desc,
													   shg_member_relation_name as fathers_husband_name,
													   coalesce(member_phone,'0') as mobile_no,
													   '' as email_id,
													   state_code,
													   fn_get_statedesc(state_code) as state_desc,
													   district_code,
													   fn_get_districtdesc(district_code) as district_desc,
													   block_code,
													   fn_get_blockdesc(block_code) as block_desc,
													   panchayat_code,
													   fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
													   village_code,
													   fn_get_villagedesc(village_code) as village_desc ,
													   vo_cbo_code,
													   vo_name,
													   clf_cbo_code,
													   clf_name,
													   '' as vertical_code,
													   '' as vertical_desc,
													   '' as subvertical_code,
													   '' as subvertical_desc
								     			 from  shgmember_profileconsolidated_view
													where    shg_member_id::udd_code not in (select participant_id from trng_trn_ttprogramparticipant
																			 where participant_type_code = 'QCD_INTERNAL'
																			 and participant_subtype_code = 'QCD_SHG_CLF_VO'
																			 and tprogram_id = _tprogram_id
																			 and tprogrambatch_id = _tprogrambatch_id	
																			 and batch_date = _batch_date
																			 and status_code = 'A')
													and    shg_member_name ilike '%'|| _participant_name||'%' collate pg_catalog.""default""
													and    state_code = 
													case 
													when    _state_code isnull or _state_code = ''  then 
															coalesce(state_code,_state_code)
													else 
															coalesce(_state_code,state_code) 
													end
													and    district_code = 
													case 
													when    _district_code isnull or _district_code = ''  then 
															coalesce(district_code,_district_code)
													else 
															coalesce(_district_code,district_code) 
													end
													and    block_code = 
													case 
													when    _block_code isnull or _block_code = ''  then 
															coalesce(block_code,_block_code)
													else 
															coalesce(_block_code,block_code) 
													end
													and  clf_cbo_code =
													case
														when _clf_cbo_code isnull or _clf_cbo_code  = '' then
																coalesce(clf_cbo_code,_clf_cbo_code)
														else 
																coalesce(_clf_cbo_code,clf_cbo_code)
													end
													and  vo_cbo_code =
													case
														when _vo_cbo_code isnull or _vo_cbo_code  = '' then
																coalesce(vo_cbo_code,_vo_cbo_code)
														else 
																coalesce(_vo_cbo_code,vo_cbo_code)
													end
													and  shg_code =
													case
														when _shg_name isnull or _shg_name  = '' then
																coalesce(shg_code,_shg_name)
														else 
																coalesce(_shg_name,shg_code)
													end;
-- 													or shg_id notnull
-- 													limit 100;
		end if;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogmparticipantlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _participant_type_code udd_code, _participant_subtype_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogmpartlist refcursor DEFAULT 'rs_tprogmpartlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mangai
		Created Date : 19-10-2022
		
		Updated By   : Mangai
		Updated Date : 11-04-2023
		
		SP Code : B07TMPG02
		Version No : 12
	*/
	v_config_value udd_desc := '';
begin

	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body 
	if _participant_type_code = 'QCD_INTERNAL' and _participant_subtype_code = 'QCD_INT_CADRE' then
		open _result_tprogmpartlist for select 	
												tprogramparticipant_gid,
												tprogram_id,
												tprogrambatch_id,
												to_char(batch_date, v_config_value) as batch_date,
												coalesce(batch_date ::udd_code,'') as org_batch_date,
												participant_type_code,
												fn_get_masterdesc('QCD_PRT_TYPE', participant_type_code, _lang_code) as participant_type_desc,
												participant_subtype_code,
												fn_get_masterdesc('QCD_PRT_SUBTYPE', participant_subtype_code, _lang_code) as participant_subtype_desc,
												participant_id,
												participant_name,
												participant_ll_name,
												coalesce(fatherhusband_name,'') as fatherhusband_name,
												coalesce(fatherhusband_ll_name,'') as fatherhusband_ll_name,
												fn_get_shgname(participant_id,_participant_subtype_code) as shg_name,
												coalesce(fn_get_cadreresourcetypecode(participant_id),'') as cadre_resourcetype_code,
-- 												coalesce(fn_get_masterdesc('QCD_RESOURCE_TYPE',cadre_resourcetype_code,_lang_code),'') as cadre_resourcetype_desc,
												coalesce(fn_get_cadreresourcetypedesc(participant_id,_lang_code),'') as cadre_resourcetype_desc,
												coalesce(fn_get_cadrerolecode(participant_id),'') as cadre_role_code,
												coalesce(fn_get_masterdesc('QCD_ROLE',fn_get_cadrerolecode(participant_id),_lang_code),'') as cadre_role_desc,
												coalesce(fn_get_cadreverticalcode(participant_id),'') as vertical_code,
												coalesce(fn_get_masterdesc('QCD_VERTICAL',fn_get_cadreverticalcode(participant_id),_lang_code),'') as vertical_desc,
												coalesce(fn_get_cadresubverticalcode(participant_id),'') as subvertical_code,
												coalesce(fn_get_masterdesc('QCD_VERTICAL',fn_get_cadresubverticalcode(participant_id),_lang_code),'') as subvertical_desc,
												shg_id,
-- 												case when mobile_no = '0' or mobile_no isnull then
-- 													''
-- 												else
-- 													mobile_no
-- 												end as mobile_no,
												mobile_no,
												email_id,
												0 as external_count,
												gender_code,
												fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code) as gender_desc,
												attendance_flag,
												fn_get_masterdesc('QCD_ATTENDANCE', attendance_flag, _lang_code) as attendance_flag_desc,
												status_code,
												fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc
												from trng_trn_ttprogramparticipant
												where tprogram_id = _tprogram_id
												and   tprogrambatch_id = _tprogrambatch_id
												and   batch_date = _batch_date 
												and   participant_type_code = _participant_type_code
												and   participant_subtype_code = _participant_subtype_code
												and   status_code = 'A';
												
	elseif _participant_type_code = 'QCD_INTERNAL' and _participant_subtype_code = 'QCD_INT_LOKOS' then
		open _result_tprogmpartlist for select 	
												tprogramparticipant_gid,
												tprogram_id,
												tprogrambatch_id,
												to_char(batch_date, v_config_value) as batch_date,
												coalesce(batch_date ::udd_code,'') as org_batch_date,
												participant_type_code,
												fn_get_masterdesc('QCD_PRT_TYPE', participant_type_code, _lang_code) as participant_type_desc,
												participant_subtype_code,
												fn_get_masterdesc('QCD_PRT_SUBTYPE', participant_subtype_code, _lang_code) as participant_subtype_desc,
												participant_id,
												participant_name,
												participant_ll_name,
												coalesce(fatherhusband_name,'') as fatherhusband_name,
												coalesce(fatherhusband_ll_name,'') as fatherhusband_ll_name,
												fn_get_shgname(participant_id,_participant_subtype_code) as shg_name,
												coalesce(fn_get_cadreresourcetypecode(participant_id),'') as cadre_resourcetype_code,
-- 												coalesce(fn_get_masterdesc('QCD_RESOURCE_TYPE',cadre_resourcetype_code,_lang_code),'') as cadre_resourcetype_desc,
												coalesce(fn_get_cadreresourcetypedesc(participant_id,_lang_code),'') as cadre_resourcetype_desc,
												'' as cadre_role_code,
												'' as cadre_role_desc,
												shg_id,
-- 												case when mobile_no = '0' or mobile_no isnull then
-- 													''
-- 												else
-- 													mobile_no
-- 												end as mobile_no,
												mobile_no,
												email_id,
												0 as external_count,
												gender_code,
												fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code) as gender_desc,
												attendance_flag,
												fn_get_masterdesc('QCD_ATTENDANCE', attendance_flag, _lang_code) as attendance_flag_desc,
												status_code,
												fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
												'' as vertical_code,
											    '' as vertical_desc,
											    '' as subvertical_code,
											    '' as subvertical_desc
												from trng_trn_ttprogramparticipant
												where tprogram_id = _tprogram_id
												and   tprogrambatch_id = _tprogrambatch_id
												and   batch_date = _batch_date 
												and   participant_type_code = _participant_type_code
												and   participant_subtype_code in ('QCD_INT_LOKOS','QCD_SHG_CLF_VO')
												and   status_code = 'A';
												
	elseif _participant_type_code = 'QCD_EXTERNAL' then
		open _result_tprogmpartlist for select 	
												tprogramparticipant_gid,
												tprogram_id,
												tprogrambatch_id,
												to_char(batch_date, v_config_value) as batch_date,
												coalesce(batch_date ::udd_code,'') as org_batch_date,
												participant_type_code,
												fn_get_masterdesc('QCD_PRT_TYPE', participant_type_code, _lang_code) as participant_type_desc,
												participant_subtype_code,
												fn_get_masterdesc('QCD_PRT_SUBTYPE', participant_subtype_code, _lang_code) as participant_subtype_desc,
												participant_id,
												participant_name,
												participant_ll_name,
												coalesce(fatherhusband_name,'') as fatherhusband_name,
												coalesce(fatherhusband_ll_name,'') as fatherhusband_ll_name,
												shg_id,
												coalesce(fn_get_shgname(participant_id,_participant_subtype_code),'') as shg_name,
												coalesce(fn_get_cadreresourcetypecode(participant_id),'') as cadre_resourcetype_code,
												coalesce(fn_get_cadreresourcetypedesc(participant_id,_lang_code),'') as cadre_resourcetype_desc,
												'' as cadre_role_code,
												'' as cadre_role_desc,
-- 												case when mobile_no = '0' or mobile_no isnull then
-- 													''
-- 												else
-- 													mobile_no
-- 												end as mobile_no,
												mobile_no,
												email_id,
												gender_code,
												fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code) as gender_desc,
												attendance_flag,
												fn_get_masterdesc('QCD_ATTENDANCE', attendance_flag, _lang_code) as attendance_flag_desc,
												status_code,
												fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
												'' as vertical_code,
											    '' as vertical_desc,
											    '' as subvertical_code,
											    '' as subvertical_desc
												from trng_trn_ttprogramparticipant
												where tprogram_id = _tprogram_id
												and   tprogrambatch_id = _tprogrambatch_id
												and   batch_date = _batch_date 
												and   participant_type_code = _participant_type_code
												and   participant_subtype_code = 'QCD_EXTERNAL'
												and   status_code = 'A';
	elseif((_participant_type_code = '' or _participant_type_code isnull) and
		  	(_participant_subtype_code = '' or _participant_subtype_code isnull)) then
		open _result_tprogmpartlist for select 	
												tprogramparticipant_gid,
												tprogram_id,
												tprogrambatch_id,
												to_char(batch_date, v_config_value) as batch_date,
												coalesce(batch_date ::udd_code,'') as org_batch_date,
												participant_type_code,
												fn_get_masterdesc('QCD_PRT_TYPE', participant_type_code, _lang_code) as participant_type_desc,
												participant_subtype_code,
												fn_get_masterdesc('QCD_PRT_SUBTYPE', participant_subtype_code, _lang_code) as participant_subtype_desc,
												participant_id,
												participant_name,
												participant_ll_name,
												coalesce(fatherhusband_name,'') as fatherhusband_name,
												coalesce(fatherhusband_ll_name,'') as fatherhusband_ll_name,
-- 												coalesce(shg_id::udd_bigint,0) as shg_id,
-- 												fn_get_shgname(shg_id::bigint) as shg_name,
												shg_id,
												coalesce(fn_get_shgname(participant_id,participant_subtype_code),'') as shg_name,
												coalesce(fn_get_cadreresourcetypecode(participant_id),'') as cadre_resourcetype_code,
												coalesce(fn_get_cadreresourcetypedesc(participant_id,_lang_code),'') as cadre_resourcetype_desc,
												'' as cadre_role_code,
												'' as cadre_role_desc,
-- 												case when mobile_no = '0' or mobile_no isnull then
-- 													''
-- 												else
-- 													mobile_no
-- 												end as mobile_no,
												mobile_no,
												email_id,
												gender_code,
												case when gender_code in ('M','F') then
														fn_get_masterdesc('QCD_C_GENDER', gender_code, _lang_code)
													 else
													 	fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code)
												end as gender_desc,
												attendance_flag,
												fn_get_masterdesc('QCD_ATTENDANCE', attendance_flag, _lang_code) as attendance_flag_desc,
												status_code,
												fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc
												from trng_trn_ttprogramparticipant
												where tprogram_id = _tprogram_id
												and   tprogrambatch_id = _tprogrambatch_id
												and   batch_date = _batch_date 
												and   status_code = 'A'
												order by attendance_flag desc;
-- 												updated_date desc;
	end if;
									    
										
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogmparticipantlist_web(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogmpartlist refcursor DEFAULT 'rs_tprogmpartlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mangai
		Created Date : 21-02-2023
		
		Updated By : Mangai
		Updated Date : 11-04-2023
		
		SP Code : B07TMPG03
		Version No : 04
	*/
	v_config_value udd_desc := '';
begin

	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- stored procedure body
	open _result_tprogmpartlist for select 	
												tprogramparticipant_gid,
												tprogram_id,
												tprogrambatch_id,
												to_char(batch_date, v_config_value) as batch_date,
												coalesce(batch_date ::udd_code,'') as org_batch_date,
												participant_type_code,
												fn_get_masterdesc('QCD_PRT_TYPE', participant_type_code, _lang_code) as participant_type_desc,
												participant_subtype_code,
												fn_get_masterdesc('QCD_PRT_SUBTYPE', participant_subtype_code, _lang_code) as participant_subtype_desc,
												participant_id,
												participant_name,
												participant_ll_name,
												coalesce(fatherhusband_name,'') as fatherhusband_name,
												coalesce(fatherhusband_ll_name,'') as fatherhusband_ll_name,
-- 												coalesce(shg_id::udd_bigint,0) as shg_id,
-- 												fn_get_shgname(shg_id::bigint) as shg_name,
												shg_id,
												coalesce(fn_get_shgname(participant_id,participant_subtype_code),'') as shg_name,
												coalesce(fn_get_cadreresourcetypecode(participant_id),'') as cadre_resourcetype_code,
												coalesce(fn_get_cadreresourcetypedesc(participant_id,_lang_code),'') as cadre_resourcetype_desc,
-- 												case when mobile_no = '0' or mobile_no isnull then
-- 													''
-- 												else
-- 													mobile_no
-- 												end as mobile_no,
												mobile_no,
												email_id,
												gender_code,
-- 												case when gender_code in ('M','F') then
-- 														fn_get_masterdesc('QCD_C_GENDER', gender_code, _lang_code)
-- 													 else
-- 													 	fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code)
-- 												end as gender_desc,
												fn_get_masterdesc('QCD_GENDER', gender_code, _lang_code) as gender_desc,
												attendance_flag,
												fn_get_masterdesc('QCD_ATTENDANCE', attendance_flag, _lang_code) as attendance_flag_desc,
												status_code,
												fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc
												from trng_trn_ttprogramparticipant
												where tprogram_id = _tprogram_id
												and   tprogrambatch_id = _tprogrambatch_id
												and   batch_date = _batch_date 
												and   status_code = 'A'
												order by attendance_flag desc;								
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogmtrainerlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogarmdetail refcursor DEFAULT 'rs_tprogarmdetail'::refcursor, INOUT _result_tprogmtrainerlist refcursor DEFAULT 'rs_tprogmtrainerlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Chinnasamy
		Created Date : 24-11-2022
		
		Updated By   : Mangai
		Updated Date : 14-02-2023
		
		SP Code : B07PTRG01
		Version No : 07
	*/
	    v_config_value udd_desc := '';

begin	
	-- stored procedure body
	--Map Trainer Header 
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	open _result_tprogarmdetail for select
										tp.tprogram_name,
										tp.tprogram_ll_name,
										tp.tprogram_level_code,
										fn_get_masterdesc('QCD_TRAINER_LEVEL',tp.tprogram_level_code,_lang_code) as tprogram_level_desc,
										tb.batch_name,
										tb.batch_ll_name,
										tb.lang_code,
										fn_get_languagedesc(tb.lang_code) as language_desc,
										coalesce(tb.start_date::udd_text,'') as org_start_date,
										coalesce(tb.end_date::udd_text,'') as org_end_date,
										coalesce(to_char(tb.start_date,v_config_value)::udd_text,'') as start_date,
										coalesce(to_char(tb.end_date,v_config_value)::udd_text,'') as end_date,
										tb.no_of_days
							from 		trng_trn_ttprogram as tp
							inner join  trng_trn_ttprogrambatch as tb
							on 			tp.tprogram_id = tb.tprogram_id
							and         tb.status_code <> 'I'
							where 		tb.tprogram_id = _tprogram_id
							and 		tb.tprogrambatch_id = _tprogrambatch_id
							and 		tp.status_code <> 'I';
											
	--Map Trainerlist										
	open _result_tprogmtrainerlist for select 
													t.trainer_name,
													t.trainer_ll_name,
-- 													t.trainer_type_code,
-- 													fn_get_masterdesc('QCD_TRAINER_TYPE',t.trainer_type_code,_lang_code) as trainer_type_desc,
													t.email_id,
													t.mobile_no,
													t.trainer_level_code,
													fn_get_masterdesc('QCD_TRAINER_LEVEL',t.trainer_level_code,_lang_code) as trainer_level_desc,
-- 													torg.trngorg_name,
-- 													torg.trngorg_ll_name,
													case when fn_get_trainingorgname(pt.trngorg_id) <> '' 
														 then 
														 		fn_get_trainingorgname(pt.trngorg_id)
														 else 
														 		'-' 
														 end as trngorg_name,
													pt.tprogramtrainer_gid,
													pt.tprogram_id,
													pt.tprogrambatch_id,
													pt.org_type_code,
													fn_get_masterdesc('QCD_ORG_TYPE',pt.org_type_code,_lang_code) as org_type_desc,
													pt.trngorg_id,
													pt.trainer_id,
													pt.trainer_type_code,
													fn_get_masterdesc('QCD_TRAINER_TYPE',pt.trainer_type_code,_lang_code) as trainer_type_desc,
													pt.trainer_flag,
													fn_get_masterdesc('QCD_YES_NO',pt.trainer_flag,_lang_code) as trainer_flag_desc,
													pt.confirmation_flag,
													fn_get_masterdesc('QCD_YES_NO',pt.confirmation_flag,_lang_code) as confirmation_flag_desc,
													pt.status_code,
													fn_get_masterdesc('QCD_STATUS',pt.status_code,_lang_code) as status_desc,
													t.gender_code,
													fn_get_masterdesc('QCD_GENDER',t.gender_code,_lang_code) as gender_desc
										from        trng_trn_ttprogramtrainer as pt
										inner join  trng_mst_ttrainer as t
										on          pt.trainer_id = t.trainer_id
										and         t.status_code <> 'I'
-- 										inner join  trng_mst_ttrainingorg as torg
-- 										on          t.trngorg_id = torg.trngorg_id
										where       pt.tprogram_id = _tprogram_id
										and         pt.tprogrambatch_id = _tprogrambatch_id
										and         pt.status_code <> 'I'
										order by 	pt.confirmation_flag desc,pt.updated_date desc;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogrambatchlist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tprogrambatchlist refcursor DEFAULT 'rs_tprogrambatchlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mohan S
		Created Date : 15-10-2022
		SP Code : B07TBAG01
	*/
begin
	
	-- stored procedure body
	open _result_tprogrambatchlist for select 	
									  		tprogram_id,
											tprogrambatch_id,
											batch_date,
											batch_count
											from trng_trn_ttprogrambatchcount
											where tprogram_id = _tprogram_id
											and   tprogrambatch_id = _tprogrambatch_id
											and   batch_date = _batch_date - Interval '1 day'
											and   status_code = 'A';
				 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogramlevel(_course_id udd_code, _user_level_code udd_code, _user_code udd_user, _lang_code udd_code, _role_code udd_code, INOUT _result_tprogramlist refcursor DEFAULT 'rs_tprogramlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By   : Mohan S
		Created Date : 22-11-2022
		
		SP Code : B04COUG03
		Version No   : 01
	*/
	
begin
	
	-- stored procedure body
	open _result_tprogramlist for select 
									course_level,
									fn_get_masterdesc('QCD_LEVEL', course_level, _lang_code) as course_level_desc
								  from trng_mst_vcourselevel
								  where course_id = _course_id
								  and course_level <= _user_level_code
							      order by course_level desc;
											
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_tprogramstatus(_parent_code udd_code, _lang_code udd_code, INOUT _result_tprogramstatus refcursor DEFAULT 'rs_tprogramstatus'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare 
	/*
		Created By   : Mohan S
		Created Date : 14-12-2022
		
		Updated By 	 : Mangai
		Updated Date : 24-03-2023
		
		SP Code 	: B07PRGG02
		Version No  : 3
	*/
begin
		open _result_tprogramstatus for  select 		
											b.master_code as master_code,
											b.master_desc as master_desc,
											a.rec_slno
									from 		core_mst_tmaster as a 
									inner join 	core_mst_tmastertranslate as b 
									on 			a.parent_code = b.parent_code 
									and 		a.master_code = b.master_code 
									where 		a.parent_code = _parent_code 
									and 		b.lang_code = _lang_code
									and 		a.master_code in ('S','B','R','I','D','H','P','C','L','O')
-- 									and 		a.master_code in ('S','P','C','L')
									and 		a.status_code = 'A'
									order by a.rec_slno;

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainergroup(_trngorg_name udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _trngorg_level_code udd_code, _screen_mode udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainergroup refcursor DEFAULT 'rs_trainergroup'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 02-10-2022
		
		Updated By 		: Mangai
		Updated Date 	: 24-03-2022
		
		SP Code 		: B05TGRG02
		version no 		: 06
	*/
	v_status_code udd_desc := '';
	vsql udd_text := '';
begin
	-- set default values
	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;
	
	if _screen_mode = 'modify' then
		v_status_code := 'and status_code = ''A'' ';
	else 
		v_status_code := '';
	end if;
	
	if _subvertical_jsonb = '[{}]' then
		
		drop table if exists trng_tmp_ttrainingorgsubvertical;
		
		-- create temporary table 
		vsql = 'create temporary table trng_tmp_ttrainingorgsubvertical as 
			select 	distinct a.trngorg_id
			from 	trng_mst_vtrainingorgsubvertical_v1 a ,
			jsonb_to_recordset(subvertical_jsonb::udd_jsonb) b(subvertical udd_text) 
			where   1=1 ' || v_status_code;
			
		if _trngorg_name <> '' then
			vsql = vsql || ' and a.trngorg_name ilike''' || _trngorg_name || '%''collate 
			pg_catalog.""default""';
		end if;
		
		if _vertical_code <> '' then
			vsql = vsql || ' and a.vertical_code = ''' || _vertical_code || '''';
		end if;
		
		if _subvertical_jsonb <> '[{}]' then
			vsql = vsql || 
				'and     b.subvertical in 
				(
					select bb.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as bb (subvertical udd_code)
				)';
		end if;
		
		if _trngorg_level_code <> '' then
			vsql = vsql || ' and a.trngorg_level_code = ''' || _trngorg_level_code || '''';
		end if;
		
		-- execute the query variable vsql
		execute vsql;
		
		-- stored procedure body 
		open _result_trainergroup for select distinct
											a.trngorg_id,
											trngorg_name as group_name,
											trngorg_ll_name as group_ll_name,
											trngorg_level_code,
											fn_get_masterdesc('QCD_ORG_LEVEL',trngorg_level_code,_lang_code) as trngorg_level_desc,
											vertical_code,
											fn_get_masterdesc('QCD_VERTICAL' ,vertical_code, _lang_code) as vertical_desc,
											fn_get_trngorgsubvertical(a.trngorg_id,_lang_code) as subvertical,
											status_code,
											fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
								from 		trng_mst_vtrainingorgsubvertical_v1 as a
								inner join  trng_tmp_ttrainingorgsubvertical as tmp
								on          a.trngorg_id = tmp.trngorg_id
								where  		trngorg_type_code = 'QCD_GROUP'
-- 								and         a.created_by = _user_code
								order by    a.trngorg_id desc;
	else
		drop table if exists trng_tmp_ttrainingorgsubvertical;
		
		-- create temporary table 
		vsql = 'create temporary table trng_tmp_ttrainingorgsubvertical as 
			select 	a.trngorg_id
			from 	trng_mst_vtrainingorgsubvertical_v1 a ,
			jsonb_to_recordset(subvertical_jsonb::udd_jsonb) b(subvertical udd_text) 
			where   1=1 ' || v_status_code;
			
		if _trngorg_name <> '' then
			vsql = vsql || ' and a.trngorg_name ilike''' || '%' || _trngorg_name || '%''collate 
			pg_catalog.""default""';
		end if;
		
		if _vertical_code <> '' then
			vsql = vsql || ' and a.vertical_code = ''' || _vertical_code || '''';
		end if;
		
		if _subvertical_jsonb <> '[{}]' then
			vsql = vsql || 
				'and     b.subvertical in 
				(
					select bb.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as bb (subvertical udd_code)
				)';
		end if;
		
		if _trngorg_level_code <> '' then
			vsql = vsql || ' and a.trngorg_level_code = ''' || _trngorg_level_code || '''';
		end if;
		
		-- execute the query variable vsql
		execute vsql;
		
		open _result_trainergroup for select distinct
											a.trngorg_id,
											trngorg_name as group_name,
											trngorg_ll_name as group_ll_name,
											trngorg_level_code,
											fn_get_masterdesc('QCD_ORG_LEVEL', trngorg_level_code, _lang_code) as trngorg_level_desc,
											vertical_code,
											fn_get_masterdesc('QCD_ORG_LEVEL', trngorg_level_code, _lang_code) as trngorg_level_desc,
-- 											subvertical_jsonb,
											fn_get_trngorgsubvertical(a.trngorg_id, _lang_code) as subvertical,
											status_code,
										    fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
								from        trng_mst_vtrainingorgsubvertical_v1 as a
								inner join  trng_tmp_ttrainingorgsubvertical as tmp 
								on          a.trngorg_id = tmp.trngorg_id
								where 		trngorg_type_code = 'QCD_GROUP'
								and   		subvertical_code in (select fn_get_subvertical_code(_subvertical_jsonb))
-- 								and         created_by = _user_code
								order by 	a.trngorg_id desc;

	end if;				
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainergrouplist(_trngorg_id udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _trainer_level_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainergroup refcursor DEFAULT 'rs_trainergrouplst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 01-10-2022
		
		Updated By 		: Mangai
		Updated Date 	: 28-03-2022
		
		SP Code 		: B05TGRG01
		version no 		: 05
	*/
begin
	-- stored procedure body 
	if _subvertical_jsonb = '[{}]' or _subvertical_jsonb isnull then
		open _result_trainergroup for select distinct
												trainer_id,
												trainer_name,
												fn_get_trainergroupname(trainer_id,_lang_code) as group_name,
												vertical_code,
-- 												subvertical
												subvertical_code
-- 												status_code,
-- 												fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
											from   trng_mst_vtrainersubvertical
											where  trngorg_type_code = 'QCD_INTERNAL' 
											and    vertical_code = _vertical_code 
											and    trainer_level_code::udd_int <= '99'::udd_int 
											and    trainer_id not in (select fn_get_grouptrainerid (_trngorg_id))
											and    status_code = 'A';
	else
	open _result_trainergroup for select distinct
												trainer_id,
												trainer_name,
												fn_get_trainergroupname(trainer_id,_lang_code) as group_name,
												vertical_code,
-- 												subvertical
												subvertical_code,
												fn_get_masterdesc('QCD_SUBVERTICAL',subvertical_code,_lang_code) as subvertical_desc
-- 												status_code,
-- 												fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
											from  trng_mst_vtrainersubvertical
											where trngorg_type_code = 'QCD_INTERNAL' 
											and   vertical_code = _vertical_code
											and   trainer_level_code::udd_int <= '99'::udd_int 
											and   subvertical_code in (select fn_get_subvertical_code(_subvertical_jsonb))
											and   trainer_id not in (select fn_get_grouptrainerid (_trngorg_id))
											and   status_code = 'A';

	end if;				
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainergroupnamelist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _vertical_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainergrpname refcursor DEFAULT 'rs_trainergrpnamelst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-10-2022
		
		Updated By		: Mohan S
		Updated Date    : 13-02-2023
		
		SP Code 		: B05TGRG01
		version no 		: 05
	*/
	v_uservertical udd_code := '';
begin

-- 	v_uservertical := (select fn_get_userverticalcode(_user_code));
	-- stored procedure body
	open _result_trainergrpname for  select  distinct
											 tor.trngorg_id,
											 tor.trngorg_name as group_name,
											 tordo.vertical_code
								  from       trng_mst_ttrainingorg as tor
								  inner JOIN  trng_mst_ttrainingorgdomain tordo 
								  ON         tor.trngorg_id= tordo.trngorg_id 
								  and 		 tordo.status_code = 'A'
								  inner join trng_mst_ttrainergroup as tg
								  on         tor.trngorg_id= tg.trngorg_id  
								  and        tg.status_code = 'A'
								  and        tg.trainer_id not in (  select trainer_id from trng_trn_ttprogramtrainer
																	 where tprogram_id = _tprogram_id
																	 and tprogrambatch_id = _tprogrambatch_id
																	 and status_code = 'A')
								  where 	tordo.vertical_code = _vertical_code
								  and   	tor.trngorg_type_code = 'QCD_GROUP' 
								  and 		tor.status_code = 'A';	
								  /*select 	 distinct
											 tor.trngorg_id,
											 tor.trngorg_name as group_name
								  from       trng_mst_ttrainingorg as tor
								  left JOIN  trng_mst_ttrainingorgdomain tordo 
								  ON         tor.trngorg_id= tordo.trngorg_id 
								  inner join trng_mst_ttrainer as t
								  on         tor.trngorg_id= t.trngorg_id  
								  AND        t.status_code = 'A'
								  where 	tordo.vertical_code = v_uservertical
								  and   	tor.trngorg_type_code = 'QCD_GROUP' 
								  and 		tor.status_code = 'A';	*/						  
									  
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainerleavelist(_trainer_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainerleavelist refcursor DEFAULT 'rs_trainerleavelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mangai
		Created Date 	: 26-09-2022
		
		Updated By      : Mangai
		Updated Date    : 24-03-2022
		
		SP Code 		: B05TLECUD
		version code    : 04
	*/
	v_config_value udd_desc := '';
	v_user_level_code udd_desc := '';
begin
    	
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	select user_level_code into v_user_level_code
	from  core_mst_tuser 
	where user_code = _user_code
	and   status_code = 'A';
    
	-- stored procedure body
	open _result_trainerleavelist for select
												tl.trainerleave_gid,
												tl.trainer_id,
												to_char(tl.leave_date,v_config_value) as leave_date,
												tl.leave_date as org_leave_date,
												tl.leave_desc,
												tl.status_code
									 from  	    trng_mst_ttrainer as t
									 inner join trng_trn_ttrainerleave as tl
									 on         tl.trainer_id = t.trainer_id
									 and        tl.status_code = 'A'
									 where      tl.trainer_id = _trainer_id
									 and 		t.trngorg_type_code in ('QCD_INTERNAL','QCD_EXTERNAL')
									 and 		t.trainer_level_code::udd_int <= v_user_level_code::udd_int
									 and        t.status_code = 'A';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainerlist(_trainer_type_code udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _trainer_level_code udd_code, _resource_type_code udd_code, _trainer_name udd_desc, _screen_mode udd_code, _user_code udd_code, _user_level_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainer refcursor DEFAULT 'rs_trainerlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 19-09-2022
		
		Update By 	    : Mangai 
		Update Date 	: 27-03-2022
		
		SP Code 		: B04TRNG01
		Version No      : 5
	*/
	vsql udd_text := '';
    v_config_value udd_desc := '';
	v_status_code udd_desc := '';
	v_trainer_type_code udd_desc := '';
	
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
    
	-- set default values
	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;
	
	-- drop temporary table
	drop table if exists trng_tmp_ttrainersubvertical;
	drop table if exists trng_tmp_ttrainerid;
	
		
	if _screen_mode = 'modify' then
		v_status_code := 'and t.status_code = ''A'' ';
	else 
		v_status_code := '';
	end if;
	
	if _screen_mode = 'recordleave' then
		v_trainer_type_code := 'and t.trainer_type_code in (''QCD_EXTERNAL'',''QCD_INTERNAL'')';
	else
		v_trainer_type_code := '';
	end if;
	
	-- create temporary table for trainer_id
	vsql = 'create temporary table trng_tmp_ttrainerid as 
			select 	distinct t.trainer_id
			from 	trng_mst_ttrainer t ';
			
	if _vertical_code <> '' or _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 'inner join trng_mst_ttrainerdomain as td on t.trainer_id = td.trainer_id
			and td.status_code = ''A'',
			jsonb_to_recordset(subvertical_jsonb::udd_jsonb) b(subvertical udd_text) ';
	end if;
	
	vsql = vsql || ' where 1=1 ' || v_status_code || v_trainer_type_code;
	-- and t.status_code <> ''I'' (cmd by mohan because deactive record also wants to show instruction came from rajasekar on 03-11-2022)

	if _trainer_name <> '' then
		vsql = vsql || ' and t.trainer_name ilike ''' || _trainer_name || '%''collate pg_catalog.""default""';
	end if;
	
	if _trainer_type_code <> '' then
		vsql = vsql || ' and t.trainer_type_code = ''' || _trainer_type_code || '''';
	end if;
	
	if _vertical_code <> '' then
		vsql = vsql || ' and td.vertical_code = ''' || _vertical_code || '''';
	end if;
	
	if _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 
				'and     b.subvertical in 
				(
					select bb.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as bb (subvertical udd_code)
				)';
	end if;	
	
	if _trainer_level_code <> '' then
		vsql = vsql || ' and t.trainer_level_code = ''' || _trainer_level_code || '''';
	end if;
	
	if _resource_type_code <> '' then
		vsql  = vsql || ' and t.resource_type_code = ''' || _resource_type_code || '''';
	end if;
	
	-- execute the query variable vsql
	execute vsql;
		
	-- stored procedure body
	open _result_trainer for select
								t.trainer_gid,
								t.trainer_id,
								t.trngorg_id,
								t.trainer_name,
								t.trainer_ll_name,
								fn_get_trainersubvertical(t.trainer_id,_lang_code) as subvertical_jsonb_desc,
								t.mobile_no,
								t.email_id,
								t.trainer_type_code,
								fn_get_masterdesc('QCD_TRAINER_TYPE', t.trainer_type_code, _lang_code) as trainer_type_desc,
								coalesce(t.validity_from::udd_text,'') as org_validity_from,
								coalesce(t.validity_to::udd_text,'') as org_validity_to,
								coalesce(to_char(t.validity_from,v_config_value)::udd_text,'') as validity_from,
								coalesce(to_char(t.validity_to,v_config_value)::udd_text,'') as validity_to,
								coalesce(t.indefinite_flag,'') as indefinite_flag ,
								fn_get_trainervertical(t.trainer_id,_lang_code) as vertical_desc,
								t.trainer_level_code,
								fn_get_masterdesc('QCD_TRAINER_LEVEL', t.trainer_level_code, _lang_code) as trainer_level_desc,
								t.resource_type_code,
								fn_get_masterdesc('QCD_RESOURCE_TYPE', t.resource_type_code, _lang_code) as resource_type_desc,
								t.gender_code,
								t.trainer_qualification,
								fn_get_masterdesc('QCD_GENDER', t.gender_code, _lang_code) as gender_desc,
								t.status_code,
								fn_get_masterdesc('QCD_STATUS', t.status_code, _lang_code) as status_desc
								from trng_mst_ttrainer as t
								inner join trng_tmp_ttrainerid as ti on t.trainer_id = ti.trainer_id
								where trainer_level_code <= _user_level_code
-- 								and   fn_get_trainersubvertical(t.trainer_id,_lang_code) <> ''
								order by coalesce(t.updated_date,t.created_date) desc;
							
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainernamelist(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainername refcursor DEFAULT 'rs_trainernamelst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By   : Mohan S
		Created Date : 17-09-2022
		SP Code 	 : B04TRNG02
	*/
begin
	-- stored procedure body
	open _result_trainername for select 
									 trainer_id,
									 trainer_name
								 from trng_mst_ttrainer
								 where status_code <> 'I';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainingorglist(_trngorg_name udd_code, _mobile_no udd_mobile, _trngorg_level_code udd_code, _trngorg_type_code udd_code, _location udd_code, _vertical_code udd_code, _screen_mode udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainingorg refcursor DEFAULT 'rs_trainingorglst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 21-09-2022
		
		updated by 		:  Mohan S
		Updated Date 	:  09-03-2023
		
		SP Code 		: B05TORG01
		version by 		: 08
	*/
	v_user_level_code udd_code := '';
begin
	select user_level_code into v_user_level_code
	from core_mst_tuser 
	where user_code = _user_code
	and status_code = 'A';
	
	-- stored procedure body
	if _screen_mode <> 'view' or _screen_mode = '' then
		open _result_trainingorg for select 
										 tro.trngorg_id,
										 tro.trngorg_name,
										 tro.mobile_no,
										 tro.trngorg_level_code,
										 fn_get_masterdesc('QCD_ORG_LEVEL',tro.trngorg_level_code, _lang_code) as trngorg_level_desc,
										 tro.trngorg_type_code,
										 fn_get_masterdesc('QCD_ORG_TYPE',tro.trngorg_type_code, _lang_code) as trngorg_type_desc,
										 troa.village_code,
										 fn_get_villagedesc(troa.village_code) as village_desc,
										 troa.state_code,
										 fn_get_statedesc(troa.state_code) as state_desc,
										 troa.district_code,
										 fn_get_districtdesc(troa.district_code) as district_desc,
										 troa.block_code,
										 fn_get_blockdesc(troa.block_code) as block_desc,
										 '' as location_code,
										 trod.vertical_code,
										 fn_get_masterdesc('QCD_VERTICAL',trod.vertical_code,_lang_code) as vertical_desc,
										 tro.status_code,
										 fn_get_masterdesc('QCD_STATUS',tro.status_code,_lang_code) as status_desc
-- 										 tro.created_by
									from trng_mst_ttrainingorg as tro
									left join trng_mst_ttrainingorgaddr as troa 
									on tro.trngorg_id = troa.trngorg_id
									and troa.status_code <> 'I'
									inner join trng_mst_ttrainingorgdomain as trod
									on tro.trngorg_id = trod.trngorg_id
									and trod.status_code <> 'I'
									and tro.status_code  = 'A'
									where tro.trngorg_name  ilike _trngorg_name||'%' collate pg_catalog.""default"" 
-- 									and   tro.created_by = _user_code
									and   tro.trngorg_type_code = _trngorg_type_code
									and   trod.vertical_code = _vertical_code
									and   tro.trngorg_level_code::udd_int <= v_user_level_code::udd_int
									and   tro.mobile_no = 
									case 
										when _mobile_no isnull or _mobile_no = ''  then 
											coalesce(tro.mobile_no,_mobile_no)
										else 
											coalesce(_mobile_no,tro.mobile_no) 
									end 
									and   tro.trngorg_level_code = 
									case 
										when _trngorg_level_code isnull or _trngorg_level_code = ''  then 
											coalesce(tro.trngorg_level_code,_trngorg_level_code)
										else 
											coalesce(_trngorg_level_code,tro.trngorg_level_code) 
									end 
									and   coalesce(troa.block_code,'') = 
									case 
										when _location isnull or _location = ''  then 
											coalesce(troa.block_code,_location)
										else 
											coalesce(_location,troa.block_code) 
									end
									group by tro.trngorg_id,tro.trngorg_name,tro.mobile_no,tro.trngorg_level_code,
											 tro.trngorg_type_code,troa.village_code,troa.state_code,troa.district_code,
											 troa.block_code,location_code,trod.vertical_code,tro.status_code,
											 tro.updated_date,tro.created_date,tro.created_by
									order by coalesce(tro.updated_date,tro.created_date) desc;
	elseif _screen_mode = 'view' then
		open _result_trainingorg for select 
										 tro.trngorg_id,
										 tro.trngorg_name,
										 tro.mobile_no,
										 tro.trngorg_level_code,
										 fn_get_masterdesc('QCD_ORG_LEVEL',tro.trngorg_level_code, _lang_code) as trngorg_level_desc,
										 tro.trngorg_type_code,
										 fn_get_masterdesc('QCD_ORG_TYPE',tro.trngorg_type_code, _lang_code) as trngorg_type_desc,
										 troa.village_code,
										 fn_get_villagedesc(troa.village_code) as village_desc,
										 troa.state_code,
										 fn_get_statedesc(troa.state_code) as state_desc,
										 troa.district_code,
										 fn_get_districtdesc(troa.district_code) as district_desc,
										 troa.block_code,
										 fn_get_blockdesc(troa.block_code) as block_desc,
										 '' as location_code,
										 trod.vertical_code,
										 fn_get_masterdesc('QCD_VERTICAL',trod.vertical_code,_lang_code) as vertical_desc,
										 tro.status_code,
										 fn_get_masterdesc('QCD_STATUS',tro.status_code,_lang_code) as status_desc
-- 										 tro.created_by
									from trng_mst_ttrainingorg as tro
									left join trng_mst_ttrainingorgaddr as troa 
									on tro.trngorg_id = troa.trngorg_id
									and troa.status_code <> 'I'
									inner join trng_mst_ttrainingorgdomain as trod
									on tro.trngorg_id = trod.trngorg_id
									and trod.status_code <> 'I'
									where tro.trngorg_name  ilike _trngorg_name||'%' collate pg_catalog.""default"" 
-- 									and   tro.created_by = _user_code
									and   tro.trngorg_type_code = _trngorg_type_code
									and   trod.vertical_code = _vertical_code
									and   tro.trngorg_level_code::udd_int <= v_user_level_code::udd_int
									and   tro.mobile_no = 
									case 
										when _mobile_no isnull or _mobile_no = ''  then 
											coalesce(tro.mobile_no,_mobile_no)
										else 
											coalesce(_mobile_no,tro.mobile_no) 
									end 
									and   tro.trngorg_level_code = 
									case 
										when _trngorg_level_code isnull or _trngorg_level_code = ''  then 
											coalesce(tro.trngorg_level_code,_trngorg_level_code)
										else 
											coalesce(_trngorg_level_code,tro.trngorg_level_code) 
									end 
									and   coalesce(troa.block_code,'') = 
									case 
										when _location isnull or _location = ''  then 
											coalesce(troa.block_code,_location)
										else 
											coalesce(_location,troa.block_code) 
									end
									group by tro.trngorg_id,tro.trngorg_name,tro.mobile_no,tro.trngorg_level_code,
											 tro.trngorg_type_code,troa.village_code,troa.state_code,troa.district_code,
											 troa.block_code,location_code,trod.vertical_code,tro.status_code,
											 tro.updated_date,tro.created_date,tro.created_by
									order by coalesce(tro.updated_date,tro.created_date) desc;								
	end if;
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainingorgnamelist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _vertical_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainingorgname refcursor DEFAULT 'rs_trainingorgnamelst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-10-2022
		
		Updated By		: Mohan S
		Updated Date    : 14-03-2023
		
		SP Code 		: B05TORG02
		version no 		: 04
	*/
	-- v_uservertical udd_code := '';
begin
	-- v_uservertical := (select fn_get_userverticalcode(_user_code));
	-- stored procedure body
	open _result_trainingorgname for select distinct
											tor.trngorg_id,
											tor.trngorg_name,
											tordo.vertical_code,
											fn_get_masterdesc('QCD_VERTICAL',tordo.vertical_code,_lang_code) as vertical_desc
									  from       trng_mst_ttrainingorg as tor
									  left JOIN  trng_mst_ttrainingorgdomain tordo 
   									  ON         tor.trngorg_id= tordo.trngorg_id 
									  inner join trng_mst_ttrainer as t
									  on         tor.trngorg_id= t.trngorg_id
									  and        t.trainer_id not in (  select trainer_id from trng_trn_ttprogramtrainer
																 where tprogram_id = _tprogram_id
																 and tprogrambatch_id = _tprogrambatch_id
																 and status_code = 'A')
  									  AND        t.status_code = 'A'
									  where 	vertical_code = _vertical_code
									  and   	tor.trngorg_type_code = 'QCD_ORGANIZATION' 
									  and 		tor.status_code = 'A';
	
	
/*	open _result_trainingorgname for select trngorg_id,
											trngorg_name,
											vertical_code,
											fn_get_masterdesc('QCD_VERTICAL',vertical_code,_lang_code) as vertical_desc
									  from  trng_mst_vtrainingorg 
									  where vertical_code = v_uservertical
									  and trngorg_type_code = 'QCD_ORGANIZATION'; */
-- 									  and status_code = 'A';
							       /*select distinct
										 trngorg_id,
										 trngorg_name
									from  trng_mst_ttrainingorg_view ;*/
					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trainingprogramlist(_vertical_code udd_code, _subvertical_jsonb udd_jsonb, _tprogram_name udd_desc, _tprogram_level_code udd_code, _start_date udd_date, _end_date udd_date, _status_code udd_code, _screen_mode udd_code, _user_level_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_tpcourse refcursor DEFAULT 'rs_tpcourse'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mangai P
		Created date : 10-10-2022
		
		Updated By   : Mangai
		Updated Date : 13-04-2023
		
		SP Code		 : B07PRGG01	
		version no 	 : 17
	*/
 	vsql udd_text := '';
	v_status_code udd_desc := '';
	v_execution_status_code udd_desc := '';
	v_config_value udd_desc := '';
	v_user_code udd_code :=  '';
	v_user_state udd_code := '';
	v_user_level_code udd_code := '';
begin
    v_user_code := _user_code;
	
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- Get user state and userlevel
	select state_code,user_level_code
	into   v_user_state,v_user_level_code
	from   core_mst_tuser 
	where  user_code = _user_code
	and    status_code = 'A';

    -- set default values
	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;
	
	if v_user_level_code = '99' then
		v_user_state = null;
	else 
		v_user_state := v_user_state;
	end if;
	
	drop table if exists trng_tmp_tpcourseid;
	
-- 	if _status_code = 'H' then
-- 		-- or _status_code = 'P' or _status_code = 'C' then
-- 		v_execution_status_code := 'and tp.execution_status_code= ' || chr(39)|| _status_code || chr(39);
-- 		_status_code := 'A';
-- 	else
-- 		v_execution_status_code := 'and tp.execution_status_code not in (''P'',''C'',''O'',''L'')';
-- 	end if;

	if _status_code = 'H' or _status_code = 'P' or _status_code = 'C' or _status_code = 'L' or _status_code = 'O' then
		v_execution_status_code := 'and tp.execution_status_code= ' || chr(39)|| _status_code || chr(39);
		_status_code := 'A';
	end if;
	
	if _screen_mode = 'create' then
			v_status_code := v_execution_status_code|| 'and tp.status_code <> ''I'' ';
			_user_code :=  null;
	elseif _screen_mode = 'modify' then
-- 			v_status_code := v_execution_status_code|| 'and tp.status_code not in (''R'',''I'',''S'') ';

			if _status_code = 'H' then
				-- or _status_code = 'P' or _status_code = 'C' then
				v_execution_status_code := 'and tp.execution_status_code= ' || chr(39)|| _status_code || chr(39);
				_status_code := 'A';
			else
				v_execution_status_code := 'and tp.execution_status_code not in (''P'',''C'',''O'',''L'')';
			end if;
			
				v_status_code := v_execution_status_code|| 'and (tp.status_code in (''D'',''A'',''B'') )';
				_user_code :=  null;	
	elseif _screen_mode = 'view' then
			v_status_code := '';
			_user_code :=  null;
	elseif _screen_mode = 'execute' then
			v_status_code := v_execution_status_code  || 'and tp.status_code = ''A'' ';
			_user_code :=  _user_code;
	end if ;
	
	-- create temporary table for pcourse_id
	vsql = 'create temporary table trng_tmp_tpcourseid as 
			select 	distinct tp.tprogram_id
			from 	trng_trn_ttprogram tp
			inner join trng_mst_tcourse as c
			on tp.course_id = c.course_id and c.status_code = ''A'',
					jsonb_to_recordset(c.subvertical_jsonb::udd_jsonb) d(subvertical udd_text)
			where   1 = 1 ' || v_status_code || v_execution_status_code;
	
	if _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 
				'and     d.subvertical in 
				(
					select dd.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as dd (subvertical udd_code)
				)';
	end if;	

	-- execute statement 
	execute vsql;

   -- Store Procedure Body	  
    -- Program Course --
-- 	raise exception '_user_code: %',_user_code;
	open _result_tpcourse for select 
								  tp.course_id,
								  tp.tprogram_gid,
								  tp.tprogram_id,
								  tp.course_id,
								  tp.tprogram_name,
								  coalesce(tp.tprogram_ll_name,'') as tprogram_ll_name,
								  tp.coordinator_id,
								  fn_get_username(tp.coordinator_id) as coordinator_name,
								  tp.tprogram_level_code,
								  fn_get_masterdesc('QCD_TRAINER_LEVEL',tp.tprogram_level_code, _lang_code) as tprogram_level_desc,
								  coalesce(to_char(tp.start_date,v_config_value)::udd_code,'') as start_date,
								  coalesce(to_char(tp.end_date,v_config_value)::udd_code,'') as end_date,
								  coalesce(tp.start_date::udd_code,'') as org_start_date,
								  coalesce(tp.end_date::udd_code,'') as org_end_date,
								  c.vertical_code,
								  fn_get_masterdesc('QCD_VERTICAL',c.vertical_code, _lang_code) as vertical_desc,
								  coalesce(fn_get_subvertical_jsonb(c.subvertical_jsonb,_lang_code)::udd_text,'') as subvertical_jsonb_desc,
								  coalesce(fn_get_subvertical(c.subvertical_jsonb,_lang_code)::udd_text,'') as subvertical_desc,
								  to_char(tp.row_timestamp, 'DD-MM-YYYY HH:MI:SS:MS'::text) AS row_timestamp,
								  case 
									when tp.status_code = 'A' then
										tp.execution_status_code
									else
										tp.status_code
								  end as status_code,
								  case 
									when tp.status_code = 'A' then
										fn_get_masterdesc('QCD_STATUS',tp.execution_status_code, _lang_code)
									else
										fn_get_masterdesc('QCD_STATUS',tp.status_code, _lang_code)
								  end as status_desc
-- 								  tpg.state_code
							  from  trng_trn_ttprogram as tp
							  inner join trng_mst_tcourse as c
							  on    tp.course_id = c.course_id 
							  and   c.status_code = 'A'
							  inner join trng_tmp_tpcourseid as pc 
							  on    tp.tprogram_id = pc.tprogram_id 
							  left join trng_trn_ttprogramgeo as tpg
							  on    tp.tprogram_id = tpg.tprogram_id
							  and   tpg.status_code = 'A'
							  where tp.tprogram_level_code <= _user_level_code
							  and   tpg.state_code  = 
							  	case when v_user_state isnull or v_user_state = '' then
										coalesce(tpg.state_code,v_user_state)	
									  else 
									  	coalesce(v_user_state,tpg.state_code)
								end
							  or    (tpg.state_code  isnull)
							  and 	c.vertical_code = _vertical_code 
							  and   tp.coordinator_id =
							  	case when (tp.status_code in ('D','B') and _screen_mode  = 'modify') then
										coalesce(v_user_code,null)
									 else
									 	coalesce(_user_code,tp.coordinator_id)
								end
-- 							  and   tp.coordinator_id = coalesce(_user_code,tp.coordinator_id)
-- 							  and   tp.updated_by = coalesce(_user_code,tp.updated_by)
							  and   tp.tprogram_name ilike _tprogram_name||'%' collate pg_catalog.""default""
							  and   tp.tprogram_level_code =
								case 
									when	_tprogram_level_code isnull or _tprogram_level_code = '' then
											coalesce(tp.tprogram_level_code,_tprogram_level_code)
									else 
											coalesce(_tprogram_level_code,tp.tprogram_level_code)
								end	
							  and   tp.start_date =
								case 
									when	_start_date isnull then
											coalesce(start_date,_start_date)
									else 
											coalesce(_start_date,start_date)
								end	
							  and   tp.end_date =
								case 
									when	_end_date isnull  then
											coalesce(end_date,_end_date)
									else 
											coalesce(_end_date,end_date)
								end	
							   and   tp.status_code =
								case 
									when	_status_code isnull or _status_code = '' then
											coalesce(tp.status_code,_status_code)
									else 
											coalesce(_status_code,tp.status_code)
								end 
							  order by tp.row_timestamp desc;
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trngprogcourselist(_vertical_code udd_code, _subvertical_jsonb udd_jsonb, _course_level_jsonb udd_jsonb, _course_type_jsonb udd_jsonb, _course_name udd_desc, _course_ll_name udd_desc, _status_code udd_code, _user_level_code udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_coursenamelist refcursor DEFAULT 'rs_coursename'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mohan S
		Created Date : 07-10-2022		
		
		Updated By 	 : Satheesh
		Updated Date : 06-03-2023
		
		SP Code 	 : B07TPCG01
		version no 	 : 04
	*/
	vsql udd_text := '';
begin
	-- set default values
	if _course_level_jsonb isnull then
		_course_level_jsonb = '[{}]';
	end if;

	if _course_type_jsonb isnull then
		_course_type_jsonb = '[{}]';
	end if;

	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;

	-- drop temporary table
	drop table if exists trng_tmp_ttrngprogcourselevel;
	drop table if exists trng_tmp_ttrngprogcoursetype;
	drop table if exists trng_tmp_ttrngprogsubvertical;
	drop table if exists trng_tmp_ttrngprogcourseid;
	
	-- create temporary table for course_id
	vsql = 'create temporary table trng_tmp_ttrngprogcourseid as 
			select 	distinct a.course_id
			from 	trng_mst_tcourse a,
					jsonb_to_recordset(course_level_jsonb::udd_jsonb) b(course_level udd_text),
					jsonb_to_recordset(course_type_jsonb::udd_jsonb) c(course_type udd_text),
					jsonb_to_recordset(subvertical_jsonb::udd_jsonb) d(subvertical udd_text)
			where   1 = 1 and status_code = ''A'' ';
	
	if _course_name <> '' then
		vsql = vsql || ' and course_name ilike ''' || _course_name || '%''collate pg_catalog.""default""';
	end if;
	
	if _course_ll_name <> '' then
		vsql = vsql || ' and course_ll_name ilike ''' || _course_ll_name || '%''collate pg_catalog.""default""';
	end if;
	
	if _vertical_code <> '' then
		vsql = vsql || ' and vertical_code = ''' || _vertical_code || '''';
	end if;
	
	if _subvertical_jsonb <> '[{}]' then
		vsql = vsql || 
				'and     d.subvertical in 
				(
					select dd.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as dd (subvertical udd_code)
				)';
	end if;
	
	if _course_level_jsonb <> '[{}]' then
		vsql = vsql || 
			'and     b.course_level in 
			(
				select bb.course_level from jsonb_to_recordset(''' || _course_level_jsonb || ''') as bb (course_level udd_code)
			)';
	end if;
	
	if _course_type_jsonb <> '[{}]' then
		vsql = vsql || 
			'and     c.course_type in 
			(
				select cc.course_type from jsonb_to_recordset(''' || _course_type_jsonb || ''') as cc (course_type udd_code)
			)';
	end if;
	
	if _status_code <> '' then
		vsql = vsql || ' and a.status_code = ''' || _status_code || '''';
	end if;
	
	-- execute the query variable vsql
	execute vsql;
	
	-- stored procedure body
	open _result_coursenamelist for select distinct
										a.course_gid,
										a.course_id,
										a.course_name,
										a.course_ll_name,
										fn_get_course_type(course_type_jsonb,_lang_code)  as course_type_jsonb_desc,
										fn_get_course_level(course_level_jsonb,_lang_code)  as course_level_jsonb_desc,
										a.vertical_code,
										fn_get_masterdesc('QCD_VERTICAL', a.vertical_code, _lang_code) as vertical_desc,
										fn_get_subvertical(subvertical_jsonb,_lang_code)  as subvertical_jsonb_desc,
										a.status_code,
										fn_get_masterdesc('QCD_STATUS', a.status_code, _lang_code) as status_desc
								from 	trng_mst_tcourse a
								inner join trng_tmp_ttrngprogcourseid e on a.course_id = e.course_id,
								jsonb_to_recordset(course_level_jsonb) b(course_level udd_text)
								where b.course_level::udd_int <= _user_level_code::udd_int
								order by a.course_gid desc; 	
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_trngprogrammaplist(_tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_maptrainer refcursor DEFAULT 'rs_maptrainer'::refcursor, INOUT _result_mapvenu refcursor DEFAULT 'rs_mapvenu'::refcursor, INOUT _result_mapparticipant refcursor DEFAULT 'rs_mapparticipant'::refcursor, INOUT _result_mapexpense refcursor DEFAULT 'rs_mapexpense'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mohan S
		Created date : 20-10-2022
		SP Code		 : B07PMAPG01		
	*/
	v_program_venue_id udd_code = '';
begin
   -- Store Procedure Body	  
   	select 	tprogram_venue_id into v_program_venue_id 
	from 	trng_trn_ttprogrambatch
	where 	tprogram_id = _tprogram_id
	and   	tprogrambatch_id = _tprogrambatch_id
	and   	status_code = 'A';
	
	v_program_venue_id := coalesce(v_program_venue_id,'');
   
    -- MAP Trainer --
	open _result_maptrainer for select 
									tprogram_id,
									tprogrambatch_id,
									org_type_code,
									fn_get_masterdesc('QCD_ORG_TYPE',org_type_code, _lang_code) as org_type_desc,
									trngorg_id,
									trainer_id,
									trainer_type_code,
									fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code, _lang_code) as trainer_type_desc,
									trainer_flag,
									confirmation_flag,
									status_code,
									fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
						from 	  trng_trn_ttprogramtrainer
						where     tprogram_id = _tprogram_id
						and 	  tprogrambatch_id = _tprogrambatch_id
						and       status_code <> 'I';
						  		
	 -- MAP Venu -- 
	 open _result_mapvenu for select 
								venue_id,
								venue_name,
								venue_ll_name,
								venue_type_code,
								fn_get_masterdesc('QCD_VENUE_TYPE',venue_type_code, _lang_code) as venu_type_desc,
								venue_subtype_code,
								fn_get_masterdesc('QCD_VENUE_SUBTYPE',venue_subtype_code, _lang_code) as venue_subtype_desc,
								contact_name,
								contact_mobile_no,
								validity_from,
								validity_to,
								indefinite_flag,
								others_flag,
								status_code,
								fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
							  from		 trng_mst_tvenue
							  where      venue_id = v_program_venue_id
							  and 		 status_code  <> 'I';
	
   	 -- MAP Participant -- 
  	 open _result_mapparticipant for select 	  
									  	  tprogram_id,
										  tprogrambatch_id,
										  batch_date,
										  participant_type_code,
										  fn_get_masterdesc('QCD_PRT_TYPE',participant_subtype_code, _lang_code) as participant_type_desc,
										  participant_subtype_code,
										  fn_get_masterdesc('QCD_PRT_SUBTYPE',participant_subtype_code, _lang_code) as participant_subtype_desc,
										  participant_id,
										  participant_name,
										  participant_ll_name,
										  fatherhusband_name,
										  fatherhusband_ll_name,
										  shg_id,
										  mobile_no,
										  email_id,
										  gender_code,
										  fn_get_masterdesc('QCD_GENDER',gender_code, _lang_code) as gender_desc,
										  attendance_flag,
										  status_code,
										  fn_get_masterdesc('QCD_STATUS',status_code, _lang_code) as status_desc
									  from trng_trn_ttprogramparticipant 
									  where tprogram_id = _tprogram_id
									  and 	tprogrambatch_id = _tprogrambatch_id
									  and   status_code <> 'I';
	
	 -- MAP Expense -- 
  	 open _result_mapexpense for select '';
							
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_ttprogramorglist(_tprogram_id udd_code, _trngorg_type_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainingorg refcursor DEFAULT 'rs_trainingorglst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 15-11-2022
		SP Code 		: B05TORG02
		version no 		: 01
	*/
	
begin
	-- stored procedure body
	if _trngorg_type_code = 'QCD_ORGANIZATION' then
		open _result_trainingorg for select distinct 
											b.trngorg_id,
											b.trngorg_name
									  from  trng_trn_vtprogramvertical as a
									  inner join trng_mst_vtrngorgvertical as b
									  on a.vertical_code = b.vertical_code
									  inner join trng_mst_ttrainer as c
									  on b.trngorg_id = c.trngorg_id
									  and c.status_code = 'A'
									  where a.tprogram_id = _tprogram_id;
	
	elseif _trngorg_type_code = 'QCD_GROUP' then
		open _result_trainingorg for select distinct 
												b.trngorg_id,
												b.trngorg_name
										  from  trng_trn_vtprogramvertical as a
										  inner join trng_mst_vtrnggroupvertical as b
										  on a.vertical_code = b.vertical_code
										  inner join trng_mst_ttrainergroup as c
										  on b.trngorg_id = c.trngorg_id
										  and c.status_code = 'A'
										  inner join trng_mst_ttrainer as d
										  on c.trainer_id = d.trainer_id
										  and d.status_code = 'A'
										  where a.tprogram_id = _tprogram_id;
	end if;
			
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_userlist(_user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_userlist refcursor DEFAULT 'rs_userlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mohan S
		Created Date : 10-11-2022
		
		Updated By   : Mangai
		Updated Date : 22-02-2023
		
		SP Code 	 : B01USRG01
		Version No 	 : 04
	*/
begin
	-- stored procedure body
	-- User List --  
	open _result_userlist for   select 	user_gid,
										user_code,
										user_name,
										role_code,
										fn_get_rolename(role_code) as role_name,
										user_pwd,
										mobile_no,
										email_id,
										user_type_code,
										lokos_id,
										status_code,
										fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
										vertical_code,
										fn_get_masterdesc('QCD_VERTICAL', vertical_code, _lang_code) as vertical_desc,
										coalesce(fn_get_subvertical_jsonb(subvertical_jsonb,_lang_code)::udd_text,'') as subvertical_jsonb_desc,
										coalesce(state_code,'') as state_code,
										fn_get_statedesc(state_code) as state_desc,
										fn_get_stateid(state_code) as state_id,
										coalesce(district_code,'') as district_code,
										fn_get_districtdesc(district_code) as district_desc,
										fn_get_districtid(district_code) as district_id,
										coalesce(block_code,'') as block_code,
										fn_get_blockdesc(block_code) as block_desc,
										fn_get_blockid(block_code) as block_id,
										coalesce(panchayat_code,'') as panchayat_code,
										fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
										fn_get_panchayatid(panchayat_code) as panchayat_id,
										coalesce(village_code,'') as village_code,
										fn_get_villagedesc(village_code) as village_desc,
										fn_get_villageid(village_code) as village_id,
										coalesce(user_level_code,'') as user_level_code,
										fn_get_masterdesc('QCD_LEVEL',user_level_code,_lang_code) as user_level_desc
							    from 	core_mst_tuser	
								where   user_code = _user_code
								and 	status_code = 'A';
									
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_userverticallist(_user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_uservslist refcursor DEFAULT 'rs_uservslist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 09-02-2023
		
		SP Code 	 : B01USRG02
		Version No 	 : 01
	*/
begin
	-- stored procedure body
	open _result_uservslist for   select 	user_gid,
										user_code,
										user_name,
										role_code,
										fn_get_rolename(role_code) as role_name,
										user_pwd,
										mobile_no,
										email_id,
										user_type_code,
										lokos_id,
										status_code,
										fn_get_masterdesc('QCD_STATUS', status_code, _lang_code) as status_desc,
										vertical_code,
										fn_get_masterdesc('QCD_VERTICAL', vertical_code, _lang_code) as vertical_desc,
										subvertical_jsonb :: udd_text,
										coalesce(state_code,'') as state_code,
										fn_get_statedesc(state_code) as state_desc,
-- 										fn_get_stateid(state_code) as state_id,
										coalesce(district_code,'') as district_code,
										fn_get_districtdesc(district_code) as district_desc,
-- 										fn_get_districtid(district_code) as district_id,
										coalesce(block_code,'') as block_code,
										fn_get_blockdesc(block_code) as block_desc,
-- 										fn_get_blockid(block_code) as block_id,
										coalesce(panchayat_code,'') as panchayat_code,
										fn_get_panchayatdesc(panchayat_code) as panchayat_desc,
-- 										fn_get_panchayatid(panchayat_code) as panchayat_id,
										coalesce(village_code,'') as village_code,
										fn_get_villagedesc(village_code) as village_desc,
-- 										fn_get_villageid(village_code) as village_id,
										coalesce(user_level_code,'') as user_level_code,
										fn_get_masterdesc('QCD_LEVEL',user_level_code,_lang_code) as user_level_desc
							    from 	core_mst_tuser	
								where   vertical_code = '' or vertical_code  isnull
								or      subvertical_jsonb = '[{}]' or subvertical_jsonb isnull
								and 	status_code = 'A';
									
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_venueinfradtllist(_facility_id udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_venueinfradtllist refcursor DEFAULT 'rs_venueinfradtllist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 30-12-2022
		
		Updated By : Mangai
		Updated Date : 21-01-2023
		
		SP Code : B06VENG04
		Version No : 2
	*/
	
begin 
	-- stored procedure body
	open _result_venueinfradtllist for select 
												venueinfradtl_gid,
												venue_id,
												facility_id,
												fn_get_facilityname(facility_id) as facility_name,
												infra_type,
												fn_get_masterdesc('QCD_VENUE_INFRA',infra_type,_lang_code) as infra_type_desc,
												infra_count,
												status_code,
												fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
										from    trng_mst_tvenueinfradtl
										where   facility_id = _facility_id
										and     status_code = 'A';
									
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_venuelist(_venue_name udd_desc, _venue_type_code udd_code, _venue_subtype_code udd_code, _screen_mode udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_venuelist refcursor DEFAULT 'rs_venuelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 03-10-2022
		
		Updated By : Mangai
		Updated Date : 05-04-2022
		
		SP Code : B06VENG01
		Version No : 3
	*/
	v_user_level_code udd_code := '';
	
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_panchayat_code udd_code := '';
	v_village_code udd_code := '';
	
	v_condition udd_text := '';
	vsql udd_text := '';
	v_status_code udd_desc := '';
begin
	
	-- Get user level and user geo
	select user_level_code,state_code,district_code,block_code,panchayat_code,village_code
	into   v_user_level_code,v_state_code,v_district_code,v_block_code,v_panchayat_code,v_village_code
	from   core_mst_tuser 
	where  user_code = _user_code
	and    status_code = 'A';
	
	if v_user_level_code = '99' then
		v_state_code := '';
		v_district_code := '';
		v_block_code := '';
		v_panchayat_code := '';
		v_village_code := '';
	elseif v_user_level_code = '89' then
		v_district_code := '';
		v_block_code := '';
		v_panchayat_code := '';
		v_village_code := '';
	elseif v_user_level_code = '79' then
		v_block_code := '';
		v_panchayat_code := '';
		v_village_code := '';
	elseif v_user_level_code = '69' then
		v_panchayat_code := '';
		v_village_code := '';
	end if;
	
	-- Set status code against screen mode
	if _screen_mode = 'modify' then
			v_status_code := 'and v.status_code = ''A'' ';
	elseif _screen_mode = 'view' then
			v_status_code := '';
	end if;
	
	-- drop temporary table
		drop table if exists trng_tmp_tvenueid;
		
	-- create temporary table for course_id
	vsql = 'create temporary table trng_tmp_tvenueid as 
			select 	v.venue_id
			from 	trng_mst_tvenue v
			left join trng_mst_tvenueaddr as va
			on 	      v.venue_id = va.venue_id 
			and       va.status_code = ''A''
			where   1 = 1 ' || v_status_code;

	if _venue_name <> '' then
		vsql = vsql || ' and v.venue_name ilike ''' || _venue_name || '%''collate pg_catalog.""default""';
	end if;

	 if _venue_type_code <> '' then
		 vsql = vsql || ' and v.venue_type_code = ''' || _venue_type_code || '''';
	 end if;

	if _venue_subtype_code <> '' then
		 vsql = vsql || ' and v.venue_subtype_code = ''' || _venue_subtype_code || '''';
	 end if;
	
	-- execute the query variable vsql
	execute vsql;
	
	-- stored procedure body
	open _result_venuelist for select 		
											v_state_code,v_district_code,v_block_code,v_panchayat_code,v_village_code,
											va.state_code,va.district_code,va.block_code,va.grampanchayat_code,va.village_code,
											v.venue_gid,
											v.venue_id,
											v.venue_name,
											v.venue_ll_name,
											v.venue_type_code,
											fn_get_masterdesc('QCD_VENUE_TYPE', v.venue_type_code, _lang_code) as venue_type_desc,
											v.venue_subtype_code,
											fn_get_masterdesc('QCD_VENUE_SUBTYPE', v.venue_subtype_code, _lang_code) as venue_subtype_desc,
											v.contact_name,
											v.contact_mobile_no,
											v.validity_from,
											v.validity_to,
											v.indefinite_flag,
											v.others_flag,
											v.status_code,
											fn_get_masterdesc('QCD_STATUS', v.status_code, _lang_code) as status_desc,
											v.row_timestamp
							    	from 	trng_mst_tvenue	as v
									left join trng_mst_tvenueaddr as va
									on 	    v.venue_id = va.venue_id 
									and     va.status_code = 'A'
									inner join trng_tmp_tvenueid as tmp
									on      v.venue_id = tmp.venue_id
									and coalesce(v_state_code,'') = case when coalesce(v_state_code,'') = '' then '' else coalesce(va.state_code,'') end
									and coalesce(v_district_code,'') = case when coalesce(v_district_code,'')  = '' then '' else coalesce(va.district_code,'') end 
									and coalesce(v_block_code,'') = case when coalesce(v_block_code,'') = '' then '' else coalesce(va.block_code,'') end
									and coalesce(v_panchayat_code,'') = case when coalesce(v_panchayat_code,'') = '' then '' else coalesce(va.grampanchayat_code,'') end 
									and coalesce(v_village_code,'') = case when coalesce(v_village_code,'') = '' then '' else coalesce(va.village_code,'') end 
									--and     status_code = 'A'
									and     v.others_flag = 'N'
									order by v.row_timestamp desc;
	
								
								
								
								
								/*select 		
											v_state_code,v_district_code,v_block_code,v_panchayat_code,v_village_code,
											va.state_code,va.district_code,va.block_code,va.grampanchayat_code,va.village_code,
											v.venue_gid,
											v.venue_id,
											v.venue_name,
											v.venue_ll_name,
											v.venue_type_code,
											fn_get_masterdesc('QCD_VENUE_TYPE', v.venue_type_code, _lang_code) as venue_type_desc,
											v.venue_subtype_code,
											fn_get_masterdesc('QCD_VENUE_SUBTYPE', v.venue_subtype_code, _lang_code) as venue_subtype_desc,
											v.contact_name,
											v.contact_mobile_no,
											v.validity_from,
											v.validity_to,
											v.indefinite_flag,
											v.others_flag,
											v.status_code,
											fn_get_masterdesc('QCD_STATUS', v.status_code, _lang_code) as status_desc,
											v.row_timestamp
							    	from 	trng_mst_tvenue	as v
									left join trng_mst_tvenueaddr as va
									on 	    v.venue_id = va.venue_id 
									and     va.status_code = 'A'
									where   v.venue_name ilike _venue_name||'%' collate pg_catalog.""default""
									and		v.venue_type_code = 
									case 
										when    _venue_type_code isnull or _venue_type_code = ''  then 
												coalesce(v.venue_type_code,_venue_type_code)
										else 
												coalesce(_venue_type_code,v.venue_type_code) 
									end 
									and		v.venue_subtype_code = 
									case 
										when    _venue_subtype_code isnull or _venue_subtype_code = ''  then 
												coalesce(v.venue_subtype_code,_venue_subtype_code)
										else 
												coalesce(_venue_subtype_code,v.venue_subtype_code) 
									end 
									and coalesce(v_state_code,'') = case when coalesce(v_state_code,'') = '' then '' else coalesce(va.state_code,'') end
									and coalesce(v_district_code,'') = case when coalesce(v_district_code,'')  = '' then '' else coalesce(va.district_code,'') end 
									and coalesce(v_block_code,'') = case when coalesce(v_block_code,'') = '' then '' else coalesce(va.block_code,'') end
									and coalesce(v_panchayat_code,'') = case when coalesce(v_panchayat_code,'') = '' then '' else coalesce(va.grampanchayat_code,'') end 
									and coalesce(v_village_code,'') = case when coalesce(v_village_code,'') = '' then '' else coalesce(va.village_code,'') end 
									--and     status_code = 'A'
									and     v.others_flag = 'N'
									order by v.row_timestamp desc;
									*/
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_venuelist_test(_venue_name udd_desc, _venue_type_code udd_code, _venue_subtype_code udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_venuelist refcursor DEFAULT 'rs_venuelist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		SP Code : B06VENG01
		
		Created By : Mangai
		Created Date : 03-10-2022
		
		Updated By : Vijayavel
		Updated Date : 30-11-2022
		
		Version No : 3
	*/
	v_user_level_code udd_code := '';
	
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_panchayat_code udd_code := '';
	v_village_code udd_code := '';
	
	v_condition udd_text := '';
begin
	-- stored procedure body
	
	-- get userlevelcode
	/*
	select fn_get_userlevelcode(_user_code) into v_user_level_code;
		raise notice 'v_user_level_code %',v_user_level_code;
	*/
	
	select 
		user_level_code,
		state_code,
		district_code,
		block_code,
		panchayat_code,
		village_code
	into 
		v_user_level_code,
		v_state_code,
		v_district_code,
		v_block_code,
		v_panchayat_code,
		v_village_code
	from core_mst_tuser 
	where	user_code = _user_code
	and status_code = 'A';
	
	raise notice 'user level %',v_user_level_code;
	raise notice 'state %',v_state_code;
	raise notice 'district %',v_district_code;
	
	if v_user_level_code::udd_int <= '79' then
		v_condition := 'and u.district_code = va.district_code';
		raise notice 'v_condition1 %',v_condition;
	end if;
	if v_user_level_code::udd_int <= '69' then
		v_condition := v_condition || 'and u.block_code = va.block_code';
		raise notice 'v_condition2 %',v_condition;
	end if;
	if v_user_level_code::udd_int <= '59' then
		v_condition := v_condition || 'and u.panchayat_code = va.grampanchayat_code';
		raise notice 'v_condition3 %',v_condition;
	end if;
	if v_user_level_code::udd_int <= '49' then
		v_condition := v_condition || 'and u.village_code = va.village_code';
		raise notice 'v_condition4 %',v_condition;
	end if;
	
	-- venue List -- 
	open _result_venuelist for select 		
											v_state_code,v_district_code,v_block_code,v_panchayat_code,v_village_code,
											va.state_code,va.district_code,va.block_code,va.grampanchayat_code,va.village_code,
											v.venue_gid,
											v.venue_id,
											v.venue_name,
											v.venue_ll_name,
											v.venue_type_code,
											fn_get_masterdesc('QCD_VENUE_TYPE', v.venue_type_code, _lang_code) as venue_type_desc,
											v.venue_subtype_code,
											fn_get_masterdesc('QCD_VENUE_SUBTYPE', v.venue_subtype_code, _lang_code) as venue_subtype_desc,
											v.contact_name,
											v.contact_mobile_no,
											v.validity_from,
											v.validity_to,
											v.indefinite_flag,
											v.others_flag,
											v.status_code,
											fn_get_masterdesc('QCD_STATUS', v.status_code, _lang_code) as status_desc,
											v.row_timestamp
							    	from 	trng_mst_tvenue	as v
									left join trng_mst_tvenueaddr as va
									on 	v.venue_id = va.venue_id 
									and va.status_code = 'A'
									/*inner join core_mst_tuser as u
									on u.state_code = va.state_code
									on 	coalesce(u.state_code,'') = case when coalesce(u.state_code,'') = '' then '' else coalesce(va.state_code,'') end
									and coalesce(u.district_code,'') = case when coalesce(u.district_code,'')  = '' then '' else coalesce(va.district_code,'') end 
									and coalesce(u.block_code,'') = case when coalesce(u.block_code,'') = '' then '' else coalesce(va.block_code,'') end
									and coalesce(u.panchayat_code,'') = case when coalesce(u.panchayat_code,'') = '' then '' else coalesce(va.grampanchayat_code,'') end 
									and coalesce(u.village_code,'') = case when coalesce(u.village_code,'') = '' then '' else coalesce(va.village_code,'') end 
									and u.status_code = 'A' and u.user_code = _user_code*/
									where   v.venue_name ilike _venue_name||'%' collate pg_catalog.""default""
									and		v.venue_type_code = 
									case 
										when    venue_type_code isnull or venue_type_code = ''  then 
												coalesce(v.venue_type_code,_venue_type_code)
										else 
												coalesce(_venue_type_code,v.venue_type_code) 
									end 
									and		v.venue_subtype_code = 
									case 
										when    venue_subtype_code isnull or venue_subtype_code = ''  then 
												coalesce(v.venue_subtype_code,_venue_subtype_code)
										else 
												coalesce(_venue_subtype_code,v.venue_subtype_code) 
									end 
									and coalesce(v_state_code,'') = case when coalesce(v_state_code,'') = '' then '' else coalesce(va.state_code,'') end
									and coalesce(v_district_code,'') = case when coalesce(v_district_code,'')  = '' then '' else coalesce(va.district_code,'') end 
									and coalesce(v_block_code,'') = case when coalesce(v_block_code,'') = '' then '' else coalesce(va.block_code,'') end
									and coalesce(v_panchayat_code,'') = case when coalesce(v_panchayat_code,'') = '' then '' else coalesce(va.grampanchayat_code,'') end 
									and coalesce(v_village_code,'') = case when coalesce(v_village_code,'') = '' then '' else coalesce(va.village_code,'') end 
									--and     status_code = 'A'
									and     v.others_flag = 'N'
									order by v.row_timestamp desc;
									
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_venuenamelist(_tprogram_id udd_code, _venue_type_code udd_code, _venue_subtype_code udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_venuenamelist refcursor DEFAULT 'rs_venuename'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 17-10-2022
		
		Updated By : Mangai
		Updated Date : 12-12-2022
		
		SP Code : B06VENG02
		version no : 07
	*/
	v_tprogram_level_code udd_code := '';
begin
	-- get program level 
	select 	tprogram_level_code into v_tprogram_level_code
	from 	trng_trn_ttprogram
	where 	tprogram_id = _tprogram_id
	and   	status_code not in ('I','R');
	
	-- stored procedure body
	-- venue name list -- 	
	if v_tprogram_level_code <> '99' and v_tprogram_level_code <> '' then
		open _result_venuenamelist for select distinct	
												v.venue_id,
												v.venue_name,
												v.venue_ll_name,
												v.venue_type_code,
												v.venue_subtype_code
										from 	trng_mst_tvenue	as v
										inner join trng_mst_tvenueaddr as va
										on 	v.venue_id = va.venue_id 
										and va.status_code = 'A'
										inner join trng_trn_ttprogramgeo as pg
										on 	coalesce(pg.state_code,'') = case when coalesce(pg.state_code,'') = '' then '' else coalesce(va.state_code,'') end
										and coalesce(pg.district_code,'') = case when coalesce(pg.district_code,'')  = '' then '' else coalesce(va.district_code,'') end 
										and coalesce(pg.block_code,'') = case when coalesce(pg.block_code,'') = '' then '' else coalesce(va.block_code,'') end
										and coalesce(pg.grampanchayat_code,'') = case when coalesce(pg.grampanchayat_code,'') = '' then '' else coalesce(va.grampanchayat_code,'') end 
										and coalesce(pg.village_code,'') = case when coalesce(pg.village_code,'') = '' then '' else coalesce(va.village_code,'') end 
										and pg.status_code = 'A'
										where pg.tprogram_id = _tprogram_id
										and v.venue_type_code <> 'QCD_OTHERS'
										and	v.venue_type_code = 
										case 
											when  _venue_type_code isnull or _venue_type_code = ''  then 
												coalesce(v.venue_type_code,_venue_type_code)
											else 
												coalesce(_venue_type_code,v.venue_type_code) 
										end 
										and	v.venue_subtype_code = 
										case 
											when  _venue_subtype_code isnull or _venue_subtype_code = ''  then 
												coalesce(v.venue_subtype_code,_venue_subtype_code)
											else 
												coalesce(_venue_subtype_code,v.venue_subtype_code) 
										end 
										and  v.status_code = 'A';
	elseif v_tprogram_level_code <> '' then
	open _result_venuenamelist for select distinct	
												v.venue_id,
												v.venue_name,
												v.venue_ll_name,
												v.venue_type_code,
												v.venue_subtype_code
										from 	trng_mst_tvenue	as v
										inner join trng_mst_tvenueaddr as va
										on 	v.venue_id = va.venue_id 
										and va.status_code = 'A'
										where v.venue_type_code <> 'QCD_OTHERS'
										and   v.venue_type_code = 
										case 
											when  _venue_type_code isnull or _venue_type_code = ''  then 
												coalesce(v.venue_type_code,_venue_type_code)
											else 
												coalesce(_venue_type_code,v.venue_type_code) 
										end 
										and	v.venue_subtype_code = 
										case 
											when  _venue_subtype_code isnull or _venue_subtype_code = ''  then 
												coalesce(v.venue_subtype_code,_venue_subtype_code)
											else 
												coalesce(_venue_subtype_code,v.venue_subtype_code) 
										end 
										and  v.status_code = 'A';
	else 
		open _result_venuenamelist for select '';
	end if;
									
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_venuetype_web(_parent_code udd_code, _lang_code udd_code, INOUT _result_venuetype refcursor DEFAULT 'rs_venuetype'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare 
	/*
		Created By : Mohan S
		Created Date : 30-11-2021
		SP Code : B06VTYG01
	*/
begin
		open _result_venuetype for  select 		
										b.master_code as master_code,
										b.master_desc as master_desc,
										a.rec_slno
									from 		core_mst_tmaster as a 
									inner join 	core_mst_tmastertranslate as b 
									on 			a.parent_code = b.parent_code 
									and 		a.master_code = b.master_code 
									where 		a.parent_code = _parent_code 
									and 		b.lang_code = _lang_code
									and 		a.master_code <> 'QCD_OTHERS'
									and 		a.status_code = 'A';

end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_villageapproverlist(_vertical_code udd_code, _user_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _village_code udd_code, INOUT _result_villageapprover refcursor DEFAULT 'rs_villageapproverlst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 18-11-2022
		
		updated By 		: Mohan S
		Updatde Date 	: 09-12-2022
		
		SP Code 		: B01VLGG01
		Version No 		: 02
	*/
	
begin

	-- Store Procedure body --
	open _result_villageapprover for select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code = '59'
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   panchayat_code = _panchayat_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';
								/*select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_code
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   panchayat_code = _panchayat_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster'
						union all select 
											user_name,
											user_code,
											role_code,
											fn_get_rolename(role_code) as role_name
										from  core_mst_tuser 
										where vertical_code = _vertical_code
										and   user_level_code > _user_level_code
										and   state_code = _state_code 
										and   district_code = _district_code 
										and   block_code = _block_code
										and   panchayat_code = _panchayat_code
										and   village_code = _village_code
										and   status_code 	= 'A'
										and   role_code = 'TrainingMaster';*/

					
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_villagelist(_panchayat_code udd_code, _lang_code udd_code, INOUT _result_village refcursor DEFAULT 'rs_village'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 17-10-2022
		SP Code : B01VGMG01
		
		Updated by : Satheesh
		Updated date : 23-02-2023
		
	*/
	v_panchayat_id udd_int := 0;
begin
	v_panchayat_id := (select fn_get_panchayatid(_panchayat_code));
	-- stored procedure body
	open _result_village for select 	
								village_id,
								state_id,
								district_id,
								block_id,
								panchayat_id,
								village_code,
-- 								village_name_en,
								fn_get_village_ll_desc (village_id,_lang_code) as village_name_local,
								case
								when _lang_code <> 'hi_IN' then
								     village_name_en
								else village_name_local
								end as village_name_en
				  from 			village_master
				  where 		panchayat_id = v_panchayat_id
				  and 			is_active = true
				  order by 		village_name_en;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_get_volist(_clf_cbo_code udd_desc, _lang_code udd_code, INOUT _result_vo refcursor DEFAULT 'rs_vo'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mangai
		Created Date : 30-01-2023
		
		Sp Code : B01VOLG01
	*/
	
begin
	
	-- stored procedure body
	open _result_vo for select 
								parent_cbo_type,
								parent_cbo_id,
								parent_cbo_code,
								cbo_type,
								cbo_id,
								cbo_code as vo_cbo_code,
								federation_name as vo_name
						   from  federation_profile_consolidated 
						   where parent_cbo_code in (
													select cbo_code from federation_profile_consolidated
													where  cbo_code = _clf_cbo_code
							   						and    cbo_type = 2
						   							)
-- 						   and   parent_cbo_type = 2
						   and cbo_type = 1
						   and 	 is_active = true
						   order by vo_name;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_ins_coursemodule(_course_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mohan S
		Created Date : 12-10-2022
		SP Code      : B04CMDCXX
	*/
	v_coursemodule_gid udd_int := 0;
	v_coursemodule_id udd_code := '';
	
	v_subvertical_jsonb udd_jsonb := '[{}]';
	v_subvertical udd_code := '';
	v_course_name udd_desc := '';
	v_course_desc udd_desc := '';
begin
	-- get subvertical 
	select 	subvertical_jsonb,course_name,course_desc
	into 	v_subvertical_jsonb,v_course_name,v_course_desc
	from 	trng_mst_tcourse 
	where 	course_id = _course_id
	and 	status_code <> 'I';
	
	--loop against subvertical
	for v_subvertical in (select * from jsonb_to_recordset(v_subvertical_jsonb) as b (subvertical udd_code))
	LOOP
	
	call pr_iud_coursemodule(v_coursemodule_gid,_course_id,v_coursemodule_id,v_course_name,'',v_course_desc,v_subvertical,
							'A',_user_code,_role_code,_lang_code,'I',_succ_msg);
							
							v_coursemodule_gid := 0;
							v_coursemodule_id := '';
							
	end loop;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_ins_feedback(INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _feedback_lang_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By 	 : Mohan S
		Created Date : 15-12-2022
		
		Created By 	 : Mangai
		Created Date : 28-02-2023
		
		SP Code 	 : B03FTPCXX
		Version No 	 : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_feedbacktrainer_gid udd_int := 0;
	v_feedbackparticipant_gid udd_int := 0;
	v_questionaire_id udd_code := 0;
	v_question_type_code udd_code := '';
	v_t_questionaire_type_code udd_code := '';
	v_P_questionaire_type_code udd_code := '';
	
	v_course_id udd_code := '';
	v_config_value udd_code := '';
	v_trainer_questionaire_id udd_code := '';
	v_participant_questionaire_id udd_code := '';
	
	v_colrec_tquestion_id record;
	v_colrec_pquestion_id record;
	v_colrec_trainer_fb record;
	v_colrec_participant_fb record;
begin 	
	-- Get course id 
	select course_id into v_course_id from trng_trn_ttprogram
	where tprogram_id = _tprogram_id
	and status_code = 'A';
	
	-- Get Questionaire id 
	select 	questionaire_id into v_questionaire_id
	from 	trng_mst_vquestionairecourse 
	where 	course_id = v_course_id;
		
	v_questionaire_id := coalesce(v_questionaire_id,'');

	if v_questionaire_id = ''  then
		select 	config_value into v_trainer_questionaire_id
		from 	core_mst_tconfig
		where 	config_name = 'trainer_questionaire_id'
		and 	status_code = 'A';	
		
		select 	config_value into v_participant_questionaire_id
		from 	core_mst_tconfig
		where 	config_name = 'participant_questionaire_id'
		and 	status_code = 'A';
	else 
		v_trainer_questionaire_id := v_questionaire_id;
		v_participant_questionaire_id := v_questionaire_id;
	end if;
	
	-- get questionaire type code against trainer
	select 	questionaire_type_code into v_t_questionaire_type_code
	from 	trng_mst_tquestionaire
	where 	questionaire_id = v_trainer_questionaire_id
	and 	status_code = 'A';

	-- get questionaire type code against participant
	select 	questionaire_type_code into v_p_questionaire_type_code
	from 	trng_mst_tquestionaire
	where 	questionaire_id = v_participant_questionaire_id
	and 	status_code = 'A';
		
-- 	raise notice 'v_trainer_questionaire_id : %',v_trainer_questionaire_id;
-- 	raise notice 'v_participant_questionaire_id : %',v_participant_questionaire_id;
-- 	raise notice 'v_t_questionaire_type_code1 : %',v_t_questionaire_type_code;
-- 	raise notice 'v_p_questionaire_type_code2 : %',v_p_questionaire_type_code;

	--  Insert in feedback trainer
	if v_t_questionaire_type_code = 'QCD_TRAINER' then
		FOR v_colrec_tquestion_id IN select question_id 
									from 	trng_mst_tquestion
									where 	questionaire_id = v_trainer_questionaire_id 
									and 	status_code = 'A'						

			Loop 
				select question_type_code into v_question_type_code
				from   trng_mst_tquestion 
				where  questionaire_id = v_trainer_questionaire_id
				and    question_id = v_colrec_tquestion_id.question_id
				and    status_code = 'A';
				
			    update  trng_trn_ttprogramtrainer 
			    set 	feedback_status = 'QCD_INITIATED'
			    where 	tprogram_id = _tprogram_id 
			    and 	tprogrambatch_id = _tprogrambatch_id
			    and 	confirmation_flag = 'Y'
			    and 	status_code = 'A';
				  
			FOR v_colrec_trainer_fb in select distinct trainer_id from trng_trn_ttprogramtrainer
									  where tprogram_id = _tprogram_id 
									  and tprogrambatch_id = _tprogrambatch_id
									  and confirmation_flag = 'Y'
									  and status_code = 'A'
				LOOP 	
					if not exists (select * from trng_trn_tfeedbacktrainer
								   where tprogram_id = _tprogram_id
								   and tprogrambatch_id = _tprogrambatch_id
								   and trainer_id = v_colrec_trainer_fb.trainer_id
								   and lang_code = _feedback_lang_code
								   and questionaire_id = v_trainer_questionaire_id 
								   and question_id = v_colrec_tquestion_id.question_id) then
						call pr_iud_feedbacktrainer(v_feedbacktrainer_gid,_tprogram_id,
													_tprogrambatch_id,v_colrec_trainer_fb.trainer_id,
													_feedback_lang_code,v_trainer_questionaire_id,
													v_colrec_tquestion_id.question_id,
													v_question_type_code,'','','QCD_PENDING',_user_code,_role_code,
													_lang_code,'I',_succ_msg);

						v_feedbacktrainer_gid := 0;
					end if;
				end loop;
			end loop;
			
-- 	else
-- 		_succ_msg := 'Trainer Not Mapped';
	end if;

	--  Insert in feedback Participant
	if v_p_questionaire_type_code = 'QCD_PARTICIPANT' then
		FOR v_colrec_pquestion_id IN select question_id 
									from 	trng_mst_tquestion
									where 	questionaire_id = v_participant_questionaire_id 
									and 	status_code = 'A'						

			Loop 
				select question_type_code into v_question_type_code
				from   trng_mst_tquestion 
				where  questionaire_id = v_participant_questionaire_id
				and    question_id = v_colrec_pquestion_id.question_id
				and    status_code = 'A';
				
				update  trng_trn_ttprogramparticipant
			    set 	feedback_status = 'QCD_INITIATED'
			    where 	tprogram_id = _tprogram_id 
			    and 	tprogrambatch_id = _tprogrambatch_id
			    and 	attendance_flag = 'QCD_YES'
			    and 	status_code = 'A';

			FOR v_colrec_participant_fb in select distinct participant_id from trng_trn_ttprogramparticipant
									  where tprogram_id = _tprogram_id 
									  and tprogrambatch_id = _tprogrambatch_id
									  and attendance_flag = 'QCD_YES'
									  and status_code = 'A'
				LOOP 	
					if not exists (select * from trng_trn_tfeedbackparticipant
									   where tprogram_id = _tprogram_id
									   and tprogrambatch_id = _tprogrambatch_id
									   and participant_id = v_colrec_participant_fb.participant_id
									   and lang_code = _feedback_lang_code
									   and questionaire_id = v_participant_questionaire_id
									   and question_id = v_colrec_pquestion_id.question_id) then
							call pr_iud_feedbackparticipant(v_feedbackparticipant_gid,_tprogram_id,
													_tprogrambatch_id,v_colrec_participant_fb.participant_id,
													_feedback_lang_code,v_participant_questionaire_id,
													v_colrec_pquestion_id.question_id,
													v_question_type_code,'','','QCD_PENDING',_user_code,_role_code,
													_lang_code,'I',_succ_msg);

							v_feedbackparticipant_gid := 0;
					end if;
				end loop;
			end loop;
-- 	else
-- 		_succ_msg := 'Participant Not Mapped';
	end if;
	
	
	call pr_sms_trainerparturllink(_tprogram_id,_tprogrambatch_id,_feedback_lang_code,
								   _user_code,_role_code,_lang_code,_succ_msg);
								   
	call pr_email_feedbackpart(_user_code,_role_code,_lang_code);
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_ins_tpreprogmparticipant(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
	/*
		Created By : Mohan S
		Created Date : 10-11-2022
		
		Updated By : Mohan S
		Updated Date : 23-02-2023
		
		SP Code : B07TMPCXX
		version no : 08
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_batch_count udd_int := 0;
	v_status_code udd_code := '';
begin 
	--This program is already downloaded in mobile
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PPACUD_023' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_023', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	-- Get batch status
	select status_code  into v_status_code
	from   trng_trn_ttprogrambatch
	where  tprogrambatch_id = _tprogrambatch_id;
	
	-- This batch status is already completed, So unable to map the previous day participant
	if v_status_code = 'C'
	then
		v_err_code := v_err_code || 'VB07PPACUD_010' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_010', _lang_code)  || v_new_line;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
    -- stored procedure body
	if exists ( select * from trng_trn_ttprogramparticipant
				where tprogram_id = _tprogram_id 
				and   tprogrambatch_id = _tprogrambatch_id
				and   batch_date = _batch_date::udd_date - Interval '1 day'
				and   status_code = 'A') then
	
	    -- Internal participant mapping area
		insert into trng_trn_ttprogramparticipant 
				(tprogram_id,tprogrambatch_id,batch_date,participant_type_code,
				participant_subtype_code,participant_id,participant_name,
				participant_ll_name,fatherhusband_name,fatherhusband_ll_name,
				shg_id,mobile_no,email_id,gender_code,attendance_flag,
				status_code,created_date,created_by)
		select distinct a.* from (	
		select  _tprogram_id,_tprogrambatch_id,_batch_date,participant_type_code,
				participant_subtype_code,participant_id,participant_name,
				participant_ll_name,fatherhusband_name,fatherhusband_ll_name,
				shg_id,mobile_no,email_id,gender_code,attendance_flag,
				status_code,now(),_user_code
		from 	trng_trn_ttprogramparticipant
		where 	tprogram_id = _tprogram_id
		and   	tprogrambatch_id = _tprogrambatch_id
		and   	batch_date = _batch_date::udd_date - Interval '1 day'
		and     participant_type_code <> 'QCD_EXTERNAL'
		and   	status_code = 'A') as a
		left outer join (select  _tprogram_id,_tprogrambatch_id,_batch_date,participant_type_code,
				participant_subtype_code,participant_id,participant_name,
				participant_ll_name,fatherhusband_name,fatherhusband_ll_name,
				shg_id,mobile_no,email_id,gender_code,attendance_flag,
				status_code,now(),_user_code
		from 	trng_trn_ttprogramparticipant
		where 	tprogram_id = _tprogram_id
		and   	tprogrambatch_id = _tprogrambatch_id
		and   	batch_date = _batch_date
		and     participant_type_code <> 'QCD_EXTERNAL'
		and   	status_code = 'A' ) as d on a.participant_id = d.participant_id
		where d.participant_id isnull;
		
		 -- External participant mapping area
		insert into trng_trn_ttprogramparticipant 
				(tprogram_id,tprogrambatch_id,batch_date,participant_type_code,
				participant_subtype_code,participant_id,participant_name,
				participant_ll_name,fatherhusband_name,fatherhusband_ll_name,
				shg_id,mobile_no,email_id,gender_code,attendance_flag,
				status_code,created_date,created_by)
		select distinct a.* from (	
		select  _tprogram_id,_tprogrambatch_id,_batch_date,participant_type_code,
				participant_subtype_code,participant_id,participant_name,
				participant_ll_name,fatherhusband_name,fatherhusband_ll_name,
				shg_id,mobile_no,email_id,gender_code,attendance_flag,
				status_code,now(),_user_code
		from 	trng_trn_ttprogramparticipant
		where 	tprogram_id = _tprogram_id
		and   	tprogrambatch_id = _tprogrambatch_id
		and   	batch_date = _batch_date::udd_date - Interval '1 day'
		and     participant_type_code = 'QCD_EXTERNAL'
		and   	status_code = 'A') as a
		left outer join (select  _tprogram_id,_tprogrambatch_id,_batch_date,participant_type_code,
				participant_subtype_code,participant_id,participant_name,
				participant_ll_name,fatherhusband_name,fatherhusband_ll_name,
				shg_id,mobile_no,email_id,gender_code,attendance_flag,
				status_code,now(),_user_code
		from 	trng_trn_ttprogramparticipant
		where 	tprogram_id = _tprogram_id
		and   	tprogrambatch_id = _tprogrambatch_id
		and   	batch_date = _batch_date
		and     participant_type_code = 'QCD_EXTERNAL'
		and   	status_code = 'A' ) as d 
		on 		a.participant_type_code = 'QCD_EXTERNAL'
		where   a.participant_name <> coalesce(d.participant_name,'') 
		or      a.mobile_no <> coalesce(d.mobile_no,'') ;
		
		-- batch count updation
		select count(*) into v_batch_count
		from trng_trn_ttprogramparticipant
		where tprogram_id = _tprogram_id
		and tprogrambatch_id = _tprogrambatch_id
		and batch_date = _batch_date
		and status_code = 'A';

		update trng_trn_ttprogrambatchcount
		set    batch_count = v_batch_count,
			   updated_date = now(),
			   updated_by = _user_code
		where tprogram_id = _tprogram_id
		and tprogrambatch_id = _tprogrambatch_id
		and batch_date = _batch_date
		and status_code = 'A';
		
		_succ_msg := (select fn_get_msg('SB07PPACUD_005', _lang_code));
	else
		_succ_msg := (select fn_get_msg('EB07PPACUD_002', _lang_code));
	end if ;
		 		 
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_ins_tprogrambatchcount(INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _start_date udd_date, _end_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 19-10-2022
		SP Code : B07PBCCXX
		
		Updated By : Satheesh 
		Updated Date : 16-03-2023
		
		Version No : 02
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_count udd_int := 0;
	v_batch_date udd_date := null;
begin 	
		-- Validation
		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogrambatch_id   = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PBCCXX_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCXX_004', _lang_code)  || v_new_line;	
		end if;

		-- Start date validation
		if _start_date isnull then
			v_err_code := v_err_code || 'VB07PBCCXX_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCXX_001', _lang_code)|| v_new_line;	
		end if;
		
		-- End date validation
		if _end_date isnull then
			v_err_code := v_err_code || 'VB07PBCCXX_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCXX_002', _lang_code)|| v_new_line;	
		end if;
		
		-- Start date should less than end date
		if _start_date > _end_date then
			v_err_code := v_err_code || 'VB07PBCCXX_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCXX_003', _lang_code)|| v_new_line;	
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBCCXX_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCXX_005', _lang_code)|| v_new_line;	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
		select (_end_date::udd_date - _start_date::udd_date)
		into 	v_count;
		v_count := v_count + 1;
		v_batch_date := _start_date;
		
	while v_count > 0 loop
			-- Batch Count Insert area 
					insert into trng_trn_ttprogrambatchcount 
					(
						tprogram_id,
						tprogrambatch_id,
						batch_date,
						batch_count,
						status_code,
						created_date,
						created_by
					)
					values
					(
						_tprogram_id,
						_tprogrambatch_id,
						v_batch_date,
						0,
						'A',
						now(),
						_user_code
					) 
					on CONFLICT ( tprogram_id,tprogrambatch_id,
								   batch_date )  do update set  
											tprogram_id = _tprogram_id,
											tprogrambatch_id = _tprogrambatch_id,
											updated_date = now(),
											updated_by = _user_code;
					
					v_batch_date := v_batch_date + INTERVAL '1 Days';
					v_count := v_count - 1;
				    v_succ_code := 'SB07PBCCUD_001';
	end loop;

	if(v_succ_code <> '' )then
			 _succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_ins_venueothers(INOUT _venue_gid udd_int, INOUT _venue_id udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _venue_name udd_desc, _venue_ll_name udd_desc, _venue_type_code udd_code, _venue_subtype_code udd_code, _contact_name udd_desc, INOUT _venueaddr_gid udd_int, _addr_line udd_text, _addr_pincode udd_pincode, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 17-10-2022
		
		Updated By : Mangai
		Updated Date : 28-03-2023
		
		SP Code : B06VENCXX
		Version No : 06
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	
	v_start_date udd_date := null;
	v_end_date udd_date:= null;
	v_execution_status_code udd_code := '';
	
begin
	-- Venu header save
	/*insert into trng_mst_tvenue (venue_id,venue_name,venue_ll_name,venue_type_code,venue_subtype_code,
								 contact_name,indefinite_flag,others_flag,status_code,created_by,created_date,
								 row_timestamp)
						  values(_venue_id,_venue_name,_venue_ll_name,_venue_type_code,'-',
								 _venue_subtype_code,'N','Y','A',_user_code,now(),now());*/
								 
	/*if _venue_type_code = 'QCD_OTHERS' then
		if exists(select 	count(*)  
				from 	trng_mst_tvenueaddr
				where   addr_line = _addr_line
				and     state_code = _state_code
				and     district_code = _district_code
				and     block_code = _block_code
				and     grampanchayat_code = _grampanchayat_code  
				and     village_code = _village_code  
			    and     status_code = 'A'
				group	by addr_line,state_code,district_code,block_code,grampanchayat_code,
				  			village_code,status_code
				having	count('*') = 1) 
				
		then
		v_err_code := v_err_code || 'EB00CMNCMN_002';
		v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_002', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;*/
	
	-- Get program execution status
	select execution_status_code into v_execution_status_code
	from   trng_trn_ttprogram 
	where  tprogram_id = _tprogram_id
	and    status_code <> 'I';	
	
	-- This program is already scheduled. So unable to change
	if (_mode_flag = 'I' and v_execution_status_code = 'H') 
	then
			v_err_code := v_err_code || 'VB07PRGCUD_030';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_030', _lang_code) ;	
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;	 
	
	--Get batch start and end date
	select start_date,end_date
	into   v_start_date, v_end_date
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;
		
	call pr_iud_venue(_venue_gid, _venue_id, _venue_name, _venue_ll_name, _venue_type_code,
						_venue_subtype_code, '-', '', v_start_date,v_end_date, 'N', 'Y', 'A',
						'', _tprogram_id, _tprogrambatch_id, _user_code, _role_code, _lang_code,
						'I', '', _succ_msg);
	
	
	-- venu address save
	call pr_iud_venueaddr(_venueaddr_gid,_venue_id,_addr_line,_addr_pincode,
						  _state_code,_district_code,_block_code,_grampanchayat_code,
						  _village_code,'A',_user_code,_role_code,_lang_code,'I',_succ_msg);
						  
	-- Update on tprogram table for venu_id
	update 	trng_trn_ttprogrambatch 
	set 	tprogram_venue_id = _venue_id
	where 	tprogram_id = _tprogram_id
	and 	tprogrambatch_id = _tprogrambatch_id
	and 	status_code <> 'I';
				
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_attachment(INOUT _attachment_gid udd_int, _activity_code udd_code, _activity_ref_id udd_code, _doc_type_code udd_code, _doc_subtype_code udd_code, _file_name udd_desc, _file_path udd_text, _file_version udd_code, _file_size udd_code, _attachment_remark udd_desc, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 17-09-2022
		SP Code : B04COACUD
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 02
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 
	-- Validation
	if _mode_flag = 'U' and _attachment_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then 
		-- activity code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ACTIVITY'
					   and 		master_code = _activity_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_005', _lang_code) || v_new_line;	
		end if;

		-- activity reference number validation
		if _activity_code = 'QCD_COURSE' then
			if not exists (select 	* 
						   from 	trng_mst_tcourse
						   where 	course_id   = _activity_ref_id		
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04COACUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_006', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_TRAINER' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainer
						   where 	trainer_id   = _activity_ref_id		
						   and      status_code  <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04COACUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_007', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_TRAINING_ORG' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainingorg
						   where 	trngorg_id   = _activity_ref_id		
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04COACUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_008', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_VENUE' then
			if not exists (select 	* 
						   from 	trng_mst_tvenue
						   where 	venue_id   = _activity_ref_id		
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04COACUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_009', _lang_code)  || v_new_line;	
			end if;
		 elseif _activity_code = 'QCD_TRNG_PROGRAM' then
			if not exists (select 	* 
						   from 	trng_trn_ttprogram
						   where 	tprogram_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04COACUD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_010', _lang_code)  || v_new_line;	
			end if;
		 elseif _activity_code = 'QCD_QUESTIONAIRE' then
			if not exists (select 	* 
						   from 	trng_mst_tquestionaire
						   where 	questionaire_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04COACUD_011' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_011', _lang_code)  || v_new_line;	
			end if;
		end if;

		-- document type code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_DOC_TYPE'
					   and 		master_code = _doc_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COACUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_012', _lang_code) || v_new_line;	
		end if;

		-- document sub type code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_DOC_SUBTYPE'
					   and 		master_code = _doc_subtype_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COACUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_013', _lang_code) || v_new_line;	
		end if;

		-- file name validation
		if _file_name = ''
		then
			v_err_code := v_err_code || 'VB04COACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_001', _lang_code) || v_new_line;	
		end if;

		-- file path validation
		if _file_path = ''
		then
			v_err_code := v_err_code || 'VB04COACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_002', _lang_code) || v_new_line;	
		end if;

		-- file version validation
/*		if _file_version = ''
		then
			v_err_code := v_err_code || 'VB04COACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_003', _lang_code) || v_new_line;	
		end if;
*/
		-- file size validation
		if _file_size = ''
		then
			v_err_code := v_err_code || 'VB04COACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_004', _lang_code) || v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COACUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_014', _lang_code) || v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COACUD_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COACUD_015', _lang_code) || v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tattachment
				  where 	attachment_gid = _attachment_gid
				  and 		status_code = 'A'
				 ) then
			Update 	trng_mst_tattachment
			set		status_code    = 'I',
					updated_by     = _user_code,
					updated_date   = now()
			where 	attachment_gid = _attachment_gid
			and 	status_code    = 'A';
			
			v_succ_code := 'SB04COACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04COACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tattachment
					  where		attachment_gid = _attachment_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_tattachment 
			(
				activity_code,
				activity_ref_id,
				doc_type_Code,
				doc_subtype_code,
				file_name,
				file_path,
				file_version,
				file_size,
				attachment_remark,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_activity_code,
				_activity_ref_id,
				_doc_type_Code,
				_doc_subtype_code,
				_file_name,
				_file_path,
				'',
				_file_size,
				_attachment_remark,
				_status_code,
				now(),
				_user_code
			) returning attachment_gid into _attachment_gid;
			
			v_succ_code := 'SB04COACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04COACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tattachment
				   where	attachment_gid = _attachment_gid
				   and 		status_code    = 'A'
				   ) then
			update	trng_mst_tattachment 
			set 	activity_code		= _activity_code,
					activity_ref_id		= _activity_ref_id,
					doc_type_Code		= _doc_type_Code,
					doc_subtype_code	= _doc_subtype_code,
					file_name			= _file_name,
					file_path			= _file_path,
-- 					file_version		= _file_version,
					file_size			= _file_size,
					attachment_remark	= _attachment_remark,
					status_code       	= _status_code,
					updated_by        	= _user_code,
					updated_date      	= now()
			where 	attachment_gid    	= _attachment_gid
			and 	status_code       	= 'A';
			
			v_succ_code := 'SB04COACUD_002';
		else
			v_err_code := v_err_code || 'EB04COACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
-- 	if exists (	select	count(*)
-- 				from 	trng_mst_tcoursecontent
-- 			    where 	course_id       = _course_id 
-- 			   	and     coursemodule_id = _coursemodule_id
-- 			    and     lang_code       = _content_lang
-- 			    and     material_desc   = _material_desc
-- 			    and     status_code     = 'A'
-- 				group	by course_id, coursemodule_id, lang_code, material_desc
-- 				having	count('*') > 1) 
-- 	then
-- 		-- course id, course module id, language code and material description cannot be duplicate
-- 		v_err_code := v_err_code || 'EB04COCCUD_001';
-- 		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB04COCCUD_001', _lang_code),_course_id,_coursemodule_id,_lang_code,_material_desc);	
		
-- 		raise exception '%',v_err_code || '-' || v_err_msg;
-- 	else
-- 		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
-- 	end if;

	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_cadreuser(INOUT _cadreuser_id udd_code, INOUT _trainer_id udd_code, _trainer_qualification udd_text, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _photo_file_name udd_desc, _photo_file_path udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By : Mohan S
	Created Date : 21-10-2022
	SP Code : B05INTCUX
	version no : 2
*/

	v_cadreuser_name udd_desc := '';
	v_cadreuser_ll_name udd_desc := '';
	v_shg_name udd_desc := '';
	v_gender_code udd_code := '';
	v_mobile_no udd_mobile := '';
	v_mail_id udd_text := '';
	v_cadre_resource_type_code udd_code := '';
	v_cadre_role_code udd_code := '';
	v_vertical_code udd_code := '';
	v_subvertical_code udd_code := '';
	v_subvertical_jsonb udd_jsonb := '[{}]';
	v_cadre_cat_code udd_code := '';
	v_cadreuser_type_code udd_code := '';
	v_cadre_level_code udd_code := '';
	v_status_code udd_code := '';
	v_addr_line udd_text := '';
	v_addr_pincode udd_pincode := '';
	v_addr_state_code udd_code := '';
	v_addr_district_code udd_code := '';
	v_addr_block_code udd_code := '';
	v_addr_grampanchayat_code udd_code := '';
	v_addr_village_code udd_code := '';
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_grampanchayat_code udd_code := '';
	v_village_code udd_code := '';
	v_area_of_experience udd_text := '';
	v_years_of_experience udd_int := 0;
	v_bank_code udd_code := '';
	v_branch_name udd_desc := '';
	v_ifsc_code udd_code := '';
	v_acc_type_code udd_code := '';
	v_acc_no udd_code := '';
	
	v_trainer_gid udd_int := 0;
	v_trngorgn_id udd_code := 'TOR_INTERNAL';
	v_traineraddr_gid udd_int := 0;
	v_trainergeo_gid udd_int := 0;
	v_trainerbank_gid udd_int := 0;
	v_trainerdomain_gid udd_int := 0;
	v_succ_code udd_text := '';
    v_succ_msg udd_text := '';
	
begin

	-- stored procedure body
	select  cadreuser_name,cadreuser_ll_name,shg_name,gender_code,mobile_no,
			mail_id,cadre_resource_type_code,cadre_role_code,vertical_code,subvertical_code,
			cadre_cat_code,cadreuser_type_code,cadre_level_code,status_code,addr_line,addr_pincode,
			addr_state_code,addr_district_code,addr_block_code,addr_grampanchayat_code,addr_village_code,
			state_code,district_code,block_code,grampanchayat_code,bank_code,branch_name,ifsc_code,
			acc_type_code,acc_no	
	into 
			v_cadreuser_name,v_cadreuser_ll_name,v_shg_name,v_gender_code,v_mobile_no,
			v_mail_id,v_cadre_resource_type_code,v_cadre_role_code,v_vertical_code,v_subvertical_code,
			v_cadre_cat_code,v_cadreuser_type_code,v_cadre_level_code,v_status_code,v_addr_line,
			v_addr_pincode,v_addr_state_code,v_addr_district_code,v_addr_block_code,v_addr_grampanchayat_code,
			v_addr_village_code,v_state_code,v_district_code,v_block_code,v_grampanchayat_code,v_bank_code,
			v_branch_name,v_ifsc_code,v_acc_type_code,v_acc_no
	from 	trng_mst_tcadreuser 
	where 	cadreuser_id = _cadreuser_id
	and 	status_code = 'A';
	
	if v_subvertical_code = '' or v_subvertical_code isnull then
		v_subvertical_jsonb := v_subvertical_jsonb;
	else 
		v_subvertical_jsonb := ('[{""subvertical"":""' || v_subvertical_code || '""}]')::udd_jsonb ;
	end if;
	
	-- Trainer save 
	CALL public.pr_iud_internaltrainer(v_trainer_gid,v_trngorgn_id,'QCD_INTERNAL',_trainer_id,_cadreuser_id,
									   v_cadreuser_name,v_cadreuser_ll_name,'QCD_INTERNAL',
									   v_cadre_level_code,v_mobile_no,v_mail_id,v_gender_code,
									   v_cadre_resource_type_code,_trainer_qualification,_validity_from,
									   _validity_to,_indefinite_flag,_photo_file_name,_photo_file_path,
									   v_status_code,_user_code,_role_code,_lang_code,_succ_msg);
	
	-- Trainer Address Save
	CALL public.pr_iud_internaltraineraddr(v_traineraddr_gid,_trainer_id,v_addr_line,v_addr_pincode,
										   v_addr_state_code,v_addr_district_code,v_addr_block_code,v_addr_grampanchayat_code,
										   v_addr_village_code,v_status_code,_user_code,_role_code,_lang_code,
										   _succ_msg);
	
	-- Trainer Geography Save
	CALL public.pr_iud_internaltrainergeo(v_trainergeo_gid,_trainer_id,v_cadre_level_code,v_state_code,
										  v_district_code,v_block_code,v_grampanchayat_code,v_status_code,
										  _user_code,_role_code,_lang_code,_succ_msg);
										  
		
	-- Trainer Domain
	select  trainerdomain_gid into v_trainerdomain_gid
	from 	trng_mst_ttrainerdomain
	where 	trainer_id = _trainer_id
	and 	status_code = 'A' order by 1 desc limit 1;
	
	v_trainerdomain_gid := coalesce(v_trainerdomain_gid,0);
	-- Insert or Update
	if  v_trainerdomain_gid = 0 then 
		insert into trng_mst_ttrainerdomain 
			(
				trainer_id,
				vertical_code,
				subvertical_jsonb,
				area_of_experience,
				yrs_of_experience,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				v_vertical_code,
				v_subvertical_jsonb,
				'-',
				0,
				v_status_code,
				now(),
				_user_code
			) returning trainerdomain_gid into v_trainerdomain_gid;
			v_succ_code := 'SB00CMNCMN_001';

	else
			update	trng_mst_ttrainerdomain 
			set 	vertical_code		= v_vertical_code,
					subvertical_jsonb	= v_subvertical_jsonb,
					status_code 		= v_status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trainerdomain_gid 	= v_trainerdomain_gid
			and 	status_code 		= 'A'
			returning trainerdomain_gid into v_trainerdomain_gid;
			v_succ_code := 'SB00CMNCMN_002';
			

	end if;
	
	-- Trainer Bank Save
	select  trainerbank_gid into v_trainerbank_gid
	from 	trng_mst_ttrainerbank
	where 	trainer_id = _trainer_id
	and 	status_code = 'A' order by 1 desc limit 1;
	
	v_trainerbank_gid := coalesce(v_trainerbank_gid,0);
	-- Insert or Update
	if  v_trainerbank_gid = 0 then 
		insert into trng_mst_ttrainerbank 
				(
					trainer_id,
					bank_code,
					branch_name,
					ifsc_code,
					acc_type_code,
					acc_no,
					status_code,
					created_date,
					created_by
				)
				values
				(
					_trainer_id,
					v_bank_code,
					v_branch_name,
					v_ifsc_code,
					v_acc_type_code,
					v_acc_no,
					v_status_code,
					now(),
					_user_code
				) returning trainerbank_gid into v_trainerbank_gid;
				v_succ_code := 'SB00CMNCMN_001';

		else
			update	trng_mst_ttrainerbank 
			set 	bank_code		= v_bank_code,
					branch_name		= v_branch_name,
					ifsc_code		= v_ifsc_code,
					acc_type_code	= v_acc_type_code,
					acc_no			= v_acc_no,
					status_code 	= v_status_code,
					updated_by 		= _user_code,
					updated_date 	= now()
			where 	trainerbank_gid = v_trainerbank_gid
			and 	status_code 	= 'A'
			returning trainerbank_gid into v_trainerbank_gid;
			v_succ_code := 'SB00CMNCMN_002';
			

	end if;
	
	v_succ_msg := 'Success';
	
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_course(INOUT _course_gid udd_int, INOUT _course_id udd_code, _course_name udd_desc, _course_ll_name udd_desc, _course_desc udd_desc, _course_level_jsonb udd_jsonb, _course_type_jsonb udd_jsonb, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _category_jsonb udd_jsonb, _sp_category_jsonb udd_jsonb, _course_duration_days udd_smallint, _course_duration_hours udd_smallint, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _participant_jsonb udd_jsonb, _min_participant_count udd_smallint, _max_participant_count udd_smallint, _status_code udd_code, _deactivation_reason_code udd_code, _user_code udd_code, _user_level_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 13-09-2022
		
		Updated By   : Mohan S
		Updated Date : 23-12-2022 
		
		SP Code : B04COUCUD
		Version No : 09
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_status_desc udd_code := '';
	
	v_course_level udd_code;
	v_course_type udd_code;
	v_subvertical udd_code;
	v_category udd_code;
	v_sp_category udd_code;
	
	v_note_gid udd_int := 0;
	v_status_code  udd_code := '';
	v_course_name  udd_code := '';
	v_course_ll_name  udd_desc := '';
	v_course_desc  udd_desc := '';
	v_course_level_jsonb  udd_jsonb := '[{}]';
	v_course_type_jsonb  udd_jsonb := '[{}]';
	v_vertical_code  udd_code := '';
	v_subvertical_jsonb  udd_jsonb := '[{}]';
	
	v_start_date udd_date := null;
	v_end_date   udd_date := null;
	v_execution_status_code udd_code := '';
	
	v_courseapproval_gid udd_int := 0;
	v_initiated_date udd_datetime := null;
	v_course_id udd_code := '';
	v_colrec record;
	x record;
	v_now udd_date := null;
	v_tprogram_id udd_code := '';
begin 
	v_now := (select now());
	
	-- Validation
	if _mode_flag = 'U' and _course_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	-- Get course id from course table against course gid
	select course_id into v_course_id
	from   trng_mst_tcourse
	where  course_gid  = _course_gid
	and    status_code <> 'I';
	
	-- Get execution status, start date and end date from program against course id 
	select start_date,end_date,execution_status_code
	into   v_start_date,v_end_date,v_execution_status_code
	from   trng_trn_ttprogram
	where  course_id   = v_course_id
	and    status_code <> 'I'
	and    execution_status_code <> 'C';
	
	-- Before Edit or Delete whether that the course is already mapped in some program or not check 
	if _mode_flag = 'U' or _mode_flag = 'D' then
		if exists (select '*' from trng_trn_ttprogram
				   where course_id = v_course_id
				   and execution_status_code in('D','H','P')
				   and end_date >= now() :: udd_date
				   and status_code in ('S','A') ) then
			v_err_code := v_err_code || 'VB04COUCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_011', _lang_code) || v_new_line;
		end if;
	 end if;
	
	if _mode_flag <> 'D' then
		-- Course name validation
		if _course_name = '' then
			v_err_code := v_err_code || 'VB04COUCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_001', _lang_code) || v_new_line;
		end if;

		-- Course Desc validation
		if _course_desc = '' then
			v_err_code := v_err_code || 'VB04COUCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_002', _lang_code) || v_new_line;
		end if;
		
		-- course duration days validation
		if _course_duration_days < 0 then
			v_err_code := v_err_code || 'VB04COUCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_010', _lang_code) || v_new_line;
		end if;

		-- min participant count negative validation
		if _min_participant_count < 0 then
			v_err_code := v_err_code || 'VB04COUCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_005', _lang_code) || v_new_line;
		end if;

		-- max participant count negative validation
		if _max_participant_count < 0 then
			v_err_code := v_err_code || 'VB04COUCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_006', _lang_code) || v_new_line;
		end if;

		-- Course level validation
		for v_course_level in (select * from jsonb_to_recordset(_course_level_jsonb) as b (course_level udd_code))
		LOOP 
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_COURSE_LEVEL'
						   and 		master_code = v_course_level
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_004', _lang_code) || v_new_line;
			end if;
		end loop;

		-- Course type validation
		for v_course_type in (select * from jsonb_to_recordset(_course_type_jsonb) as b (course_type udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_COURSE_TYPE'
						   and 		master_code = v_course_type
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_005', _lang_code) || v_new_line;	
			end if;
		end loop;

		-- vertical code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = _vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_006', _lang_code) || v_new_line;	
		end if;

		-- subvertical code validation
		for v_subvertical in (select * from jsonb_to_recordset(_subvertical_jsonb) as b (subvertical udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_SUBVERTICAL'
						   and 		master_code = v_subvertical
						   and 		depend_parent_code = 'QCD_VERTICAL'
						   and 		depend_code = _vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_007', _lang_code) || v_new_line;
			end if;
		end loop;

		-- category code validation
		if _category_jsonb <> '[{}]' then
			for v_category in (select * from jsonb_to_recordset(_category_jsonb) as b (category udd_code))
			LOOP
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_CATEGORY'
							   and 		master_code = v_category
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB00CMNCMN_039' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_039', _lang_code) || v_new_line;
				end if;
			end loop;
		end if;

		-- Spcategory code validation
		if _sp_category_jsonb <> '[{}]' then
			for v_sp_category in (select * from jsonb_to_recordset(_sp_category_jsonb) as b (sp_category udd_code))
			LOOP
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_SP_CATEGORY'
							   and 		master_code = v_sp_category
-- 							   and      depend_code = v_category
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB00CMNCMN_040' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_040', _lang_code) || v_new_line;
				end if;
			end loop;
		end if;

		-- course module check 
		if _mode_flag = 'U' or _mode_flag = 'D' and _course_id <> '' then
			if exists ( select distinct subvertical_code from trng_mst_tcoursemodule 
						where  course_id = _course_id and status_code = 'A'
						and subvertical_code 
						not in (select * from jsonb_to_recordset(_subvertical_jsonb) as b 
						(subvertical udd_code))) then
				v_err_code := v_err_code || 'VB04COUCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_007', _lang_code) || v_new_line;
			end if;
		end if;

		/*-- Training program course check
		if exists ( select * from trng_trn_ttprogram 
					where  course_id 	 = _course_id
					and    status_code   = 'A'
					and    execution_status_code <> 'C') then
				v_err_code := v_err_code || 'VB04COUCUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_009', _lang_code)  || v_new_line;	
		end if;*/

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_001', _lang_code) || v_new_line;	
		end if;

		-- deactivation reason code validation
		if _deactivation_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_057' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_057', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- validity from validation
		if _validity_from isnull
		then
				v_err_code := v_err_code || 'VB00CMNCMN_084' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_084', _lang_code) || v_new_line;	
		end if;
		
		-- Validity to or indefinite flag validation
		if _validity_from IS NOT NULL then
			if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
				_validity_to := null;
			end if;
			if _validity_to isnull and _indefinite_flag = 'N' then
				v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
			end if;
		end if;

		-- Validitiy to validation
		if  _validity_to < _validity_from then
			v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_003', _lang_code) || v_new_line;	
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_mst_tcourse
		where	course_gid = _course_gid;

		v_timestamp	:= coalesce(v_timestamp, '');

		IF (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB00CMNCMN_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_002', _lang_code) || v_new_line;	
		end if;
	end if;
	
		-- deactivation validation
	if _mode_flag = 'D' and _course_gid <> 0 then
		if _deactivation_reason_code isnull 
			then
				v_err_code := v_err_code || 'VB00CMNCMN_076' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_076', _lang_code) || v_new_line;
		else
			if _deactivation_reason_code notnull then
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_DEA_REASON'
							   and 		master_code = _deactivation_reason_code
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB00CMNCMN_075' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_075', _lang_code) || v_new_line;	
				end if;
			end if;
		end if;
	end if;
		
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcourse
				  where 	course_gid = _course_gid
				  and 		status_code <> 'I'
				 ) then
						-- Insert in note table
			CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_COURSE',v_course_id,null,'I','',
										_deactivation_reason_code,'',_user_code,_role_code,_lang_code, 
										'I',_succ_msg); 
				
			Update 	trng_mst_tcourse
			set		status_code = 'I',
					deactivation_reason_code = _deactivation_reason_code,
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	course_gid = _course_gid 
			and 	status_code <> 'I';
			
			v_succ_code := 'SB04COUCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB00CMNCMN_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcourse
					  where		course_gid = _course_gid 
					  and 		status_code = 'A'
					 ) then
			insert into trng_mst_tcourse 
			(
				course_id,
				course_name,
				course_ll_name,
				course_desc,
				course_level_jsonb,
				course_type_jsonb,
				vertical_code,
				subvertical_jsonb,
				category_jsonb,
				sp_category_jsonb,
				course_duration_days,
				validity_from,
				validity_to,
				indefinite_flag,
				participant_jsonb,
				min_participant_count,
				max_participant_count,
				status_code,
				deactivation_reason_code,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_course_id,
				_course_name,
				_course_ll_name,
				_course_desc,
				_course_level_jsonb,
				_course_type_jsonb,
				_vertical_code,
				_subvertical_jsonb,
				_category_jsonb,
				_sp_category_jsonb,
				_course_duration_days,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				_participant_jsonb,
				_min_participant_count,
				_max_participant_count,
				_status_code,
				_deactivation_reason_code,
				now(),
				_user_code,
				now()
			) returning course_gid into _course_gid;
			_course_id := 'COU_' || _course_gid;
			-- Set Course id 
			update trng_mst_tcourse 
			set course_id = _course_id
			where course_gid = _course_gid;
			
-- 			v_status_desc := (select fn_get_masterdesc('QCD_STATUS',_status_code,_lang_code));
			
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_COURSE', 
									_course_id, 
									null,
									_status_code,
									'',
									'',
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;
			
			v_succ_code := 'SB04COUCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB00CMNCMN_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcourse
				   where	course_gid = _course_gid 
				   and 		status_code <> 'I'
				   ) then
				   
			 -- Get status code
			 select status_code into v_status_code
			 from 	trng_mst_tcourse where course_id = _course_id
			 and 	status_code <> 'I';
			 			 
			-- Direct approver 
			if _role_code = 'TrainingMaster' and v_status_code = 'D' and _user_level_code = '99'
			then
				_status_code := 'A';
				v_initiated_date := (select now());
					
				insert into trng_mst_tcourseapproval(course_id,initiated_date,approver_id,
									approval_date,approval_status_code,reject_reason_code,
									approver_remark,created_date,created_by)
							values(_course_id,v_initiated_date,_user_code,v_initiated_date,
								   _status_code,'','',now(),_user_code) ;
					
/*					CALL public.pr_iud_courseapproval( 
												v_courseapproval_gid, 
												_course_id, 
												v_initiated_date, 
												_user_code, 
												null, 
												_status_code, 
												'',
												'',
												_user_code,
												_role_code,
												_lang_code,
												'I',
												_succ_msg
												) ;
												*/
			end if;
			 
			 if v_status_code = _status_code and _status_code not in ('A','R','B','D') then
				 v_err_code := v_err_code || 'VB04COUCUD_008';
				 v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_008', _lang_code) || v_new_line;	
				
				v_err_code := substring(v_err_code,1,length(v_err_code)-1);
				RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
			 end if;
			 
			 -- Check if status code is Active
			 if v_status_code = 'A' then
				 select course_name,course_ll_name,course_desc,course_level_jsonb
						course_type_jsonb,vertical_code,subvertical_jsonb
				 into	v_course_name,v_course_ll_name,v_course_desc,v_course_level_jsonb
						v_course_type_jsonb,v_vertical_code,v_subvertical_jsonb
				 from 	trng_mst_tcourse 
				 where 	course_id = _course_id;
				
				 if (v_course_name <> _course_name or v_course_ll_name <> _course_ll_name or
				 	 v_course_level_jsonb <> _course_level_jsonb or v_course_type_jsonb <> _course_type_jsonb or
					 v_vertical_code <> _vertical_code or v_subvertical_jsonb <> _subvertical_jsonb) then
							_status_code := _status_code;
				 end if;
			  end if;
			
			update	trng_mst_tcourse 
			set 	course_name =  _course_name, 
				 	course_ll_name =  _course_ll_name, 
					course_desc = _course_desc,
					course_level_jsonb = _course_level_jsonb,
					course_type_jsonb = _course_type_jsonb,
					vertical_code = _vertical_code,
					subvertical_jsonb = _subvertical_jsonb,
					category_jsonb = _category_jsonb ,
					sp_category_jsonb = _sp_category_jsonb ,
					course_duration_days = _course_duration_days ,
					course_duration_hours = _course_duration_hours ,
					validity_from = _validity_from,
					validity_to = _validity_to ,
					indefinite_flag = _indefinite_flag,
					participant_jsonb = _participant_jsonb ,
					min_participant_count  = _min_participant_count ,
					max_participant_count = _max_participant_count,
					status_code = _status_code,
					deactivation_reason_code = _deactivation_reason_code,
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	course_gid = _course_gid 
			and 	status_code <> 'I';
			
			-- Course approval table update
/*			if _status_code = 'B' then
				if exists (select * 
						   from   trng_mst_tcourseapproval
						   where  course_id = _course_id
						   and    approval_status_code = 'S'
						   ) then
				 	update trng_mst_tcourseapproval
					set    approval_status_code = 'B',
					       updated_by  = _user_code,
						   updated_date = now()
					where  course_id = _course_id
					and    approval_status_code = 'S';
				end if;
			end if;
*/
			-- Insert in note table -- 
			if _status_code not in ('R','D') then
				CALL public.pr_iud_notewithcode( 
										v_note_gid, 
										'QCD_COURSE', 
										_course_id,
										null,
										_status_code, 
										'',
										'',
										'',
										_user_code,
										_role_code, 
										_lang_code, 
										'I', 
										_succ_msg 
										) ;
			end if;
									
			v_succ_code := 'SB04COUCUD_002';			
			
		else
			v_err_code := v_err_code || 'EB00CMNCMN_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
		
	if exists (	select	count(*)
				from 	trng_mst_tcourse
			    where 	course_name = _course_name 
			    -- and 	status_code <> 'I'
				group	by course_name
				having	count('*') > 1) 
	then
		-- Course name cannot be duplicated
		v_err_code := v_err_code || 'EB04COUCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB04COUCUD_001', _lang_code),_course_name);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || format(fn_get_msg(v_succ_code,_lang_code),_course_id,_course_name);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_course_new(INOUT _course_gid udd_int, INOUT _course_id udd_code, _course_name udd_desc, _course_ll_name udd_desc, _course_desc udd_desc, _course_level_jsonb udd_jsonb, _course_type_jsonb udd_jsonb, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _category_jsonb udd_jsonb, _sp_category_jsonb udd_jsonb, _course_duration_days udd_smallint, _course_duration_hours udd_smallint, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _participant_jsonb udd_jsonb, _min_participant_count udd_smallint, _max_participant_count udd_smallint, _status_code udd_code, _deactivation_reason_code udd_code, INOUT _courseapproval_gid udd_int, INOUT _approver_id udd_code, _reject_reason_code udd_code, _approver_remark udd_desc, _certificate_flag udd_flag, _user_code udd_code, _user_level_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 26-12-2022
		
		Updated By : Mangai
		Updated Date : 12-04-2023
		
		SP Code : B04COUCUD
		Version No : 12
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_status_desc udd_code := '';
	
	v_course_level udd_code;
	v_course_type udd_code;
	v_subvertical udd_code;
	v_category udd_code;
	v_sp_category udd_code;
	
	v_note_gid udd_int := 0;
	v_status_code  udd_code := '';
	v_course_name  udd_code := '';
	v_course_ll_name  udd_desc := '';
	v_course_desc  udd_desc := '';
	v_course_level_jsonb  udd_jsonb;
	v_course_level_jsonb_count  udd_int := 0;
	v_course_type_jsonb  udd_jsonb;
	v_course_type_jsonb_count  udd_int := 0;
	v_vertical_code  udd_code;
	v_subvertical_jsonb  udd_jsonb;
	v_subvertical_jsonb_count  udd_int := 0;
	
	v_start_date udd_date := null;
	v_end_date   udd_date := null;
	v_execution_status_code udd_code := '';
	
	v_courseapproval_gid udd_int := 0;
	v_initiated_date udd_datetime := null;
	v_course_id udd_code := '';
	v_now udd_date := null;
	v_tprogram_id udd_code := '';
	
	v_user_level_code udd_code := '';
	v_created_by udd_code := '';
	v_updated_by udd_code := '';
	v_approver_id udd_code := '';
begin 
	v_now := (select now());
	
	-- Validation
	if _mode_flag = 'U' and _course_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	-- Get user level code
-- 	select fn_get_userlevelcode(_user_code) into v_userlevel;
	
	-- Get course id from course table against course gid
	select course_id, status_code into v_course_id, v_status_code
	from   trng_mst_tcourse
	where  course_gid  = _course_gid
	and    status_code <> 'I';
	
	-- Get Approver id from course approval table
	select approver_id into v_approver_id
	from   trng_mst_tcourseapproval
	where  courseapproval_gid = _courseapproval_gid; 
	
	-- Get execution status, start date and end date from program against course id 
	select start_date,end_date,execution_status_code
	into   v_start_date,v_end_date,v_execution_status_code
	from   trng_trn_ttprogram
	where  course_id   = v_course_id
	and    status_code <> 'I'
	and    execution_status_code <> 'C';
	
	if _mode_flag = 'U' and v_status_code = 'A' and _status_code = 'S'
	then
			v_err_code := v_err_code || 'VB04COUCUD_012' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_012', _lang_code) || v_new_line;
			raise exception '%',v_err_code || ' -' || v_err_msg;
	end if;
	
	-- Before Edit or Delete whether that the course is already mapped in some program or not check 
	if _mode_flag = 'U' or _mode_flag = 'D' then
		if exists (select '*' from trng_trn_ttprogram
				   where course_id = v_course_id
				   and execution_status_code in('D','H','P')
				   and end_date >= now() :: udd_date
				   and status_code in ('S','A') ) then
			v_err_code := v_err_code || 'VB04COUCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_011', _lang_code) || v_new_line;
		end if;
	 end if;
	 
	-- course module and content mandatory for course submission
	if _mode_flag = 'U' and _status_code = 'S' then
		if not exists(select * from trng_mst_tcoursemodule
					  where  course_id = _course_id
					  and    status_code = 'A')
		then
			v_err_code := v_err_code || 'VB04COUCUD_013' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_013', _lang_code) || v_new_line;
			raise exception '%',v_err_code || ' -' || v_err_msg;	
		end if;
		
		if not exists(select * from trng_mst_tcoursecontent
					  where  course_id = _course_id
					  and    status_code = 'A')
		then
			v_err_code := v_err_code || 'VB04COUCUD_014' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_014', _lang_code) || v_new_line;
			raise exception '%',v_err_code || ' -' || v_err_msg;	
		end if;
	end if;
	
	if _mode_flag <> 'D' then
		-- Course name validation
		if _course_name = '' then
			v_err_code := v_err_code || 'VB04COUCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_001', _lang_code) || v_new_line;
		end if;

		-- Course Desc validation
		if _course_desc = '' then
			v_err_code := v_err_code || 'VB04COUCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_002', _lang_code) || v_new_line;
		end if;
		
		-- course duration days validation
		if _course_duration_days < 0 then
			v_err_code := v_err_code || 'VB04COUCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_010', _lang_code) || v_new_line;
		end if;

		-- min participant count negative validation
		if _min_participant_count < 0 then
			v_err_code := v_err_code || 'VB04COUCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_005', _lang_code) || v_new_line;
		end if;

		-- max participant count negative validation
		if _max_participant_count < 0 then
			v_err_code := v_err_code || 'VB04COUCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_006', _lang_code) || v_new_line;
		end if;
		
		-- Approver id validation
		if _approver_id = '' and _status_code = 'S' and _user_level_code <> '99' then
				v_err_code := v_err_code || 'VB04CAPCUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_002', _lang_code) || v_new_line;	
		end if;
		
		-- Course level validation
		for v_course_level in (select * from jsonb_to_recordset(_course_level_jsonb) as b (course_level udd_code))
		LOOP 
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_COURSE_LEVEL'
						   and 		master_code = v_course_level
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04COUCUD_015' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_015', _lang_code) || v_new_line;
			end if;
		end loop;

		-- Course type validation
		for v_course_type in (select * from jsonb_to_recordset(_course_type_jsonb) as b (course_type udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_COURSE_TYPE'
						   and 		master_code = v_course_type
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04COUCUD_016' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_016', _lang_code) || v_new_line;	
			end if;
		end loop;

		-- vertical code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = _vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COUCUD_017' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_017', _lang_code) || v_new_line;	
		end if;

		-- subvertical code validation
		for v_subvertical in (select * from jsonb_to_recordset(_subvertical_jsonb) as b (subvertical udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_SUBVERTICAL'
						   and 		master_code = v_subvertical
						   and 		depend_parent_code = 'QCD_VERTICAL'
						   and 		depend_code = _vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04COUCUD_018' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_018', _lang_code) || v_new_line;
			end if;
		end loop;

		-- category code validation
		if _category_jsonb <> '[{}]' then
			for v_category in (select * from jsonb_to_recordset(_category_jsonb) as b (category udd_code))
			LOOP
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_CATEGORY'
							   and 		master_code = v_category
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB04COUCUD_019' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_019', _lang_code) || v_new_line;
				end if;
			end loop;
		end if;

		-- Spcategory code validation
		if _sp_category_jsonb <> '[{}]' then
			for v_sp_category in (select * from jsonb_to_recordset(_sp_category_jsonb) as b (sp_category udd_code))
			LOOP
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_SP_CATEGORY'
							   and 		master_code = v_sp_category
-- 							   and      depend_code = v_category
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB04COUCUD_020' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_020', _lang_code) || v_new_line;
				end if;
			end loop;
		end if;

		-- course module check 
		if _mode_flag = 'U' or _mode_flag = 'D' and _course_id <> '' then
			if exists ( select distinct subvertical_code from trng_mst_tcoursemodule 
						where  course_id = _course_id and status_code = 'A'
						and subvertical_code 
						not in (select * from jsonb_to_recordset(_subvertical_jsonb) as b 
						(subvertical udd_code))) then
				v_err_code := v_err_code || 'VB04COUCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_007', _lang_code) || v_new_line;
			end if;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COUCUD_021' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_021', _lang_code) || v_new_line;	
		end if;

		-- deactivation reason code validation
		if _deactivation_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04COUCUD_022' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_022', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- validity from validation
-- 		if _validity_from isnull
-- 		then
-- 				v_err_code := v_err_code || 'VB04COUCUD_027' || ',';
-- 				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_027', _lang_code) || v_new_line;	
-- 		end if;
		
		-- Validity to or indefinite flag validation
		if _validity_from IS NOT NULL then
			if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
				_validity_to := null;
			end if;
			if _validity_to isnull and _indefinite_flag = 'N' then
				v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
			end if;
		end if;

		-- Validitiy to validation
		if  _validity_to < _validity_from then
			v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COUCUD_023' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_023', _lang_code) || v_new_line;	
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_mst_tcourse
		where	course_gid = _course_gid;

		v_timestamp	:= coalesce(v_timestamp, '');

		IF (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB04COUCUD_024' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_024', _lang_code) || v_new_line;	
		end if;
	end if;
	
		-- deactivation validation
	if _mode_flag = 'D' and _course_gid <> 0 then
		if _deactivation_reason_code isnull 
			then
				v_err_code := v_err_code || 'VB04COUCUD_025' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_025', _lang_code) || v_new_line;
		else
			if _deactivation_reason_code notnull then
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_DEA_REASON'
							   and 		master_code = _deactivation_reason_code
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB04COUCUD_026' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_026', _lang_code) || v_new_line;	
				end if;
			end if;
		end if;
	end if;
		
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcourse
				  where 	course_gid = _course_gid
				  and 		status_code <> 'I'
				 ) then
			-- Insert in note table
			CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_COURSE',v_course_id,null,'I','',
										_deactivation_reason_code,'',_user_code,_role_code,_lang_code, 
										'I',_succ_msg); 
				
			Update 	trng_mst_tcourse
			set		status_code = 'I',
					deactivation_reason_code = _deactivation_reason_code,
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	course_gid = _course_gid 
			and 	status_code <> 'I';
			
			v_succ_code := 'SB04COUCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04COUCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COUCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcourse
					  where		course_gid = _course_gid 
					  and 		status_code = 'A'
					 ) then
			insert into trng_mst_tcourse 
			(
				course_id,
				course_name,
				course_ll_name,
				course_desc,
				course_level_jsonb,
				course_type_jsonb,
				vertical_code,
				subvertical_jsonb,
				category_jsonb,
				sp_category_jsonb,
				course_duration_days,
				validity_from,
				validity_to,
				indefinite_flag,
				participant_jsonb,
				min_participant_count,
				max_participant_count,
				status_code,
				deactivation_reason_code,
				certificate_flag,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_course_id,
				_course_name,
				_course_ll_name,
				_course_desc,
				_course_level_jsonb,
				_course_type_jsonb,
				_vertical_code,
				_subvertical_jsonb,
				_category_jsonb,
				_sp_category_jsonb,
				_course_duration_days,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				_participant_jsonb,
				_min_participant_count,
				_max_participant_count,
				_status_code,
				_deactivation_reason_code,
				_certificate_flag,
				now(),
				_user_code,
				now()
			) returning course_gid into _course_gid;
			_course_id := 'COU_' || _course_gid;
			-- Set Course id 
			update trng_mst_tcourse 
			set course_id = _course_id
			where course_gid = _course_gid;
			
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_COURSE',_course_id,null,_status_code,
									'','','',_user_code,_role_code,_lang_code,'I',_succ_msg);
			
			v_succ_code := 'SB04COUCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04COUCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COUCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcourse
				   where	course_gid = _course_gid 
				   and 		status_code <> 'I'
				   ) then
				   
			 -- Get status code
			 select status_code into v_status_code
			 from 	trng_mst_tcourse where course_id = _course_id
			 and 	status_code <> 'I';
			 			 
			-- Direct approver 
			if _status_code = 'S' then
				if _role_code = 'TrainingMaster' and v_status_code = 'D' and _user_level_code = '99' then

					_status_code := 'A';
					v_initiated_date := (select now());
					call pr_iud_courseapproval_new(v_courseapproval_gid,_course_id,v_initiated_date,
												 _user_code,v_initiated_date,_status_code,'','',
											     _user_code,_role_code,_lang_code,'I',_succ_msg);

					CALL public.pr_email_courseapproved(_course_id,_user_code,_role_code,_lang_code);
				 end if;
			end if;
			
			-- Course approval table update (send back flow)
			if _status_code = 'B' then
				if exists (select * 
						   from   trng_mst_tcourseapproval
						   where  courseapproval_gid = _courseapproval_gid
						   and    course_id = _course_id
						   and    approval_status_code = 'S'
						   ) then
				 	update trng_mst_tcourseapproval
					set    approval_status_code = 'B',
						   approver_remark = _approver_remark,
					       updated_by  = _user_code,
						   updated_date = now()
					where  courseapproval_gid = _courseapproval_gid
					and	   course_id = _course_id
					and    approval_status_code = 'S';
					
					--Insert in note table
					CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_COURSE',_course_id,null,_status_code,
										'','',_approver_remark,_user_code,_role_code,_lang_code, 
										'I',_succ_msg);
				end if;
			end if;
			
			-- Insert in course approval table 
			if _course_id <> '' and _status_code = 'S'
			then
				
-- 				if v_approver_id <> _approver_id then
-- 						call pr_iud_courseapproval_new(
-- 											 v_courseapproval_gid,_course_id,'now()',_approver_id,
-- 											 null,_status_code,'','',_user_code,_role_code,_lang_code,
-- 											 'I',_succ_msg);
-- 								v_courseapproval_gid := _courseapproval_gid;
-- 				else 
-- 					update trng_mst_tcourseapproval 
-- 					set    approval_status_code = 'S',
-- 						   updated_date = now(),
-- 						   updated_by = _user_code
-- 					where course_id = _course_id
-- 					and   courseapproval_gid = _courseapproval_gid;
-- 				end if;
				
				call pr_iud_courseapproval_new(
											 v_courseapproval_gid,_course_id,'now()',_approver_id,
											 null,_status_code,'','',_user_code,_role_code,_lang_code,
											 'I',_succ_msg);
								v_courseapproval_gid := _courseapproval_gid;
								
				-- Insert into note table
				CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_COURSE',_course_id,null,_status_code, 
									'','','',_user_code,_role_code,_lang_code,'I',_succ_msg);
									
				-- email notification
				if _user_level_code :: udd_int = 89 then
					CALL public.pr_email_courseappreq(_course_id,_user_code,_role_code,_lang_code);
				end if;
			end if;
			
			-- Insert into note table
			if _status_code = 'R' then
				CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_COURSE',_course_id,null,_status_code, 
									_reject_reason_code,'','',_user_code,_role_code,_lang_code, 
									'I',_succ_msg);
				update  trng_mst_tcourseapproval
				set     approval_status_code = 'R',
						reject_reason_code   = _reject_reason_code,
						updated_by = _user_code,
						updated_date = now()
				where   courseapproval_gid = _courseapproval_gid ; 
				
				select created_by,updated_by into v_created_by,v_updated_by
				from   trng_mst_tcourse 
				where  course_gid = _course_gid;
				
-- 				v_user_level_code := (select fn_get_userlevelcode(v_created_by));
				v_user_level_code := (select fn_get_userlevelcode(v_updated_by));
				
				-- email notification
				if v_user_level_code :: udd_int = 89 then
					CALL public.pr_email_courserejected(_course_id,_user_code,_role_code,_lang_code);
				end if;
			end if;
			
			-- Insert into note table
			if _status_code = 'A' then			
				CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_COURSE',_course_id,null,_status_code, 
									_reject_reason_code,_deactivation_reason_code,_approver_remark,
									_user_code,_role_code,_lang_code,'I',_succ_msg);
									
				update  trng_mst_tcourseapproval
				set     approval_status_code = 'A',
				        approval_date = now(),
						updated_by = _user_code,
						updated_date = now()
				where   courseapproval_gid = _courseapproval_gid  
				and     course_id = _course_id;  
				
				select created_by,updated_by into v_created_by,v_updated_by
				from   trng_mst_tcourse 
				where  course_gid = _course_gid;
				
-- 				v_user_level_code := (select fn_get_userlevelcode(v_created_by));
				v_user_level_code := (select fn_get_userlevelcode(v_updated_by));
				
				-- email notification
				if v_user_level_code :: udd_int = 89 then
					CALL public.pr_email_courseapproved(_course_id,_user_code,_role_code,_lang_code);
				end if;
				
			end if;
			
			-- Reassign updation --
			if exists (select * from trng_mst_tcourseapproval
					   where courseapproval_gid = _courseapproval_gid
					   and   course_id   = _course_id
					   and   approver_id <> _approver_id
					   and 	 approval_status_code in ('S','B') )then
				update trng_mst_tcourseapproval
				set    approval_status_code = 'E',
				       updated_by           = _user_code,
					   updated_date         = now()
				where  courseapproval_gid = _courseapproval_gid
				and    course_id   = _course_id
				and    approval_status_code in ('S','B');
				
				-- Insert in note table -- 
				CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_COURSE',_course_id,null,'E','','',
										'',_user_code,_role_code,_lang_code,'I',_succ_msg);
			end if;	
			
			 
			 if v_status_code = _status_code and _status_code not in ('A','R','B','D') then
				 v_err_code := v_err_code || 'VB04COUCUD_008';
				 v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_008', _lang_code) || v_new_line;	
				
				v_err_code := substring(v_err_code,1,length(v_err_code)-1);
				RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
			 end if;
			 
			 -- Check if status code is Active
			 if v_status_code = 'A' or _status_code = 'D' then
				 select course_name,course_ll_name,course_desc,course_level_jsonb,
						course_type_jsonb,subvertical_jsonb,vertical_code
				 into	v_course_name,v_course_ll_name,v_course_desc,v_course_level_jsonb,
						v_course_type_jsonb,v_subvertical_jsonb,v_vertical_code
				 from 	trng_mst_tcourse 
				 where 	course_id = _course_id;
				 
				 -- v_course_level_jsonb missmatch validation check
				 if v_course_level_jsonb <> '[{}]' then
					 select count(a.course_level) into v_course_level_jsonb_count from 
						jsonb_to_recordset(_course_level_jsonb) a(course_level udd_text)
					 where a.course_level not in 
					 (select c.course_level from 
						jsonb_to_recordset(v_course_level_jsonb) c(course_level udd_text));
				 end if;
				 
				 -- v_course_type_jsonb missmatch validation check
				 if v_course_type_jsonb <> '[{}]' then
					 select count(a.course_type) into v_course_type_jsonb_count from 
						jsonb_to_recordset(_course_type_jsonb) a(course_type udd_text)
					 where a.course_type not in 
					 (select c.course_type from 
						jsonb_to_recordset(v_course_type_jsonb) c(course_type udd_text));
				 end if;
				
				 -- v_subvertical_jsonb missmatch validation check
				 if v_subvertical_jsonb <> '[{}]' then
					 select count(a.subvertical) into v_subvertical_jsonb_count from 
						jsonb_to_recordset(_subvertical_jsonb) a(subvertical udd_text)
					 where a.subvertical not in 
					 (select c.subvertical from 
						jsonb_to_recordset(v_subvertical_jsonb) c(subvertical udd_text));
				 end if;
				 
				 if (v_course_name <> _course_name or v_course_ll_name <> _course_ll_name or
					 v_course_desc <> _course_desc or v_course_level_jsonb_count > 0 or 
					 v_course_type_jsonb_count > 0 or v_vertical_code <> _vertical_code or
					 v_subvertical_jsonb_count > 0) then
							
							_status_code := _status_code;
							
							update trng_mst_tcourseapproval
							set    approval_status_code = 'I',
								   updated_by = _user_code,
								   updated_date = now()
							where  courseapproval_gid = _courseapproval_gid;
							
							-- Insert in note taable
							CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_COURSE',_course_id,null,'D','','',
										'',_user_code,_role_code,_lang_code,'I',_succ_msg);
				 else
						_status_code := v_status_code;
				 end if;
				 
			  end if;
			
			update	trng_mst_tcourse 
			set 	course_name =  _course_name, 
				 	course_ll_name =  _course_ll_name, 
					course_desc = _course_desc,
					course_level_jsonb = _course_level_jsonb,
					course_type_jsonb = _course_type_jsonb,
					vertical_code = _vertical_code,
					subvertical_jsonb = _subvertical_jsonb,
					category_jsonb = _category_jsonb ,
					sp_category_jsonb = _sp_category_jsonb ,
					course_duration_days = _course_duration_days ,
					course_duration_hours = _course_duration_hours ,
					validity_from = _validity_from,
					validity_to = _validity_to ,
					indefinite_flag = _indefinite_flag,
					participant_jsonb = _participant_jsonb ,
					min_participant_count  = _min_participant_count ,
					max_participant_count = _max_participant_count,
					status_code = _status_code,
					deactivation_reason_code = _deactivation_reason_code,
					certificate_flag = _certificate_flag,
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	course_gid = _course_gid 
			and 	status_code <> 'I';
							
			if _status_code =  'D' then
				v_succ_code := 'SB04COUCUD_002';	
			elseif _status_code =  'S' then
				v_succ_code := 'SB04COUCUD_004';	
			elseif _status_code =  'A' then
				v_succ_code := 'SB04COUCUD_005';	
			elseif _status_code =  'R' then
				v_succ_code := 'SB04COUCUD_006';	
			elseif _status_code =  'B' then
				v_succ_code := 'SB04COUCUD_007';	
			end if;
		else
			v_err_code := v_err_code || 'EB04COUCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COUCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
		
	if exists (	select	count(*)
				from 	trng_mst_tcourse
			    where 	course_name = _course_name 
			    and 	status_code <> 'I'
				group	by course_name
				having	count('*') > 1) 
	then
		-- Course name cannot be duplicated
		v_err_code := v_err_code || 'EB04COUCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB04COUCUD_001', _lang_code),_course_name);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || format(fn_get_msg(v_succ_code,_lang_code),_course_id,_course_name);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_courseapproval(INOUT _courseapproval_gid udd_int, INOUT _course_id udd_code, _initiated_date udd_datetime, INOUT _approver_id udd_code, _approval_date udd_datetime, _approval_status_code udd_code, _reject_reason_code udd_code, _approver_remark udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan ಠ_ಠ 
		Created Date : 14-09-2022
		
		Updated By : Mangai
		Updated Date : 29-11-2022
		
		SP Code : B04CAPCUD
		Version No : 5
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_courseapproval_gid udd_int := 0;
	v_approver_id udd_code := '';
	v_note_gid udd_int := 0;
begin 
	-- Validation
	if _mode_flag = 'U' and _courseapproval_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get approver id
	select approver_id into v_approver_id 
	from   trng_mst_tcourseapproval
	where  courseapproval_gid = _courseapproval_gid;
	
	if _mode_flag <> 'D' then
		-- course id validation
		if not exists (select 	* 
					   from 	trng_mst_tcourse
					   where 	course_id   = _course_id		
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_010', _lang_code)  || v_new_line;	
		end if;

		-- initiated date validation
		/*if _initiated_date isnull 
		then
			v_err_code := v_err_code || 'VB04CAPCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_001', _lang_code) || v_new_line;	
		end if;*/

		-- approver id validation
		if _role_code <> 'TrainingMaster-National' and _role_code <> 'SuperAdmin' then
			if _approver_id = ''then
				v_err_code := v_err_code || 'VB04CAPCUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_002', _lang_code) || v_new_line;	
			end if;
		end if;

		-- approval status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _approval_status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_001', _lang_code) || v_new_line;	
		end if;

		-- reject reason code validation
		if _reject_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_REJ_REASON'
						   and 		master_code = _reject_reason_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_014' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_014', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- Approver id validation
		if _mode_flag = 'U' and v_approver_id = ''
		then
		 		v_err_code := v_err_code || 'VB04CAPCUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_002', _lang_code) || v_new_line;	
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_003', _lang_code) || v_new_line;	
		end if;
	end if ;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcourseapproval
				  where 	courseapproval_gid = _courseapproval_gid
				 ) then
			update 	trng_mst_tcourseapproval
			set 	approval_status_code = 'I' ,
					updated_date = now(),
					updated_by 	 = _user_code
			where 	courseapproval_gid = _courseapproval_gid;
			
			v_succ_code := 'SB04CAPCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB00CMNCMN_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcourseapproval
					  where		courseapproval_gid = _courseapproval_gid
					 ) then
			insert into trng_mst_tcourseapproval 
			(
				course_id,
				initiated_date,
				approver_id,
				approval_date,
				approval_status_code,
				reject_reason_code,
				approver_remark,
				created_date,
				created_by
			)
			values
			(
				_course_id,
				now(),
				_approver_id,
				_approval_date,
				_approval_status_code,
				_reject_reason_code,
				_approver_remark,
				now(),
				_user_code
			) returning courseapproval_gid into _courseapproval_gid;
			
			v_succ_code := 'SB04CAPCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB00CMNCMN_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcourseapproval
				   where	courseapproval_gid = _courseapproval_gid
				   ) then
			
			-- Reassign updation --
			if exists (select * from trng_mst_tcourseapproval
					   where course_id   = _course_id
					   and   approver_id <> _approver_id
					   and   courseapproval_gid = _courseapproval_gid
					   and 	 approval_status_code in ('S','B')) then
				update trng_mst_tcourseapproval
				set    approval_status_code = 'E',
				       updated_by           = _user_code,
					   updated_date         = now()
				where  courseapproval_gid = _courseapproval_gid
				and    course_id   = _course_id
				and    approval_status_code in ('S','B');
				
				-- Insert in course approval table
				CALL public.pr_iud_courseapproval( 
												v_courseapproval_gid, 
												_course_id, 
												_initiated_date, 
												_approver_id, 
												_approval_date, 
												'S', 
												_reject_reason_code,
												_approver_remark,
												_user_code,
												_role_code,
												_lang_code,
												'I',
												_succ_msg
												) ;
				-- Insert in note table
				CALL public.pr_iud_notewithcode( 
								v_note_gid, 
								'QCD_COURSE', 
								_course_id,
								null,
								'E', 
								'',
								'',
								'',
								_user_code,
								_role_code, 
								_lang_code, 
								'I', 
								_succ_msg 
								) ;

			else
				update	trng_mst_tcourseapproval 
				set 	approval_date        = _approval_date,
						reject_reason_code	 = _reject_reason_code,
						approver_remark      = _approver_remark,
						approval_status_code = _approval_status_code,
						updated_by           = _user_code,
						updated_date         = now()
				where 	courseapproval_gid   = _courseapproval_gid;
			end if;		
			
			-- Insert in note table --  
			if _approval_status_code = 'R' then
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_COURSE', 
									_course_id,
									null,
									_approval_status_code, 
									'',
									'',
									'',
									_user_code,
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;
			end if;
						
			v_succ_code := 'SB04CAPCUD_002';
		else
			v_err_code := v_err_code || 'EB00CMNCMN_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB00CMNCMN_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tcourseapproval
			    where 	course_id       = _course_id 
			   	and     approver_id 	= _approver_id
			    and     approval_status_code  = 'V'
				group	by course_id, approver_id
				having	count('*') > 1) 
	then
		-- course id, approver_id cannot be duplicate
		v_err_code := v_err_code || 'EB00CMNCMN_002';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB00CMNCMN_002', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_courseapproval_new(INOUT _courseapproval_gid udd_int, INOUT _course_id udd_code, _initiated_date udd_datetime, INOUT _approver_id udd_code, _approval_date udd_datetime, _approval_status_code udd_code, _reject_reason_code udd_code, _approver_remark udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan ಠ_ಠ 
		Created Date : 26-12-2022
		
		Updated Date : Satheesh
		Updated By : 21-03-2023
		
		SP Code : B04CAPCUD
		Version No : 02
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_courseapproval_gid udd_int := 0;
	v_note_gid udd_int := 0;
begin 
	-- Validation	
	if _mode_flag <> 'D' then
		-- course id validation
		if not exists (select 	* 
					   from 	trng_mst_tcourse
					   where 	course_id   = _course_id		
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB04CAPCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_004', _lang_code)  || v_new_line;	
		end if;
		
		-- reject reason code validation
		if _reject_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_REJ_REASON'
						   and 		master_code = _reject_reason_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04CAPCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_005', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- initiated date validation
		if _initiated_date isnull then
			v_err_code := v_err_code || 'VB04CAPCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_001', _lang_code) || v_new_line;	
		end if;

		-- approval status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _approval_status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CAPCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_006', _lang_code) || v_new_line;	
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CAPCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_007', _lang_code) || v_new_line;	
		end if;
	end if ;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcourseapproval
				  where 	courseapproval_gid = _courseapproval_gid
				 ) then
			update 	trng_mst_tcourseapproval
			set 	approval_status_code = 'I' ,
					updated_date = now(),
					updated_by 	 = _user_code
			where 	courseapproval_gid = _courseapproval_gid;
			
			v_succ_code := 'SB04CAPCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04CAPCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CAPCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcourseapproval
					  where		courseapproval_gid = _courseapproval_gid
					  and 		approval_status_code  = 'A'
					 ) then
			insert into trng_mst_tcourseapproval 
			(
				course_id,
				initiated_date,
				approver_id,
				approval_date,
				approval_status_code,
				reject_reason_code,
				approver_remark,
				created_date,
				created_by
			)
			values
			(
				_course_id,
				now(),
				_approver_id,
				_approval_date,
				_approval_status_code,
				_reject_reason_code,
				_approver_remark,
				now(),
				_user_code
			) returning courseapproval_gid into _courseapproval_gid;
			
			v_succ_code := 'SB04CAPCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04CAPCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CAPCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcourseapproval
				   where	courseapproval_gid = _courseapproval_gid
				   and 		approval_status_code = 'S'
				   ) then
			
			-- Reassign updation --
			if exists (select * from trng_mst_tcourseapproval
					   where course_id   = _course_id
					   and   approver_id <> _approver_id
					   and   courseapproval_gid = _courseapproval_gid
					   and 	 approval_status_code in ('S','B')) then
				update trng_mst_tcourseapproval
				set    approval_status_code = 'E',
				       updated_by           = _user_code,
					   updated_date         = now()
				where  course_id   = _course_id
				and    approval_status_code in ('S','B');
				-- courseapproval_gid = _courseapproval_gid and
				
				-- Insert in note table
				CALL public.pr_iud_notewithcode( 
												v_note_gid,'QCD_COURSE',_course_id,null,'E','','',
												'',_user_code,_role_code,_lang_code,'I',_succ_msg 
												) ;
								
				-- Insert in course approval table
				CALL public.pr_iud_courseapproval( 
												v_courseapproval_gid, 
												_course_id, 
												_initiated_date, 
												_approver_id, 
												null, 
												'S', 
												_reject_reason_code,
												_approver_remark,
												_user_code,
												_role_code,
												_lang_code,
												'I',
												_succ_msg
												) ;
			else
				update	trng_mst_tcourseapproval 
				set 	approver_id			 = _approver_id,
						approval_date        = now(),
						reject_reason_code	 = _reject_reason_code,
						approver_remark      = _approver_remark,
						approval_status_code = _approval_status_code,
						updated_by           = _user_code,
						updated_date         = now()
				where 	courseapproval_gid   = _courseapproval_gid
				and 	approval_status_code   = 'S';

			end if;		
			
			-- Insert in note table --  
			if _approval_status_code = 'R' then
			CALL public.pr_iud_notewithcode( 
											v_note_gid,'QCD_COURSE',_course_id,null,_approval_status_code, 
											_reject_reason_code,'','',_user_code,_role_code,_lang_code,'I', 
											_succ_msg 
											) ;
			end if;
						
			v_succ_code := 'SB04CAPCUD_002';
		else
			v_err_code := v_err_code || 'EB04CAPCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CAPCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tcourseapproval
			    where 	course_id       = _course_id 
			   	and     approver_id 	= _approver_id
			    and     approval_status_code  = 'S'
				group	by course_id, approver_id,approval_status_code
				having	count('*') > 1) 
	then
		-- Approval id cannot be duplicated
		v_err_code := v_err_code || 'EB07PAPCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB07PAPCUD_001', _lang_code),_approver_id);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_coursecontent(INOUT _coursecontent_gid udd_int, INOUT _course_id udd_code, INOUT _coursemodule_id udd_code, _material_desc udd_desc, _content_lang udd_code, _file_type_code udd_code, _file_name udd_text, _file_path udd_text, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 14-09-2022
		
		Updated By : Satheesh S
		Updated Date : 20-03-2023
		
		SP Code : B04COCCUD
		Version No : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_file_extension udd_text := '';
begin 
	   
	-- Validation
	if _mode_flag = 'U' and _coursecontent_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- course id validation
		if not exists (select 	* 
					   from 	trng_mst_tcourse
					   where 	course_id   = _course_id		
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB04COCCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_005', _lang_code)  || v_new_line;	
		end if;

		-- course module id validation
		if not exists (select 	* 
					   from 	trng_mst_tcoursemodule
					   where 	coursemodule_id = _coursemodule_id	
					   and      status_code     = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COCCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_006', _lang_code)  || v_new_line;	
		end if;
		
	  	-- material desc validation
		if _material_desc = '' then
			v_err_code := v_err_code || 'VB04COCCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_001', _lang_code) || v_new_line;	
		end if;

		-- content language validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _content_lang
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COCCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_007', _lang_code) || v_new_line;	
		end if;		
		
		-- file type code validation
		/*if _file_type_code = '' then
			v_err_code := v_err_code || 'VB04COCCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_002', _lang_code) || v_new_line;	
		end if;*/
		
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_FILE_TYPE'
					   and 		master_code = _file_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COCCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_008', _lang_code) || v_new_line;	
		end if;
		
		
		-- File Type Validation
		if _file_type_code = 'QCD_URL' then 
			-- Get File extension
			SELECT substring(_file_name from 1 for 5)::text
			into   v_file_extension;
			
			if not exists (select master_desc 
						   from   core_mst_vmastertranslate
						   where  parent_code = 'QCD_FILE_EXTENSION'
						   and 	  depend_code = _file_type_code
						   and    master_desc = v_file_extension
						  ) then
				v_err_code := v_err_code || 'VB04COCCUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_009', _lang_code) || v_new_line;		   
			end if;		
		else
			-- Get File extension
			select substring(_file_name collate pg_catalog.""default"" from '\..*')::text
			into   v_file_extension;
			
			if not exists (select master_desc 
						   from   core_mst_vmastertranslate
						   where  parent_code = 'QCD_FILE_EXTENSION'
						   and 	  depend_code = _file_type_code
						   and    master_desc = v_file_extension
						  ) then
				v_err_code := v_err_code || 'VB04COCCUD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_010', _lang_code) || v_new_line;		   
			end if;			
		end if;

		-- file name validation
		if _file_name = '' then
			v_err_code := v_err_code || 'VB04COCCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_003', _lang_code) || v_new_line;	
		end if;
		
		-- file path validation
		if _file_path = '' then
			v_err_code := v_err_code || 'VB04COCCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_004', _lang_code) || v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COCCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_011', _lang_code) || v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COCCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_007', _lang_code) || v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcoursecontent
				  where 	coursecontent_gid = _coursecontent_gid
				  and 		status_code = 'A'
				 ) then
			Update 	trng_mst_tcoursecontent
			set		status_code   = 'I',
					updated_by    = _user_code,
					updated_date  = now()
			where 	coursecontent_gid = _coursecontent_gid
			and 	status_code      = 'A';
			
			v_succ_code := 'SB04COCCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04COCCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COCCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcoursecontent
					  where		coursecontent_gid = _coursecontent_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_tcoursecontent 
			(
				course_id,
				coursemodule_id,
				material_desc,
				lang_code,
				file_type_code,
				file_name,
				file_path,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_course_id,
				_coursemodule_id,
				_material_desc,
				_content_lang,
				_file_type_code,
				_file_name,
				_file_path,
				_status_code,
				now(),
				_user_code
			) returning coursecontent_gid into _coursecontent_gid;
			
			v_succ_code := 'SB04COCCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04COCCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COCCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcoursecontent
				   where	coursecontent_gid = _coursecontent_gid
				   and 		status_code      = 'A'
				   ) then
			update	trng_mst_tcoursecontent 
			set 	material_desc	  =	_material_desc,
					lang_code		  =	_content_lang,
					file_type_code	  =	 _file_type_code,
					file_name		  =	_file_name,
					file_path		  =	_file_path,
					status_code       = _status_code,
					updated_by        = _user_code,
					updated_date      = now()
			where 	coursecontent_gid = _coursecontent_gid
			and 	status_code       = 'A';
			
			v_succ_code := 'SB04COCCUD_002';
		else
			v_err_code := v_err_code || 'EB04COCCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COCCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tcoursecontent
			    where 	course_id       = _course_id 
			   	and     coursemodule_id = _coursemodule_id
			    and     lang_code       = _content_lang
			    and     material_desc   = _material_desc
			    and     status_code     = 'A'
				group	by course_id, coursemodule_id, lang_code, material_desc
				having	count('*') > 1) 
	then
		-- course id, course module id, language code and material description cannot be duplicate
		v_err_code := v_err_code || 'VB04COCCUD_012';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04COCCUD_012', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_coursemodule(INOUT _coursemodule_gid udd_int, INOUT _course_id udd_code, INOUT _coursemodule_id udd_code, _module_name udd_desc, _module_ll_name udd_desc, _module_desc udd_desc, _subvertical_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 13-09-2022
		
		Updated By : Satheesh S
		Updatde Date : 20-03-2023
		
		SP Code : B04CMOCUD
		version no : 05
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_coursemodule_id udd_code := '';
begin 
	-- Validation
	if _mode_flag = 'U' and _coursemodule_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get module id from content table
	select coursemodule_id into v_coursemodule_id
	from  trng_mst_tcoursecontent
	where coursemodule_id = _coursemodule_id
	and   status_code     <> 'I';
	
	if _mode_flag <> 'D' then
		-- course id validation
		if not exists (select 	* 
					   from 	trng_mst_tcourse
					   where 	course_id   = _course_id	
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB04CMOCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_005', _lang_code)  || v_new_line;	
		end if;

		-- subvertical code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_SUBVERTICAL'
					   and 		master_code = _subvertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CMOCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_006', _lang_code)|| v_new_line;	
		end if;

		-- module name validation
		if _module_name = ''
		then
			v_err_code := v_err_code || 'VB04CMOCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_001', _lang_code)|| v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CMOCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_007', _lang_code)|| v_new_line;	
		end if;

		-- Content module check
		if _mode_flag = 'D' and _coursemodule_id <> '' then 
			if exists ( select * from trng_mst_tcoursecontent 
						where coursemodule_id = _coursemodule_id
						and   status_code     = 'A') then
				v_err_code := v_err_code || 'VB04CMOCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_003', _lang_code)  || v_new_line;	
			end if;
		end if;
		
		-- Check module id reffered in contant table
		/*if _mode_flag = 'U' and v_coursemodule_id = _coursemodule_id then
		 		v_err_code := v_err_code || 'VB04CMOCUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_004', _lang_code)  || v_new_line;	
		end if;*/
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CMOCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_008', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcoursemodule
				  where 	coursemodule_gid = _coursemodule_gid
				  and 		status_code = 'A'
				 ) then
			Update 	trng_mst_tcoursemodule
			set		status_code   = 'I',
					updated_by    = _user_code,
					updated_date  = now()
			where 	coursemodule_gid = _coursemodule_gid
			and 	status_code      = 'A';
			
			v_succ_code := 'SB04CMOCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04CMOCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CMOCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcoursemodule
					  where		coursemodule_gid       = _coursemodule_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_tcoursemodule 
			(
				course_id,
				coursemodule_id,
				module_name,
				module_ll_name,
				module_desc,
				subvertical_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_course_id,
				_coursemodule_id,
				_module_name,
				_module_ll_name,
				_module_desc,
				_subvertical_code,
				_status_code,
				now(),
				_user_code
			) returning coursemodule_gid into _coursemodule_gid;
			
			_coursemodule_id := 'COM_' || _coursemodule_gid;
			update trng_mst_tcoursemodule
			set    coursemodule_id  = _coursemodule_id
			where  coursemodule_gid = _coursemodule_gid;
			
			v_succ_code := 'SB04CMOCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04CMOCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CMOCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcoursemodule
				   where	coursemodule_gid = _coursemodule_gid
				   and 		status_code      = 'A'
				   ) then
			if v_coursemodule_id = _coursemodule_id then	 
				update	trng_mst_tcoursemodule 
				set 	-- module_name      = _module_name,
						-- module_ll_name   = _module_ll_name,
						module_desc      = _module_desc,
						-- subvertical_code = _subvertical_code,
						status_code      = _status_code,
						updated_by       = _user_code,
						updated_date     = now()
				where 	coursemodule_gid = _coursemodule_gid
				and 	status_code      = 'A';
			else 
				update	trng_mst_tcoursemodule 
				set 	module_name      = _module_name,
						module_ll_name   = _module_ll_name,
						module_desc      = _module_desc,
						-- subvertical_code = _subvertical_code,
						status_code      = _status_code,
						updated_by       = _user_code,
						updated_date     = now()
				where 	coursemodule_gid = _coursemodule_gid
				and 	status_code      = 'A';
			end if;
			
			v_succ_code := 'SB04CMOCUD_002';
		else
			v_err_code := v_err_code || 'EB04CMOCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CMOCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tcoursemodule
			    where 	course_id   = _course_id
			    and     module_name = _module_name
			   	and     subvertical_code = _subvertical_code
			    and     status_code = 'A'
				group	by subvertical_code, module_name,course_id,status_code
				having	count('*') > 1) 
	then
		-- Course id and module name cannot be duplicated
		v_err_code := v_err_code || 'VB04CMOCUD_009';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04CMOCUD_009', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
		
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_coursetrainer(INOUT _coursetrainer_gid udd_int, INOUT _course_id udd_code, INOUT _trainer_id udd_code, _trainer_type_code udd_code, _trngorg_type_code udd_code, _trngorg_id udd_code, _trainer_flag udd_flag, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By 	 : Mohan S
		Created Date : 19-09-2022
		
		Updated By : Satheesh S
		Update Date : 20-03-2023
		
		SP Code 	 : B04COTCUD
		version no   : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_trngorg_id udd_code := '';
	v_trngorg_type_code udd_code := '';
    -- v_trainer_level_code udd_code := '';
begin 
		
	-- Validation
	if _mode_flag = 'U' and _coursetrainer_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- course id validation
		if not exists (select 	* 
					   from 	trng_mst_tcourse
					   where 	course_id   = _course_id		
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB04COTCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COTCUD_001', _lang_code)  || v_new_line;	
		end if;

		-- Trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id		
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COTCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COTCUD_002', _lang_code)  || v_new_line;	
		end if;
		
		-- select fn_get_trainerlevel(_trainer_id) into v_trainer_level_code ;
		
		-- course level and trianer level validation
		/*if not exists ( select * from trng_mst_vcourselevel 
					   	where course_id = _course_id
						and course_level = v_trainer_level_code) then
			v_err_code := v_err_code || 'VB04COTCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COTCUD_006', _lang_code)  || v_new_line;	
		end if;*/

		-- Trainer type code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_TYPE'
					   and 		master_code = _trainer_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COTCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COTCUD_003', _lang_code) || v_new_line;	
		end if;
		
		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COTCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COTCUD_004', _lang_code) || v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04COTCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COTCUD_005', _lang_code) || v_new_line;	
		end if;
	end if ;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- get trngorg type , trngorg id against trainer id
	select trngorg_id,trngorg_type_code into v_trngorg_id,v_trngorg_type_code
	from   trng_mst_ttrainer
	where  trainer_id = _trainer_id;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tcoursetrainer
				  where 	coursetrainer_gid = _coursetrainer_gid
				 ) then
			update  trng_mst_tcoursetrainer
			set 	status_code  = 'I',
					updated_date = now(),
					updated_by 	 = _user_code
			where 	coursetrainer_gid = _coursetrainer_gid;
			
			v_succ_code := 'SB04COTCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04COTCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COTCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tcoursetrainer
					  where		coursetrainer_gid = _coursetrainer_gid
					 ) then
			insert into trng_mst_tcoursetrainer 
			(
				course_id,
				trainer_id,
				trainer_type_code,
				trngorg_type_code,
				trngorg_id,
				trainer_flag,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_course_id,
				_trainer_id,
				_trainer_type_code,
				v_trngorg_type_code,
				v_trngorg_id,
				'Y',
				_status_code,
				now(),
				_user_code
			) returning coursetrainer_gid into _coursetrainer_gid;
			
			v_succ_code := 'SB04COTCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04COTCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COTCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tcoursetrainer
				   where	coursetrainer_gid = _coursetrainer_gid
				   ) then
			update	trng_mst_tcoursetrainer 
			set 	trainer_id       	 = _trainer_id,
					trainer_type_code    = _trainer_type_code,
					trngorg_type_code	 = v_trngorg_type_code,
					trngorg_id			 = v_trngorg_id,
					updated_by           = _user_code,
					updated_date         = now()
			where 	coursetrainer_gid    = _coursetrainer_gid;
			
			v_succ_code := 'SB04COTCUD_002';
		else
			v_err_code := v_err_code || 'EB04COTCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04COTCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tcoursetrainer
			    where 	course_id = _course_id 
			    and     trainer_id = _trainer_id
			    and 	status_code <> 'I'
				group	by course_id,trainer_id
				having	count('*') > 1) 
	then
		-- Course,trainer cannot be duplicated
		v_err_code := v_err_code || 'EB04COTCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB04COTCUD_001', _lang_code),_course_id,_trainer_id);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_emailtran(_email_id udd_text, _emailtemplate_code udd_code, _email_content udd_text, _scheduled_date udd_date, _email_delivered_flag udd_flag, _user_code udd_code, _role_code udd_code, _email_remark udd_text, _email_subject udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan
		Created Date : 31-01-2023
		SP Code : B01EMACUD
		Version No : 01
	*/
begin 
	insert into trng_trn_temailtran
									(
									  email_id,
									  emailtemplate_code,
									  email_content,
									  scheduled_date,
									  email_delivered_flag,
									  user_code,
									  role_code,
									  status_code,
									  email_remark,
									  email_subject,
									  created_date,
									  created_by
									 )
							values	(
									_email_id,
									_emailtemplate_code,
									_email_content,
									_scheduled_date,
									_email_delivered_flag,
									_user_code,
									_role_code,
									'A',
									_email_remark,
									_email_subject,
								    now(),
									'System'
									);
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_feedbackparticipant(INOUT _feedbackparticipant_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, INOUT _participant_id udd_code, _feedback_lang_code udd_code, INOUT _questionaire_id udd_code, INOUT _question_id udd_code, _question_type_code udd_code, _participants_feedback_code udd_code, _participants_response udd_text, _response_status udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 25-10-2022
		
		Updated By : Satheesh S
		Updated Date : 21-03-2023
		
		SP Code : B03FPACUD
		Version No : 05
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text := chr(13)||chr(10);
	v_question_code udd_code := ''; 
begin 	
	-- Get question code
	select question_code into v_question_code 
	from   trng_mst_tquestion
	where  questionaire_id = _questionaire_id
	and    question_id = _question_id
	and    status_code = 'A';

	-- Validation
	if _mode_flag = 'U' and _feedbackparticipant_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- trng prog id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_001', _lang_code)  || v_new_line;	
		end if;
		
		-- participant id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogramparticipant
					   where 	participant_id   = _participant_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_002', _lang_code)  || v_new_line;	
		end if;
		
		-- trng prog batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogram_id   = _tprogram_id
					   and 		tprogrambatch_id   = _tprogrambatch_id
					   and      status_code not in ('L','I')
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_003', _lang_code)  || v_new_line;	
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch 
					   where  	tprogram_id   = _tprogram_id
					   and 		tprogrambatch_id   = _tprogrambatch_id
					   and 		lang_code = _feedback_lang_code
					   and 		status_code not in ('L','I')
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_004', _feedback_lang_code)|| v_new_line;	
		end if;

		-- questionaire id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestionaire
					   where 	questionaire_id   = _questionaire_id
					   and      status_code = 'A'
					  ) then

			v_err_code := v_err_code || 'VB03FPACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_005', _lang_code)  || v_new_line;	
		end if;
		
		-- question id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestion
					   where 	question_id   = _question_id
					   and      status_code = 'A'
					  ) then

			v_err_code := v_err_code || 'VB03FPACUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_006', _lang_code)  || v_new_line;	
		end if;
		
		-- question type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTION_TYPE'
					   and 		master_code = _question_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_007', _lang_code)|| v_new_line;	
		end if;
		
		-- participants feedback code validation
/*		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTGRP_CODE'
					   and 		master_code = _participants_feedback_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_011', _lang_code)|| v_new_line;	
		end if;
*/
		if _participants_feedback_code <> '' and _question_type_code = 'QCD_MCQ'then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = v_question_code
						   and 		master_code = _participants_feedback_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB03FPACUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_008', _lang_code)|| v_new_line;	
			end if;
		end if;
		
		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_FB_STATUS'
					   and 		master_code = _response_status
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_009', _lang_code)|| v_new_line;	
		end if;
		
		/*-- language code validation
		if not exists (select 	* 
					   from 	trng_mst_tquestiontranslate 
					   where  	question_id = _question_id
					   and 		lang_code = _feedback_lang_code
					  ) then
			v_err_code := v_err_code || 'VB03FPACUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FPACUD_012', _lang_code)|| v_new_line;	
		end if;*/
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_tfeedbackparticipant
				  where 	feedbackparticipant_gid = _feedbackparticipant_gid
				 ) then
				 
			delete from	trng_trn_tfeedbackparticipant
			where	feedbackparticipant_gid = _feedbackparticipant_gid;
									
			v_succ_code := 'SB03FPACUD_002';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB03FPACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03FPACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_tfeedbackparticipant
					  where		feedbackparticipant_gid = _feedbackparticipant_gid
					 ) then
			insert into trng_trn_tfeedbackparticipant 
			(
				tprogram_id,
				tprogrambatch_id,
				participant_id,
				lang_code,
				questionaire_id,
				question_id,
				question_type_code,
				participants_feedback_code,
				participants_response,
				response_status,
				created_date,
				created_by
			)
			values
			(
			    _tprogram_id,
				_tprogrambatch_id,
				_participant_id,
				_feedback_lang_code,
				_questionaire_id,
				_question_id,
				_question_type_code,
				_participants_feedback_code,
				_participants_response,
				_response_status,
				now(),
				_user_code
			) 
			on CONFLICT (tprogram_id,tprogrambatch_id,participant_id,
						 lang_code,questionaire_id,question_id) 
						 do update set  
									participants_feedback_code = _participants_feedback_code,
									participants_response = _participants_response,
									response_status = _response_status,
									updated_date = now(),
									updated_by = _user_code;
			
			select max(feedbackparticipant_gid) into _feedbackparticipant_gid  
			from  trng_trn_tfeedbackparticipant;
			
			v_succ_code := 'SB03FPACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB03FPACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03FPACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_tfeedbackparticipant
				   where	feedbackparticipant_gid = _feedbackparticipant_gid
				   ) then
			update	trng_trn_tfeedbackparticipant 
			set 	participants_feedback_code	= _participants_feedback_code,
					participants_response		= _participants_response,
					response_status 		    = _response_status,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	feedbackparticipant_gid = _feedbackparticipant_gid;
			
			v_succ_code := 'SB03FPACUD_003';
		else
			v_err_code := v_err_code || 'EB03FPACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03FPACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_tfeedbackparticipant
			    where 	tprogram_id = _tprogram_id 
			    and     tprogrambatch_id = _tprogrambatch_id
			    and     participant_id = _participant_id
			    and     lang_code = _feedback_lang_code
			    and     questionaire_id = _questionaire_id
			    and     question_id = _question_id
				group	by tprogram_id,tprogrambatch_id,participant_id,lang_code,
			   			   questionaire_id,question_id
				having	count('*') > 1) 
	then
		-- Duplicate Validation
		v_err_code := v_err_code || 'VB03FPACUD_010';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB03FPACUD_010', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_feedbacktrainer(INOUT _feedbacktrainer_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, INOUT _trainer_id udd_code, _feedback_lang_code udd_code, INOUT _questionaire_id udd_code, INOUT _question_id udd_code, _question_type_code udd_code, _trainers_feedback_code udd_code, _trainers_response udd_text, _response_status udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 25-10-2022
		
		Updated By : Satheesh S
		Updated Date : 21-03-2023
		
		SP Code : B03FTACUD
		Version No : 06
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_question_code udd_code := '';
begin 	
	-- Get question code
	select question_code into v_question_code 
	from   trng_mst_tquestion
	where  questionaire_id = _questionaire_id
	and    question_id = _question_id
	and    status_code = 'A';
	
	-- Validation
	if _mode_flag = 'U' and _feedbacktrainer_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- trng prog id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_001', _lang_code)  || v_new_line;	
		end if;
		
		-- trainerid validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_002', _lang_code)  || v_new_line;	
		end if;
		
		-- trng prog batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogram_id   = _tprogram_id
					   and 		tprogrambatch_id   = _tprogrambatch_id
					   and      status_code not in ('I','L')
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_003', _lang_code)  || v_new_line;	
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch 
					   where  	tprogram_id   = _tprogram_id
					   and 		tprogrambatch_id   = _tprogrambatch_id
					   and 		lang_code = _feedback_lang_code
					   and      status_code not in ('L','I')
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_004', _feedback_lang_code)|| v_new_line;	
		end if;

		-- questionaire id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestionaire
					   where 	questionaire_id   = _questionaire_id
					   and      status_code = 'A'
					  ) then

			v_err_code := v_err_code || 'VB03FTACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_005', _lang_code)  || v_new_line;	
		end if;
		
		-- question id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestion
					   where 	question_id   = _question_id
					   and      status_code = 'A'
					  ) then

			v_err_code := v_err_code || 'VB03FTACUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_006', _lang_code)  || v_new_line;	
		end if;
		
		-- question type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTION_TYPE'
					   and 		master_code = _question_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_007', _lang_code)|| v_new_line;	
		end if;
		
		-- trainers feedback code validation
		if _trainers_feedback_code <> '' and _question_type_code = 'QCD_MCQ'then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = v_question_code
						   and 		master_code = _trainers_feedback_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB03FTACUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_008', _lang_code)|| v_new_line;	
			end if;
		end if;
		
		if _question_type_code <> 'QCD_FREETEXT' then
			if _trainers_feedback_code <> '' then
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = v_question_code
							   and 		master_code = _trainers_feedback_code 
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB03FTACUD_008' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_008', _lang_code)|| v_new_line;	
				end if;
			end if;
		end if;
		
		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_RESPONSE_STATUS'
					   and 		master_code = _response_status 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_009', _lang_code)|| v_new_line;	
		end if;
		
		-- Response validation
		/*if _question_type_code = 'QCD_FREETEXT' then
			if _trainers_response = '' 
			then
				v_err_code := v_err_code || 'VB03FTACUD_012' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_012', _lang_code)|| v_new_line;	
			end if;
		end if;*/
	
/*		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTGRP_CODE'
					   and 		master_code = _trainers_feedback_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_013', _lang_code)|| v_new_line;	
		end if;
*/
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03FTACUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTACUD_010', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_tfeedbacktrainer
				  where 	feedbacktrainer_gid = _feedbacktrainer_gid
				 ) then
				 
			delete from	trng_trn_tfeedbacktrainer
			where	feedbacktrainer_gid = _feedbacktrainer_gid;
									
			v_succ_code := 'SB03FTACUD_002';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB03FTACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03FTACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_tfeedbacktrainer
					  where		feedbacktrainer_gid = _feedbacktrainer_gid
					 ) then
			insert into trng_trn_tfeedbacktrainer 
			(
				tprogram_id,
				tprogrambatch_id,
				trainer_id,
				lang_code,
				questionaire_id,
				question_id,
				question_type_code,
				trainers_feedback_code,
				trainers_response,
				response_status,
				created_date,
				created_by
			)
			values
			(
			    _tprogram_id,
				_tprogrambatch_id,
				_trainer_id,
				_feedback_lang_code,
				_questionaire_id,
				_question_id,
				_question_type_code,
				_trainers_feedback_code,
				_trainers_response,
				_response_status,
				now(),
				_user_code
			) 
			on CONFLICT (tprogram_id,tprogrambatch_id,trainer_id,
						 lang_code,questionaire_id,question_id) 
						 do update set  
									trainers_feedback_code = _trainers_feedback_code,
									trainers_response = _trainers_response,
									response_status = _response_status,
									updated_date = now(),
									updated_by = _user_code;
			
			select max(feedbacktrainer_gid) into _feedbacktrainer_gid  
			from  trng_trn_tfeedbacktrainer;
			
			v_succ_code := 'SB03FTACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB03FTACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03FTACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_tfeedbacktrainer
				   where	feedbacktrainer_gid = _feedbacktrainer_gid
				   ) then
			update	trng_trn_tfeedbacktrainer 
			set 	trainers_feedback_code	= _trainers_feedback_code,
					trainers_response		= _trainers_response,
					response_status		    = _response_status,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	feedbacktrainer_gid 	= _feedbacktrainer_gid;
			
			v_succ_code := 'SB03FTACUD_003';
		else
			v_err_code := v_err_code || 'EB03FTACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03FTACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;

	if exists (	select	count(*)
				from 	trng_trn_tfeedbacktrainer
			    where 	tprogram_id = _tprogram_id 
			    and     tprogrambatch_id = _tprogrambatch_id
			    and     trainer_id = _trainer_id
			    and     lang_code = _feedback_lang_code
			    and     questionaire_id = _questionaire_id
			    and     question_id = _question_id
				group	by tprogram_id,tprogrambatch_id,trainer_id,lang_code,
			   			   questionaire_id,question_id
				having	count('*') > 1) 
	then
		-- Duplicate Validation
		v_err_code := v_err_code || 'VB03FTACUD_011';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB03FTACUD_011', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_internaltrainer(INOUT _trainer_gid udd_int, INOUT _trngorg_id udd_code, _trngorg_type_code udd_code, INOUT _trainer_id udd_code, INOUT _cadre_id udd_code, _trainer_name udd_desc, _trainer_ll_name udd_desc, _trainer_type_code udd_code, _trainer_level_code udd_code, _mobile_no udd_mobile, _email_id udd_text, _gender_code udd_code, _resource_type_code udd_code, _trainer_qualification udd_text, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _photo_file_name udd_desc, _photo_file_path udd_text, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 22-09-2022
		
		Updated By : Mangai
		Updated Date : 18-02-2022
		
		SP Code : B05TRACUX
		Version No : 3
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 	
		-- Validation	
		-- training org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id   = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_018' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_018', _lang_code)  || v_new_line;	
		end if;

		-- org type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_TYPE'
					   and 		master_code = _trngorg_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_015', _lang_code)|| v_new_line;	
		end if;

		-- Trainer name validation
		if _trainer_name = '' then
			v_err_code := v_err_code || 'VB05TRACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_001', _lang_code) || v_new_line;
		end if;

		-- Trainer Type validation
		/*if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_C_USER_TYPE'
					   and 		master_code = _trainer_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_020' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_020', _lang_code)|| v_new_line;	
		end if;*/

		-- Trainer Level validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_C_LEVEL_CODE'
					   and 		master_code = _trainer_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_024' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_024', _lang_code)|| v_new_line;	
		end if;

		-- Gender validation
		if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_C_GENDER'
						   and 		master_code = _gender_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_025' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_025', _lang_code)|| v_new_line;	
		end if;

		-- Resource Type validation
		if _resource_type_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster
						   where 	parent_code = 'QCD_RESOURCE_TYPE'
						   and 		master_code = _resource_type_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB00CMNCMN_026' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_026', _lang_code)|| v_new_line;	
			end if;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_001', _lang_code)|| v_new_line;	
		end if;

		-- Validity to or indefinite flag validation
		if _validity_from IS NOT NULL then
			if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
				_validity_to := null;
			end if;
			if _validity_to isnull and _indefinite_flag = 'N' then
				v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
			end if;
		end if;

		-- Validitiy to validation
		if  _validity_to < _validity_from then
			v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_003', _lang_code)|| v_new_line;	
		end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
			
			select 	trainer_id into _trainer_id 
			from 	trng_mst_ttrainer 
			where 	cadre_id = _cadre_id 
			and 	status_code = 'A';
			
			_trainer_id := coalesce(_trainer_id,'');
			
			insert into trng_mst_ttrainer 
			(
				trngorg_id,
				trngorg_type_code,
				trainer_id,
				cadre_id,
				trainer_name,
				trainer_ll_name,
				trainer_type_code,
				trainer_level_code,
				mobile_no,
				email_id,
				gender_code,
				resource_type_code,
				trainer_qualification,
				validity_from,
				validity_to,
				indefinite_flag,
				photo_file_name,
				photo_file_path,
				status_code,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_trngorg_id,
				_trngorg_type_code,
				_trainer_id,
				_cadre_id,
				_trainer_name,
				_trainer_ll_name,
				_trainer_type_code,
				_trainer_level_code,
				_mobile_no,
				_email_id,
				_gender_code,
				_resource_type_code,
				_trainer_qualification,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				_photo_file_name,
				_photo_file_path,
				_status_code,
				now(),
				_user_code,
				now()
			) 
			on CONFLICT ( trainer_id,cadre_id)  
			do update set  
						trngorg_id = _trngorg_id,
						trngorg_type_code = _trngorg_type_code,
						trainer_id = _trainer_id,
						trainer_name = _trainer_name,
						trainer_ll_name = _trainer_ll_name,
						trainer_type_code = _trainer_type_code,
						trainer_level_code = _trainer_level_code,
						mobile_no = _mobile_no,
						email_id = _email_id,
						gender_code = _gender_code,
						resource_type_code = _resource_type_code,
						trainer_qualification = _trainer_qualification,
						validity_from = _validity_from,
						validity_to = _validity_to,
						indefinite_flag = _indefinite_flag,
						photo_file_name = _photo_file_name,
						photo_file_path = _photo_file_path,
						status_code = _status_code,
						updated_date = now(),
						updated_by = _user_code,
						row_timestamp = now()
						returning trainer_gid into _trainer_gid;
						
			_trainer_id := 'TRA_' ||  _trainer_gid;
			
			-- Set Trainer id 
			update trng_mst_ttrainer 
			set trainer_id    = _trainer_id
			where trainer_gid = _trainer_gid;
						
-- 			v_succ_code := 'SB00CMNCMN_002';
			v_succ_code := 'VB00CMNCMN_074';
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_internaltraineraddr(INOUT _traineraddr_gid udd_int, INOUT _trainer_id udd_code, _addr_line udd_text, _addr_pincode udd_pincode, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 21-10-2022
		SP Code : B05ITACUX
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
begin 	
	-- Validation
	-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_027' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_027', _lang_code)  || v_new_line;	
		end if;

		-- address line validation
		if _addr_line = '' then
			v_err_code := v_err_code || 'VB05TADCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_001', _lang_code) || v_new_line;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_001', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_003', _lang_code)|| v_new_line;	
		end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	select  traineraddr_gid into _traineraddr_gid
	from 	trng_mst_ttraineraddr
	where 	trainer_id = _trainer_id
	and 	status_code = 'A' order by 1 desc limit 1;
	
	_traineraddr_gid := coalesce(_traineraddr_gid,0);
	-- Insert or Update
	if  _traineraddr_gid = 0 then
			insert into trng_mst_ttraineraddr 
			(
				trainer_id,
				addr_line,
				addr_pincode,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				village_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				_addr_line,
				_addr_pincode,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_village_code,
				_status_code,
				now(),
				_user_code
			) returning traineraddr_gid into _traineraddr_gid;
							
-- 			v_succ_code := 'SB00CMNCMN_002';
			v_succ_code := 'VB00CMNCMN_074';
		else
			update	trng_mst_ttraineraddr 
			set 	addr_line			= _addr_line,
					addr_pincode		= _addr_pincode,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					village_code		= _village_code,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	traineraddr_gid 	= _traineraddr_gid
			and 	status_code 		= 'A'
			returning traineraddr_gid into _traineraddr_gid;
			v_succ_code := 'SB00CMNCMN_002';
			
		end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_internaltrainergeo(INOUT _trainergeo_gid udd_int, INOUT _trainer_id udd_code, _trainer_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 21-10-2022
		SP Code : B04ITGCUX
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_trainer_level_code udd_code := ''; 
begin 	
		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_027' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_027', _lang_code)  || v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_001', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB00CMNCMN_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_003', _lang_code)|| v_new_line;	
		end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- get trainer level code -- 
	select trainer_level_code into v_trainer_level_code
	from   trng_mst_ttrainer 
	where  trainer_id = _trainer_id;
	
	select  trainergeo_gid into _trainergeo_gid
	from 	trng_mst_ttrainergeo
	where 	trainer_id = _trainer_id
	and 	status_code = 'A' order by 1 desc limit 1;
	
	_trainergeo_gid := coalesce(_trainergeo_gid,0);
	-- Insert or Update
	if  _trainergeo_gid = 0 then
			insert into trng_mst_ttrainergeo 
			(
				trainer_id,
				trainer_level_code,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				v_trainer_level_code,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_status_code,
				now(),
				_user_code
			) returning trainergeo_gid into _trainergeo_gid;
							
-- 			v_succ_code := 'SB00CMNCMN_002';
			v_succ_code := 'VB00CMNCMN_074';
	else 
			update	trng_mst_ttrainergeo 
			set 	trainer_level_code	= v_trainer_level_code,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trainergeo_gid 		= _trainergeo_gid
			and 	status_code 		= 'A'
			returning trainergeo_gid into _trainergeo_gid;
			v_succ_code := 'SB00CMNCMN_002';
		
	end if;

	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_loginhistory(INOUT _loginhistory_gid udd_int, _user_code udd_code, _ip_address udd_desc, _login_date udd_datetime, _login_mode udd_code, _login_status udd_code, _lang_code udd_code, _role_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mohan S
		Created Date : 05-09-2022
		SP Code      : B01LGHCXX
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
begin
	-- user code validation
	if _user_code = '' then
		v_err_code := v_err_code || 'VB01LGHCXX_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01LGHCXX_001', _lang_code) || v_new_line;	
	end if;
	
	if _ip_address = '' then
		v_err_code := v_err_code || 'VB01LGHCXX_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01LGHCXX_002', _lang_code) || v_new_line;	
	end if;
	
	if _login_date is null then
		v_err_code := v_err_code || 'VB01LGHCXX_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01LGHCXX_003', _lang_code) || v_new_line;	
	end if;
	
	if _login_mode = '' then
		v_err_code := v_err_code || 'VB01LGHCXX_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01LGHCXX_004', _lang_code) || v_new_line;	
	end if;
	
	if _login_status = '' then
		v_err_code := v_err_code || 'VB01LGHCXX_005' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01LGHCXX_005', _lang_code) || v_new_line;	
	end if;
	
	-- language code validation
	if not exists (select * from core_mst_tlanguage 
				   where 	lang_code   = _lang_code
				   and   	status_code = 'A')
	then
		v_err_code := v_err_code || 'VB00CMNCMN_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_003', _lang_code) || v_new_line;		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- Login history table insert
	insert into trng_trn_tloginhistory(
								user_code,
								ip_address,
								login_date,
								login_mode,
								login_status)
						values(
								_user_code,
								_ip_address,
								_login_date,
								_login_mode,
								_login_status
								) returning loginhistory_gid into _loginhistory_gid;
								v_succ_code := 'SB00CMNCMN_001';
			  
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_master(INOUT _master_gid udd_int, _parent_code udd_code, _master_code udd_code, _depend_parent_code udd_code, _depend_code udd_code, _rec_slno udd_int, _sys_flag udd_code, _status_code udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Vijay Vel
		Created Date : 24-08-2022
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 02
		
		SP Code : B01MASCUD
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
begin
	-- validation
	-- master code cannot be blank
	if _master_code = '' then
		v_err_code := v_err_code || 'VB01QCMCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCMCUD_001', _lang_code) || v_new_line;
	end if;
	
	-- parent code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where	parent_code = 'SYS'
				   and 		master_code = _parent_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01QCMCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCMCUD_002', _lang_code) || v_new_line;
	end if;
	
	if _depend_code <> '' then
		select 	depend_parent_code into _depend_parent_code 
		from 	core_mst_tmaster 
		where 	parent_code = 'SYS'
		and 	master_code = _parent_code
		and 	status_code = 'A';
		
		_depend_parent_code = coalesce(_depend_parent_code,'');
	end if;
	
	-- depend parent code validation
	if _depend_parent_code <> '' then
		if not exists (select 	* 
					   from		core_mst_tmaster 
					   where 	parent_code = 'SYS'
					   and 		master_code = _depend_parent_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB01QCMCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCMCUD_003', _lang_code) || v_new_line;
		end if;
	end if;

	-- depend code validation
	if _depend_code <> '' then
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = _depend_parent_code 
					   and 		master_code = _depend_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB01QCMCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCMCUD_004', _lang_code) || v_new_line;
		end if;
	end if;

	-- sys flag validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_YES_NO'
				   and 		master_code = _sys_flag 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01QCMCUD_005' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCMCUD_005', _lang_code) || v_new_line;	
	end if;
	
	-- status code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_STATUS'
				   and 		master_code = _status_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01MASCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MASCUD_001', _lang_code);	
	end if;
	
	if _mode_flag = 'I' then
		_lang_code = 'en_US';
	end if;
	
	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01MASCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MASCUD_002', _lang_code);	
	end if;

	-- timestamp check for concurrency
	select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
	from 	core_mst_tmaster
	where	master_gid = _master_gid;
	
	v_timestamp	:= coalesce(v_timestamp, '');
	
	IF (v_timestamp != _row_timestamp) 
	then
		-- Record modified since last fetch so Kindly refetch and continue
		v_err_code := v_err_code || 'VB01MASCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MASCUD_003', _lang_code) || v_new_line;	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_tmaster
				  where 	master_gid = _master_gid 
				  and 		parent_code = _parent_code
				  and 		master_code = _master_code 
				  and 		status_code = 'A'
				 ) then
			Update 	core_mst_tmaster
			set		status_code = 'I',
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	master_gid = _master_gid 
			and 	parent_code = _parent_code
			and 	master_code = _master_code 
			and 	status_code = 'A';
			
			v_succ_code := 'SB01MASCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01MASCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MASCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if _parent_code = 'QCD_RESPONSE' then
			-- master table insert 
			insert into core_mst_tmaster 
						(
							parent_code,
							master_code,
							depend_parent_code,
							depend_code,
							rec_slno,
							sys_flag,
							status_code,
							created_by,
							created_date,
							row_timestamp
						)
						values
						(
							'SYS',
							_master_code,
							_depend_parent_code,
							_depend_code,
							0,
							'Y',
							'A',
							_user_code,
							now(),
							now()
						);
		end if;
		
		if not exists(select 	* 
					  from		core_mst_tmaster
					  where		master_gid = _master_gid 
					  and 		parent_code = _parent_code
					  and 		master_code = _master_code 
					  and 		status_code = 'A'
					 ) then
			insert into core_mst_tmaster 
			(
				parent_code,
				master_code,
				depend_parent_code,
				depend_code,
				rec_slno,
				sys_flag,
				status_code,
				created_by,
				created_date,
				row_timestamp
			)
			values
			(
				_parent_code,
				_master_code,
				_depend_parent_code,
				_depend_code,
				_rec_slno,
				_sys_flag,
				_status_code,
				_user_code,
				now(),
				now()
			) returning master_gid into _master_gid;
			
			v_succ_code := 'SB01MASCUD_001';
			
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01MASCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MASCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tmaster
				   where	master_gid = _master_gid 
				   and 		parent_code = _parent_code
				   and 		master_code = _master_code 
				   and 		status_code = 'A'
				   ) then
			update	core_mst_tmaster 
			set 	depend_parent_code = _depend_parent_code,
					depend_code = _depend_code,
					status_code = _status_code,
					rec_slno = _rec_slno,
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	master_gid = _master_gid 
			and 	parent_code = _parent_code
			and 	master_code = _master_code 
			and 	status_code = 'A';
			
			v_succ_code := 'SB01MASCUD_002';
		else
			v_err_code := v_err_code || 'EB01MASCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MASCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	core_mst_tmaster
			    where 	parent_code = _parent_code 
				group	by master_code
				having	count('*') > 1) 
	then
		-- master code cannot be duplicated
		v_err_code := v_err_code || 'EB01QCMCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB01QCMCUD_001', _lang_code),_master_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_mastertranslate(INOUT _mastertranslate_gid udd_int, _parent_code udd_code, _master_code udd_code, _master_lang_code udd_code, _master_desc udd_desc, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Vijay Vel
		Created Date : 24-08-2022
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
		
		SP Code : B01MATCUD
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
begin
	-- validation
	-- master desc cannot be blank
	if _master_desc = '' then
		v_err_code := v_err_code || 'VB01QCTCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCTCUD_001', _lang_code) || v_new_line;
	end if;
	
	-- parent code validation
	if not exists (select * 
				   from 	core_mst_tmaster 
				   where	parent_code = 'SYS'
				   and 		master_code = _parent_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01QCTCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCTCUD_002', _lang_code) || v_new_line;
	end if;
	
	-- master code validation
	if not exists (select * 
				   from 	core_mst_tmaster 
				   where	parent_code = _parent_code 
				   and 		master_code = _master_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01QCTCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCTCUD_003', _lang_code) || v_new_line;
	end if;
	
	-- master language code validation
	if not exists (select * 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _master_lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01QCTCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01QCTCUD_004', _lang_code)|| v_new_line;	
	end if;
	
	-- language code validation
	if not exists (select * 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01MATCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MATCUD_001', _lang_code);	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select mastertranslate_gid 
				  from 	core_mst_tmastertranslate
				  where mastertranslate_gid = _mastertranslate_gid 
				  and 	parent_code = _parent_code
				  and 	master_code = _master_code 
				  and 	lang_code = _master_lang_code 
				 ) then
			delete from	core_mst_tmastertranslate
			where 		mastertranslate_gid = _mastertranslate_gid 
			and 		parent_code = _parent_code
			and 		master_code = _master_code
			and 		lang_code = _master_lang_code;
			
			v_succ_code := 'SB01MATCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01MATCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MATCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then 
		-- master translate table insert 
		if _parent_code = 'QCD_RESPONSE' then 
			insert into core_mst_tmastertranslate 
			(
				parent_code,
				master_code,
				lang_code,
				master_desc,
				created_date,
				created_by
			)
			values
			(
				'SYS',
				_master_code,
				_master_lang_code,
				_master_desc,
				now(),
				_user_code
			) ;
		end if;
		if not exists(select * 
					  from	core_mst_tmastertranslate
					  where	mastertranslate_gid = _mastertranslate_gid 
					  and 	parent_code = _parent_code
					  and 	master_code = _master_code 
					  and 	lang_code = _master_lang_code 
					 ) then
			insert into core_mst_tmastertranslate 
			(
				parent_code,
				master_code,
				lang_code,
				master_desc,
				created_date,
				created_by
			)
			values
			(
				_parent_code,
				_master_code,
				_master_lang_code,
				_master_desc,
				now(),
				_user_code
			) returning mastertranslate_gid into _mastertranslate_gid;
			
			v_succ_code := 'SB01MATCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01MATCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MATCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select * 
				   from 	core_mst_tmastertranslate
				   where	mastertranslate_gid = _mastertranslate_gid 
				   and 		parent_code = _parent_code
				   and 		master_code = _master_code 
				   ) then
			update	core_mst_tmastertranslate 
			set 	lang_code = _master_lang_code,
					master_desc = _master_desc,
					updated_date = now(),
					updated_by  = _user_code
			where 	mastertranslate_gid = _mastertranslate_gid 
			and 	parent_code = _parent_code
			and 	master_code = _master_code ;
			
			v_succ_code := 'SB01MATCUD_002';
		else
			v_err_code := v_err_code || 'EB01MATCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MATCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	core_mst_tmastertranslate 
			    where 	parent_code = _parent_code
			   	and 	master_code = _master_code 
				group	by lang_code
				having	count(*) > 1) 
	then
		-- master desc cannot be duplicated
		v_err_code := v_err_code || 'EB01QCTCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB01QCTCUD_001', _lang_code),_lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_menu(INOUT _menu_gid udd_int, _menu_code udd_code, _parent_code udd_code, _menu_slno udd_amount, _url_action_method udd_desc, _status_code udd_code, _menu_type_code udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		SP Code      : B01MENCUD
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 03
	*/

	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
begin

-- Menu Code validation
	if _menu_code = '' then
		v_err_code := v_err_code || 'VB01MENCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MENCUD_003', _lang_code) || v_new_line;
	end if;
	
-- Parent Code validation
	if _parent_code = '' then
		v_err_code := v_err_code || 'VB01MENCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MENCUD_002', _lang_code) || v_new_line;
	end if;
	
-- Status Code Validation
	if not exists (select * from core_mst_tmaster 
				   where parent_code   = 'QCD_STATUS' 
				   and   master_code   = _status_code 
				   and   status_code   = 'A')
	then
		v_err_code := v_err_code || 'VB01MENCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MENCUD_001', _lang_code) || v_new_line;		
	end if;
	
	
	-- language code validation
	if not exists (select * from core_mst_tlanguage 
				   where lang_code   = _lang_code
				   and   status_code = 'A')
	then
		v_err_code := v_err_code || 'VB01MENCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MENCUD_004', _lang_code) || v_new_line;		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag = 'D' then
		if exists(select * from core_mst_tmenu
				  where menu_gid    = _menu_gid
				  and   status_code <> 'I')
			then
			update core_mst_tmenu 
				set	status_code 	= 'I',
					updated_by		= _user_code,
					updated_date	= now()
				where menu_gid 	    = _menu_gid
				and   status_code	<> 'I';
			v_succ_code := 'SB01MENCUD_003';
		else
			-- Error message
			v_err_code := v_err_code || 'EB01MENCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MENCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
		
	elseif _mode_flag = 'I' then
		if not exists (select * from core_mst_tmenu
				   		where menu_code   = _menu_code
					  	and   parent_code = _parent_code)
		 then
			insert into core_mst_tmenu(
										menu_code ,
										parent_code ,
										menu_slno ,
										url_action_method ,
										status_code ,
										menu_type_code,
										created_date,
										created_by
									   )
								values(
										_menu_code ,
										_parent_code ,
										_menu_slno ,
										_url_action_method ,
										_status_code ,
										_menu_type_code,
										now(),
										_user_code
									   ) returning menu_gid into _menu_gid;
			
			v_succ_code := 'SB01MENCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01MENCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MENCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
		
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tmenu
				   where	menu_gid    = _menu_gid
				   and 		status_code = 'A'
				   ) then
			update	core_mst_tmenu 
			set 	menu_slno 		  = _menu_slno,
					url_action_method = _url_action_method,
					status_code 	  = _status_code,
					menu_type_code	  = _menu_type_code,
					updated_date      = now(),
					updated_by	      = _user_code
			where 	menu_gid          = _menu_gid 
			and 	status_code       = 'A';
			
			v_succ_code := 'SB01MENCUD_002';
		else
			v_err_code := v_err_code || 'EB01MENCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MENCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_menutranslate(INOUT _menutranslate_gid udd_int, _menu_code udd_code, _menu_desc udd_desc, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		SP Code      : B01METCUD
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 02
	*/

	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
begin

-- Menu Code validation
	if not exists ( select 	* 
				    from 	core_mst_tmenu 
				    where 	menu_code   = _menu_code	
				    and     status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01METCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01METCUD_001', _lang_code)  || v_new_line;	
	end if;
	
--	Menu description validation
	if _menu_desc = '' then
		v_err_code := v_err_code || 'VB01METCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01METCUD_002', _lang_code)  || v_new_line;	
	end if;
	
-- language code validation
	if not exists (select * from core_mst_tlanguage 
				   where lang_code   = _lang_code
				   and   status_code = 'A')
	then
		v_err_code := v_err_code || 'VB01METCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01METCUD_003', _lang_code) || v_new_line;		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag = 'D' then
		if exists(select * from core_mst_tmenutranslate
				  where menutranslate_gid = _menutranslate_gid)
			then
				delete from core_mst_tmenutranslate 
				where menutranslate_gid = _menutranslate_gid;
			v_succ_code := 'SB01MEtCUD_003';
		else
			-- Error message
			v_err_code := v_err_code || 'EB01METCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01METCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
		
	elseif _mode_flag = 'I' then
		if not exists (select * from core_mst_tmenutranslate
				   		where menu_code   = _menu_code)
		 then
			insert into core_mst_tmenutranslate(
												menu_code ,
												lang_code,
												menu_desc,
												created_date,
												created_by
											   )
										values(
												_menu_code ,
												_lang_code,
												_menu_desc,
												now(),
												_user_code
											   ) returning menutranslate_gid into _menutranslate_gid;
			
			v_succ_code := 'SB01METCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01METCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01METCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
		
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tmenutranslate
				   where	menutranslate_gid = _menutranslate_gid
				   ) then
			update	core_mst_tmenutranslate 
			set 	menu_desc    = _menu_desc,
					updated_date = now(),
					updated_by	 = _user_code
			where 	menu_code    = _menu_code
			and     lang_code    = _lang_code;
			
			v_succ_code := 'SB01METCUD_002';
		else
			v_err_code := v_err_code || 'EB01METCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01METCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_message(INOUT _msg_gid udd_int, _msg_code udd_code, _status_code udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01MSGCDX
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 02
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);	
begin
	-- validation
	
	-- message code validation
	if _msg_code = '' then
		v_err_code := v_err_code || 'VB01MSGCDX_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MSGCDX_001', _lang_code) || v_new_line;
	end if;
	
	-- status code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_STATUS'
				   and 		master_code = _status_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01MSGCDX_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MSGCDX_002', _lang_code) || v_new_line;	
	end if;

	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01MSGCDX_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MSGCDX_003', _lang_code) || v_new_line;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_tmessage
				  where 	msg_gid 	= _msg_gid 
				  and 		status_code = 'A'
				 ) then
			Update 	core_mst_tmessage
			set		status_code 	= 'I',
					updated_by 		= _user_code,
					updated_date 	= now()					
			where 	msg_gid 		= _msg_gid 
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB01MSGCDX_002';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01MSGCDX_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MSGCDX_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		core_mst_tmessage
					  where		msg_code = _msg_code
					  and 		status_code = 'A'
					 ) then
			insert into core_mst_tmessage 
			(
				msg_code,
				status_code,
				created_by,
				created_date			
			)
			values
			(
				_msg_code,
				_status_code,
				_user_code,
				now()
				
			) returning msg_gid into _msg_gid;			
			v_succ_code := 'SB01MSGCDX_001';			
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01MSGCDX_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MSGCDX_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;		
	end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
				
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_messagetranslate(INOUT _msgtranslate_gid udd_int, _msg_code udd_code, _langcode udd_code, _msg_desc udd_desc, _lang_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01MSTCUD
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);	
begin
	-- validation
	
	-- message code validation
	if not exists (select 	* 
				   from 	core_mst_tmessage  
				   where 	msg_code = _msg_code				  
				  ) then
		v_err_code := v_err_code || 'VB01MSTCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MSTCUD_001', _lang_code)|| v_new_line;
	end if;
	
	-- message desc validation
	if _msg_desc = '' then
		v_err_code := v_err_code || 'VB01MSTCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MSTCUD_002', _lang_code) || v_new_line;
	end if;

	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01MSTCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01MSTCUD_003', _lang_code) || v_new_line;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_tmessagetranslate
				  where 	msgtranslate_gid 	= _msgtranslate_gid 				 
				 ) then
				 
			Delete from 	core_mst_tmessagetranslate
			where		    msgtranslate_gid = _msgtranslate_gid;
			
			v_succ_code := 'SB01MSTCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01MSTCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MSTCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		core_mst_tmessagetranslate
					  where		msg_code = _msg_code					 
					 ) then
			insert into core_mst_tmessagetranslate 
			(
				msg_code,
				lang_code,
				msg_desc			
			)
			values
			(
				_msg_code,
				_langcode,
				_msg_desc
				
			) returning msgtranslate_gid into _msgtranslate_gid;			
			v_succ_code := 'SB01MSTCUD_001';			
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01MSTCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MSTCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;	
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tmessagetranslate
				   where	msgtranslate_gid 	= _msgtranslate_gid 
				   ) then
			update	core_mst_tmessagetranslate 
			set	    msg_desc				= _msg_desc		
			where 	msgtranslate_gid		= _msgtranslate_gid;
				
			v_succ_code := 'SB01MSTCUD_002';
		else
			v_err_code := v_err_code || 'EB01MSTCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01MSTCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;		
	end if;
	
	if exists (	select	count(*)
				from 	core_mst_tmessagetranslate
			    where 	msg_code 	= _msg_code 
				group	by lang_code
				having	count('*') > 1) 
	then
		-- msg code  cannot be duplicated
		v_err_code := v_err_code || 'VB01MSTCUD_003';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB01MSTCUD_003', _lang_code),_msg_code);
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
			
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_mobilesyncjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 24-08-2022
		
		Updated By   : Mangai
		Updated Date : 15-03-2023
		
		SP Code      : B01MSYCUX
		Version No   : 2
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											mobilesync_gid		udd_int,
											tprogram_id			udd_code,
											role_code			udd_code,
											user_code			udd_code,
											mobile_no			udd_mobile,
											sync_type_code		udd_code,
											last_sync_date		udd_datetime,
											prev_last_sync_date	udd_datetime,
											status_code			udd_code,
											tprogram_lock       udd_flag,
											created_date   		udd_datetime,
											created_by			udd_user,
											updated_date		udd_text,
											updated_by			udd_user
										)
			loop
			  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;
			
		      insert into core_mst_tmobilesync(
			  								mobilesync_gid,
											tprogram_id,
											role_code,
											user_code,
											mobile_no,
											sync_type_code,
											last_sync_date,
											prev_last_sync_date,
											status_code,
											created_date,
											created_by,
											updated_date,
											updated_by
			  							)
								values  (											
			  								v_colrec.mobilesync_gid,
											v_colrec.tprogram_id,
											v_colrec.role_code,
											v_colrec.user_code,
											v_colrec.mobile_no,
											v_colrec.sync_type_code,
											v_colrec.last_sync_date,
											v_colrec.prev_last_sync_date,
											v_colrec.status_code,
											v_colrec.created_date,
											v_colrec.created_by,
											v_updated_date,
											v_colrec.updated_by
								       )
										
				on conflict (
								tprogram_id,
								role_code,
								user_code,
								sync_type_code
							)
							do update set   mobilesync_gid			= v_colrec.mobilesync_gid,
											tprogram_id				= v_colrec.tprogram_id,
											role_code				= v_colrec.role_code,
											user_code				= v_colrec.user_code,
											mobile_no				= v_colrec.mobile_no,
											sync_type_code			= v_colrec.sync_type_code,
											last_sync_date			= v_colrec.last_sync_date,
											prev_last_sync_date		= v_colrec.prev_last_sync_date,
											status_code				= v_colrec.status_code,
											tprogram_lock           = v_colrec.tprogram_lock,
											updated_date			= v_updated_date,	
											updated_by				= v_colrec.updated_by;
			
			END LOOP;
	END
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_mtwschpgmsync(_last_sync_date udd_datetime, _shdpgmsync udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT result_succ_msg refcursor DEFAULT 'rs_succ_msg'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 27-12-2022
		
		Updated By : 	Mangai
		Updated Date : 29-03-2023
		
		SP Code : B06SYNCUX
		Version No : 10
	*/
	v_tprogram udd_jsonb;
	v_tprogramgeo udd_jsonb;
	v_tprogrambatch udd_jsonb;
	v_tprogrambatchcount udd_jsonb;
	v_tprogrambatchattach udd_jsonb;
	v_tprogramtrainer udd_jsonb;
	v_tprogramparticipant udd_jsonb;
	v_tprogramexpense udd_jsonb;
	v_tprogrambudget udd_jsonb;
	v_venue udd_jsonb;
	v_venueaddr udd_jsonb;
	v_venueinfra udd_jsonb;
	v_venueinfradtl udd_jsonb;
	v_note udd_jsonb;
	v_mobilesync udd_jsonb;
	v_tprogram_id udd_code ;
	v_mobsync_prg_id udd_code ;
	
	v_program_level udd_code = '';
	v_tprogrambatch_id record;
	v_participant_id record;
	
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_succ_msg udd_text := '';
begin
	-- stored procedure body 
	-- Get tprogram id
-- 	v_tprogram_id := select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
-- 					 where t.key = 'trng_trn_ttprogram';
	
	-- MOBILE SYNC
	v_mobilesync := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'core_mst_tmobilesync');
				
	v_mobsync_prg_id := (select * from jsonb_to_recordset(v_mobilesync::udd_jsonb) 
	 as b (tprogram_id udd_code));
	 
		-- Multiple device mobile sync validation check
-- 		raise exception '_user_code : %',_user_code || '-'||v_mobsync_prg_id;
		 if not exists ( select * from core_mst_tmobilesync 
						 where 	tprogram_id = v_mobsync_prg_id
						 and 	last_sync_date	<= _last_sync_date 
						 and 	user_code = _user_code
						 and 	role_code = _role_code
						 and 	sync_type_code = 'WTM'
						 and 	status_code = 'A') then
				v_err_code := v_err_code || 'VB06SYNCUX_002';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06SYNCUX_002', _lang_code) || v_new_line;
				RAISE EXCEPTION '%',v_err_code || ' - ' || v_err_msg;
		 end if;

	call public.pr_iud_mobilesyncjson(v_mobilesync);
	
	-- PROGRAM
	v_tprogram := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogram');
				
	 v_tprogram_id := (select * from jsonb_to_recordset(v_tprogram::udd_jsonb) 
	 as b (tprogram_id udd_code));
	 
	call public.pr_iud_tprogramjson(v_tprogram);
								  
	-- PROGRAM GEO
	v_tprogramgeo := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogramgeo');
									   
	call public.pr_iud_tprogramgeojson(v_tprogramgeo);
	
					
	-- PROGRAM BATCH
	v_tprogrambatch := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogrambatch');
									   
	call public.pr_iud_tprogrambatchjson(v_tprogrambatch);
	
	-- PROGRAM BATCH COUNT
	v_tprogrambatchcount := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogrambatchcount');
									   
	call public.pr_iud_tprogrambatchcountjson(v_tprogrambatchcount);
	
	-- PROGRAM BATCH ATTACH
/*	v_tprogrambatchattach := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogrambatchattachment');
									   
	call public.pr_iud_tprogrambatchattachmentjson(v_tprogrambatchattach);
*/	
	-- PROGRAM TRAINER
	v_tprogramtrainer := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogramtrainer');
									   
	call public.pr_iud_tprogramtrainerjson(v_tprogramtrainer);
	
	-- PROGRAM PARTICIPANT
	v_tprogramparticipant := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogramparticipant');
	
	call public.pr_iud_tprogramparticipantjson(v_tprogramparticipant);
	
	-- PROGRAM EXPENSE
	v_tprogramexpense := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogramexpense');
									   
	call public.pr_iud_tprogramexpensejson(v_tprogramexpense);
	
	-- PROGRAM BUDGET
	v_tprogrambudget := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_trn_ttprogrambudget');
									   
	call public.pr_iud_tprogrambudgetjson(v_tprogrambudget);
	
	-- VENUE
	v_venue := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_mst_tvenue');
				
	call public.pr_iud_venuejson(v_venue);
	
	-- VENUE ADDRESS
	v_venueaddr := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_mst_tvenueaddr');
				
	call public.pr_iud_venueaddrjson(v_venueaddr);
	
	-- VENUE INFRA
	/*v_venueinfra := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_mst_tvenueinfra');
				
	call public.pr_iud_venueinfrajson(v_venueinfra);
	
	-- VENUE INFRA DETAILS
	v_venueinfradtl := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_mst_tvenueinfradtl');
				
	call public.pr_iud_venueinfradtljson(v_venueinfradtl);
	*/
	-- NOTE
	v_note := (select t.value from (select * from json_each(_shdpgmsync::udd_json)) as t
				where t.key = 'trng_mst_tnote');
				
	call public.pr_iud_notejson(v_note);
	
	-- delete on tprogramlock
	delete from trng_trn_ttprogramlock 
	where tprogram_id = v_mobsync_prg_id;
		 
	-- insert in feedback trainer and participant table
	for v_tprogrambatch_id in select * from jsonb_to_recordset(v_tprogrambatch::udd_jsonb) as c
									(tprogram_id udd_code,
									 tprogrambatch_id udd_code, 
									 lang_code udd_code,
									 status_code udd_code,
									 updated_by udd_code
									)
	loop
		
		if (v_tprogrambatch_id.status_code = 'C') 
		then
			
			call public.pr_ins_feedback(v_tprogrambatch_id.tprogram_id, v_tprogrambatch_id.tprogrambatch_id,
										v_tprogrambatch_id.lang_code,v_tprogrambatch_id.updated_by, 
										'TrainingCoordinator', _lang_code,v_succ_msg);
		end if;
	end loop;
	
    open result_succ_msg for select fn_get_msg('VB06SYNCUX_001', _lang_code);
	
	-- Refresh Materialized View
-- 	call pr_sch_refreshallmv('public');
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_note(INOUT _note_gid udd_int, _activity_code udd_code, _activity_ref_id udd_code, _note_desc udd_text, _note_code udd_code, _reject_reason_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 17-09-2022
		
		Updated By   : Satheesh
		Updated Date : 22-03-2023
		
		SP Code : B04CONCXD
		version no : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 
	-- Validation
	if _mode_flag = 'U' and _note_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- note code null
	if _note_code = '' then
		_note_code = null;
	end if;
	-- note desc null
	if _note_desc = '' then
		_note_desc = null;
	end if;
	-- reject reason code null
	if _reject_reason_code = '' then
		_reject_reason_code = null;
	end if;
	
	if _mode_flag <> 'D' then
		-- activity code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ACTIVITY'
					   and 		master_code = _activity_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CONCXD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_004', _lang_code) || v_new_line;	
		end if;
		
		-- note code and note desc cannot be blank
		if _note_code isnull and _note_desc isnull then
			v_err_code := v_err_code || 'VB04CONCXD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_001', _lang_code) || v_new_line;	
		end if;

		--- activity reference number validation
		if _activity_code = 'QCD_COURSE' then
			if not exists (select 	* 
						   from 	trng_mst_tcourse
						   where 	course_id   = _activity_ref_id		
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CONCXD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_005', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_TRAINER' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainer
						   where 	trainer_id   = _activity_ref_id		
						   and      status_code  <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CONCXD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_006', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_TRAINING_ORG' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainingorg
						   where 	trngorg_id   = _activity_ref_id		
						   and      status_code  <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CONCXD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_007', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_VENUE' then
			if not exists (select 	* 
						   from 	trng_mst_tvenue
						   where 	venue_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CONCXD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_008', _lang_code)  || v_new_line;	
			end if;
		 elseif _activity_code = 'QCD_TRNG_PROGRAM' then
			if not exists (select 	* 
						   from 	trng_trn_ttprogram
						   where 	tprogram_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CONCXD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_009', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_QUESTIONAIRE' then
			if not exists (select 	* 
						   from 	trng_mst_tquestionaire
						   where 	questionaire_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CONCXD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_010', _lang_code)  || v_new_line;	
			end if;
		end if;
		
		-- Reject Reason Code Validation
	/*	if _reject_reason_code <> ''   then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_REJ_REASON'
						   and 		master_code = _reject_reason_code 
						   and 		status_code = 'A'
						  ) then
			v_err_code := v_err_code || 'VB04CONCXD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_014', _lang_code) || v_new_line;	
			end if;
		end if;
	
		if _reject_reason_code <> '' and _activity_code = 'QCD_COURSE'  then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_COU_REJ'
						   and 		master_code = _reject_reason_code 
						   and 		status_code = 'A'
						  ) then
			v_err_code := v_err_code || 'VB04CONCXD_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_015', _lang_code) || v_new_line;	
			end if;
		end if;
		*/
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CONCXD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_011', _lang_code) || v_new_line;	
		end if;
	end if ;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tnote
				  where 	note_gid = _note_gid
				 ) then
			delete from trng_mst_tnote
			where  note_gid = _note_gid;
			
			v_succ_code := 'SB04CONCXD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04CONCXD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CONCXD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tnote
					  where		note_gid = _note_gid
					 ) then
			insert into trng_mst_tnote 
			(
				activity_code,
				activity_ref_id,
				note_desc,
				note_code,
				reject_reason_code,
				created_date,
				created_by
			)
			values
			(
				_activity_code,
				_activity_ref_id,
				_note_desc,
				_note_code,
				_reject_reason_code,
				now(),
				_user_code
			) returning note_gid into _note_gid;
			
			v_succ_code := 'SB04CONCXD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04CONCXD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CONCXD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tnote
				   where	note_gid    = _note_gid
				   ) then
			update	trng_mst_tnote    
			set 	activity_code 	  = _activity_code,
					activity_ref_id   = _activity_ref_id,
					note_desc		  = _note_desc,
					note_code		  = _note_code,
					reject_reason_code= _reject_reason_code
			where 	note_gid 		  = _note_gid;
			
			v_succ_code := 'SB04CONCXD_002';
		else
			v_err_code := v_err_code || 'EB04CONCXD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CONCXD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_notejson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 31-12-2022
		
		Updated By   : Mangai
		Updated Date : 03-04-2023
		
		SP Code      : B04CONCXX
		Version No   : 2
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											note_gid udd_int,
											activity_code udd_code,
											activity_ref_id udd_code,
											note_desc udd_text,
											created_date udd_datetime,
											created_by udd_user,
											note_code udd_code,
											reject_reason_code udd_code,
											deactivation_reason_code udd_code,
											sendback_reason udd_text
										)
		  loop
-- 		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_mst_tnote(
-- 			  										note_gid,
													activity_code,
													activity_ref_id,
													note_desc,
													created_date,
													created_by,
													note_code,
				                                    reject_reason_code,
													deactivation_reason_code,
				                                    sendback_reason
												)
										values  (										
-- 													v_colrec.note_gid,
													v_colrec.activity_code,
													v_colrec.activity_ref_id,
													v_colrec.note_desc,
													v_colrec.created_date,
													v_colrec.created_by,
													v_colrec.note_code,
											        v_colrec.reject_reason_code,
													v_colrec.deactivation_reason_code,
											        v_colrec.sendback_reason
												);
										
				/*on conflict (
								note_gid
							)
							do update set 	note_gid = v_colrec.note_gid,
											activity_code = v_colrec.activity_code,
											activity_ref_id = v_colrec.activity_ref_id,
											note_desc = v_colrec.note_desc,
											note_code = v_colrec.note_code,
											reject_reason_code = v_colrec.reject_reason_code,
											deactivation_reason_code = v_colrec.deactivation_reason_code,
											sendback_reason = v_colrec.sendback_reason;*/
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_notewithcode(INOUT _note_gid udd_int, _activity_code udd_code, _activity_ref_id udd_code, _note_desc udd_text, _note_code udd_code, _reject_reason_code udd_code, _deactivation_reason_code udd_code, _sendback_reason udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 17-09-2022
		
		Updated By   :   Mohan S / Mangai / Satheesh
		Updated Date : 31-10-2022/ 17-11-2022 / 20-03-2023
		
		SP Code : B04CNWCXD
		version no : 3
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 
	-- Validation
	if _mode_flag = 'U' and _note_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- note code null
	if _note_code = '' then
		_note_code = null;
	end if;
	-- note desc null
	if _note_desc = '' then
		_note_desc = null;
	end if;
	-- reject reason code null
	if _reject_reason_code = '' then
		_reject_reason_code = null;
	end if;
	
	-- deactivation reason code null
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	-- sendback reason null
	if _sendback_reason = '' then
		_sendback_reason = null;
	end if;
	
	if _mode_flag <> 'D' then
		-- activity code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ACTIVITY'
					   and 		master_code = _activity_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CNWCXD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_001', _lang_code) || v_new_line;	
		end if;
		
		-- note code and note desc cannot be blank
		if _note_code isnull and _note_desc isnull then
			v_err_code := v_err_code || 'VB04CONCXD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CONCXD_001', _lang_code) || v_new_line;	
		end if;

		--- activity reference number validation
		if _activity_code = 'QCD_COURSE' then
			if not exists (select 	* 
						   from 	trng_mst_tcourse
						   where 	course_id   = _activity_ref_id		
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CNWCXD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_002', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_TRAINER' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainer
						   where 	trainer_id   = _activity_ref_id		
						   and      status_code  = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04CNWCXD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_003', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_TRAINING_ORG' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainingorg
						   where 	trngorg_id   = _activity_ref_id		
						   and      status_code  <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CNWCXD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_004', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_VENUE' then
			if not exists (select 	* 
						   from 	trng_mst_tvenue
						   where 	venue_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CNWCXD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_005', _lang_code)  || v_new_line;	
			end if;
		 elseif _activity_code = 'QCD_TRNG_PROGRAM' then
			if not exists (select 	* 
						   from 	trng_trn_ttprogram
						   where 	tprogram_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CNWCXD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_006', _lang_code)  || v_new_line;	
			end if;
		elseif _activity_code = 'QCD_QUESTIONAIRE' then
			if not exists (select 	* 
						   from 	trng_mst_tquestionaire
						   where 	questionaire_id   = _activity_ref_id		
						   and      status_code      <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB04CNWCXD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_007', _lang_code)  || v_new_line;	
			end if;
		end if;
		
		-- Reject Reason Code Validation
		if _reject_reason_code notnull   then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_REJ_REASON'
						   and 		master_code = _reject_reason_code 
						   and 		status_code = 'A'
						  ) then
			v_err_code := v_err_code || 'VB04CNWCXD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_008', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- Deactivation Reason Code Validation
		if _deactivation_reason_code notnull then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code 
						   and 		status_code = 'A'
						  ) then
			v_err_code := v_err_code || 'VB04CNWCXD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_009', _lang_code) || v_new_line;	
			end if;
		end if;
		/*
		if _deactivation_reason_code <> '' and _activity_code = 'QCD_COURSE'  then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_COU_REJ'
						   and 		master_code = _deactivation_reason_code 
						   and 		status_code = 'A'
						  ) then
			v_err_code := v_err_code || 'VB04CNWCXD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_011', _lang_code) || v_new_line;	
			end if;
		end if;
		*/
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CNWCXD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CNWCXD_010', _lang_code) || v_new_line;	
		end if;
	end if ;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tnote
				  where 	note_gid = _note_gid
				 ) then
			delete from trng_mst_tnote
			where  note_gid = _note_gid;
			
			v_succ_code := 'SB04CONCXD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04CNWCXD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CNWCXD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tnote
					  where		note_gid = _note_gid
					 ) then
			insert into trng_mst_tnote 
			(
				activity_code,
				activity_ref_id,
				note_desc,
				note_code,
				reject_reason_code,
				deactivation_reason_code,
				sendback_reason,
				created_date,
				created_by
			)
			values
			(
				_activity_code,
				_activity_ref_id,
				_note_desc,
				_note_code,
				_reject_reason_code,
				_deactivation_reason_code,
				_sendback_reason,
				now(),
				_user_code
			) returning note_gid into _note_gid;
			
			v_succ_code := 'SB04CONCXD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04CNWCXD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CNWCXD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tnote
				   where	note_gid    = _note_gid
				   ) then
			update	trng_mst_tnote    
			set 	activity_code 	  = _activity_code,
					activity_ref_id   = _activity_ref_id,
					note_desc		  = _note_desc,
					note_code		  = _note_code,
					reject_reason_code= _reject_reason_code,
					deactivation_reason_code = _deactivation_reason_code,
					sendback_reason   = _sendback_reason
			where 	note_gid 		  = _note_gid;
			
			v_succ_code := 'SB04CONCXD_002';
		else
			v_err_code := v_err_code || 'EB04CNWCXD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04CNWCXD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_qstgrp_qstgrptrn(INOUT _questionairegrp_gid udd_int, INOUT _questionaire_id udd_code, INOUT _questionairegrp_id udd_code, _group_name udd_desc, _group_seq_no udd_int, _status_code udd_code, INOUT _questionairegrptranslate_gid udd_int, _ques_grp_lang udd_code, _group_desc udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan
		Created Date : 07-10-2022
		SP Code : B03QUGCUD
	*/
	
begin 	
	
	if _mode_flag = 'I' then
		call pr_iud_questionairegrp(_questionairegrp_gid,_questionaire_id,
								    _questionairegrp_id,_group_name,_group_seq_no,
								    _status_code,_user_code,_role_code,_lang_code,
								    _mode_flag,_succ_msg);
	elseif _mode_flag = 'U' or _mode_flag = 'D' then
	 	if _questionairegrptranslate_gid > 0 then
			call pr_iud_questionairegrptranslate(_questionairegrptranslate_gid,
												 _questionairegrp_id, _ques_grp_lang, _group_desc,
												 _user_code, _role_code, _lang_code, _mode_flag,
												 _succ_msg);
	 	 end if;
	  call pr_iud_questionairegrp(_questionairegrp_gid,_questionaire_id,
								    _questionairegrp_id,_group_name,_group_seq_no,
								    _status_code,_user_code,_role_code,_lang_code,
								    _mode_flag,_succ_msg);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_ques_questrn(INOUT _question_gid udd_int, INOUT _questionaire_id udd_code, INOUT _questionairegrp_gid udd_int, INOUT _questionairegrp_id udd_code, _questionairegrp_code udd_code, _questionairegrp_seq_no udd_int, INOUT _question_id udd_code, _question udd_desc, _question_seq_no udd_int, _question_type_code udd_code, _question_code udd_code, _status_code udd_code, INOUT _questiontranslate_gid udd_int, _question_lang udd_code, _question_desc udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 07-10-2022
		
		updated by : Satheesh S
		updatde date : 16-03-2023
		
		SP Code    : B03QUTCUD
		version no : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_lang_jsonb udd_jsonb := '[{}]';
	v_lang_code udd_code := '';
	v_questiontranslate_gid udd_int := 0;

begin 	
	-- questionaire id validation
	if not exists (select 	* 
				   from 	trng_mst_tquestionaire
				   where 	questionaire_id   = _questionaire_id
				   and      status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB03QUTCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUTCUD_001', _lang_code)  || v_new_line;	
	end if;
	
	-- group name validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_QUESTGRP_CODE'
				   and 		master_code = _questionairegrp_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB03QUTCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUTCUD_002', _lang_code)|| v_new_line;	
	end if;
	
	-- group seq no validation
	if _questionairegrp_seq_no = 0 then
		v_err_code := v_err_code || 'VB03QGRCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGRCUD_002', _lang_code) || v_new_line;
	end if;
		
	-- status code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_STATUS'
				   and 		master_code = _status_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB03QUTCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUTCUD_003', _lang_code)|| v_new_line;	
	end if;
	
	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB03QUTCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUTCUD_004', _lang_code)|| v_new_line;	
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	
	insert into trng_mst_tquestionairegrp  (
			  								questionaire_id,
											questionairegrp_id,
											questionairegrp_code,
											questionairegrp_seq_no,
											status_code,
											created_date,
											created_by 
			  							)
								values  (											
			  								_questionaire_id,
											_questionairegrp_id,
											_questionairegrp_code,
											_questionairegrp_seq_no,
											_status_code,
											now(),
											_user_code
								       )
										
				on conflict (   
								questionaire_id,
								questionairegrp_id
							)
							do update set   questionaire_id			=	_questionaire_id,
											questionairegrp_code	=	_questionairegrp_code,
											questionairegrp_seq_no	=	_questionairegrp_seq_no,
											status_code			=	_status_code,
											updated_date		=	now(),
											updated_by			=	_user_code
							
							returning   questionairegrp_gid into _questionairegrp_gid;
							
							update trng_mst_tquestionairegrp 
							set 	questionairegrp_id = 'QGR_' || _questionairegrp_gid
							where  questionairegrp_gid = _questionairegrp_gid;
							
							select 	questionairegrp_id into _questionairegrp_id
							from 	trng_mst_tquestionairegrp
							where 	questionairegrp_gid = _questionairegrp_gid;
			
	if _mode_flag = 'I' then
		call pr_iud_question(
								_question_gid,	_questionaire_id, _questionairegrp_id,  
								_question_id, _question, _question_seq_no, _question_type_code, 
								_question_code,  _status_code, _user_code, _role_code, _lang_code, 
								_mode_flag, _succ_msg
							);
							
	-- Questiontranslate insert
	if exists(select 	* 
			   from 	trng_mst_tquestion
			   where 	question_id     = _question_id
			   and      status_code 	= 'A') then
			   
			   select 	lang_jsonb into v_lang_jsonb 
			   from 	trng_mst_tquestionaire
			   where 	questionaire_id = _questionaire_id
			   and 		status_code = 'A';
			   
		for v_lang_code in (select * from jsonb_to_recordset(v_lang_jsonb) as b (language udd_code))
		LOOP 
		if not exists (select 	* 
					   from 	trng_mst_tquestiontranslate 
					   where 	question_id = _question_id
					   and 		lang_code = v_lang_code
					  ) then
					  
			call public.pr_iud_questiontranslate(v_questiontranslate_gid,_question_id,v_lang_code,
												_question_desc,_user_code,_role_code,_lang_code,'I',_succ_msg);
			v_questiontranslate_gid := 0;
		end if;
		end loop;	   
	end if;
	
	elseif _mode_flag = 'U' or _mode_flag = 'D' then
		if _question_lang <> '' and _question_id <> '' then 
		-- Questiontranslate insert
		if exists(select 	* 
				   from 	trng_mst_tquestion
				   where 	question_id     = _question_id
				   and      status_code 	= 'A') then

				   select 	lang_jsonb into v_lang_jsonb 
				   from 	trng_mst_tquestionaire
				   where 	questionaire_id = _questionaire_id
				   and 		status_code = 'A';

			for v_lang_code in (select * from jsonb_to_recordset(v_lang_jsonb) as b (language udd_code))
			LOOP 
			if not exists (select 	* 
						   from 	trng_mst_tquestiontranslate 
						   where 	question_id = _question_id
						   and 		lang_code = v_lang_code
						  ) then

				call public.pr_iud_questiontranslate(v_questiontranslate_gid,_question_id,v_lang_code,
													_question_desc,_user_code,_role_code,_lang_code,'I',_succ_msg);
				v_questiontranslate_gid := 0;
			end if;
			end loop;	   
		end if;
		
			call pr_iud_questiontranslate( 
											_questiontranslate_gid, _question_id, _question_lang,
											_question_desc, _user_code, _role_code, _lang_code,  
											_mode_flag, _succ_msg 
										 ); 
		end if;			
			call pr_iud_question(
									_question_gid,	_questionaire_id, _questionairegrp_id,  
									_question_id, _question, _question_seq_no, _question_type_code, 
									_question_code,  _status_code, _user_code, _role_code, _lang_code, 
									_mode_flag, _succ_msg
								);		
	end if;
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_question(INOUT _question_gid udd_int, INOUT _questionaire_id udd_code, INOUT _questionairegrp_id udd_code, INOUT _question_id udd_code, _question udd_desc, _question_seq_no udd_int, _question_type_code udd_code, _question_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 23-09-2022
		
		Updated By : Satheesh S
		Updated Date : 20-03-2023
		
		SP Code : B03QUECUD
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
begin 	
	-- Validation
	if _mode_flag = 'U' and _question_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- questionaire group id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestionairegrp
					   where 	questionairegrp_id   = _questionairegrp_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QUECUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_003', _lang_code)  || v_new_line;	
		end if;

		-- questionaire id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestionaire
					   where 	questionaire_id   = _questionaire_id
					   and      status_code = 'A'
					  ) then

			v_err_code := v_err_code || 'VB03QUECUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_004', _lang_code)  || v_new_line;	
		end if;

		-- question validation
		if _question = ''  and _question_type_code = 'QCD_MCQ' then
			v_err_code := v_err_code || 'VB03QUECUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_001', _lang_code) || v_new_line;
		end if;

		-- question seq no validation
		if _question_seq_no = 0 then
			v_err_code := v_err_code || 'VB03QUECUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_002', _lang_code) || v_new_line;
		end if;

		-- question type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTION_TYPE'
					   and 		master_code = _question_type_code 
					   and 		status_code = 'A'
					  ) then
					 
			v_err_code := v_err_code || 'VB03QUECUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_005', _lang_code)|| v_new_line;	
		end if;

		-- question code validation
-- 		if _question_code = ''
-- 		then
-- 			v_err_code := v_err_code || 'VB03QUECUD_005' || ',';
-- 			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_005', _lang_code)|| v_new_line;	
-- 		end if;
		if _question_code <> '' and _question_type_code = 'QCD_MCQ' then 
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_RESPONSE'
						   and 		master_code = _question_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB03QUECUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_005', _lang_code)|| v_new_line;	
			end if;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QUECUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_006', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QUECUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QUECUD_007', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tquestion
				  where 	question_gid = _question_gid
				  and       status_code  = 'A'
				 ) then
				 
			delete from trng_mst_tquestion
			where question_gid = _question_gid
			and     status_code  = 'A';
			/*update 	trng_mst_tquestion
			set		status_code  = 'I',
					updated_by   = _user_code,
					updated_date = now()
			where	question_gid = _question_gid
			and     status_code  = 'A';*/
						
			v_succ_code := 'SB03QUECUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB03QUECUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QUECUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tquestion
					  where		question_gid = _question_gid
					  and       status_code  = 'A'
					 ) then
			insert into trng_mst_tquestion 
			(
				questionaire_id,
				questionairegrp_id,
				question_id,
				question,
				question_seq_no,
				question_type_code,
				question_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
			    _questionaire_id,
				_questionairegrp_id,
				_question_id,
				_question,
				_question_seq_no,
				_question_type_code,
				_question_code,
				_status_code,
				now(),
				_user_code
			) returning question_gid into _question_gid;
			
			_question_id := 'QST_' || 	_question_gid;
			--set question id
			update trng_mst_tquestion
			set    question_id = _question_id
			where  question_gid = _question_gid;
			
			v_succ_code := 'SB03QUECUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB03QUECUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QUECUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tquestion
				   where	question_gid = _question_gid
				   and      status_code  = 'A'
				   ) then
			update	trng_mst_tquestion 
			set 	question			= _question,
					question_seq_no		= _question_seq_no,
					question_type_code	= _question_type_code,
					question_code		= _question_code,
-- 					status_code			= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	question_gid 		= _question_gid
			and     status_code         = 'A';
			
			v_succ_code := 'SB03QUECUD_002';
		else
			v_err_code := v_err_code || 'EB03QUECUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QUECUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tquestion
			    where 	questionairegrp_id    = _questionairegrp_id
			    and     questionaire_id       = _questionaire_id
			    and 	question        	  = _question
			    and     status_code           = 'A'
				group	by questionaire_id, questionairegrp_id, question
				having	count('*') > 1) 
	then
		-- questionaire id, questionairegrp id and question cannot be duplicated
		v_err_code := v_err_code || 'EB03QUECUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB03QUECUD_001', _lang_code),_questionaire_id,_questionairegrp_id,_question);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_questionaire(INOUT _questionaire_gid udd_int, INOUT _questionaire_id udd_code, _questionaire_name udd_desc, _questionaire_ll_name udd_desc, _questionaire_type_code udd_code, _lang_jsonb udd_jsonb, _course_jsonb udd_jsonb, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _status_code udd_code, _deactivation_reason_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 22-09-2022
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		SP Code : B03QTNCUD
		Version No : 8
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_lang_code udd_code := '';
	v_course_id udd_code := '';
	v_course udd_code := '';
	v_questionaire_id udd_code := '';
	v_questionaire_name udd_desc := '';
	v_note_gid udd_int := 0;
begin 	
	-- Validation
	if _mode_flag = 'U' and _questionaire_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	--Get questionaire id and questionaire name against questionaire gid
	select questionaire_id,questionaire_name into v_questionaire_id,v_questionaire_name
	from   trng_mst_tquestionaire
	where  questionaire_gid = _questionaire_gid
	and    status_code <> 'I';
	
	if _mode_flag <> 'D' then
		-- Questionaire name validation
		if _questionaire_name = '' then
			v_err_code := v_err_code || 'VB03QTNCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_001', _lang_code) || v_new_line;
		end if;

		-- Questionaire type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTIONAIRE'
					   and 		master_code = _questionaire_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QTNCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_004', _lang_code)|| v_new_line;	
		end if;
		
		-- English language manditory check
		if not exists ( select b.language from 
						jsonb_to_recordset(_lang_jsonb) b(language udd_text)
						where b.language = 'en_US') then
			v_err_code := v_err_code || 'VB03QTNCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_005', _lang_code)|| v_new_line;		
		end if;

		-- lang json validation
		for v_lang_code in (select * from jsonb_to_recordset(_lang_jsonb) as b (language udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tlanguage 
						   where 	lang_code = v_lang_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB03QTNCUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_006', _lang_code) || v_new_line;	
			end if;
		end loop;

		-- Course json validation
		if _course_jsonb <> '[{}]' then
			for v_course_id in (select * from jsonb_to_recordset(_course_jsonb) as b (course udd_code))
			LOOP
				if not exists (select 	* 
							   from 	trng_mst_tcourse
							   where 	course_id = v_course_id
							   and 		status_code <> 'I'
							  ) then					  
					v_err_code := v_err_code || 'VB03QTNCUD_007' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_007', _lang_code) || v_new_line;	
				end if;
			end loop;
		end if;
		
		if _course_jsonb <> '[{}]' then
			for v_course in (select * from jsonb_to_recordset(_course_jsonb) as b (course udd_code))
			LOOP
				if exists (select 	course_id 
						   from 	trng_mst_vquestionairecourse
						   where 	course_id = v_course
						   and      questionaire_type_code = _questionaire_type_code
						   group by course_id
						   having   count(course_id) > 1
							  ) then		
							  raise notice 'v_course : %',v_course;
					v_err_code := v_err_code || 'VB03QTNCUD_002' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_002', _lang_code) || v_new_line;	
				end if;
			end loop;
		end if;
		
		if _course_jsonb = '[{}]' then
			if exists(select * 
					  from   trng_mst_tquestionaire
					  where  course_jsonb = '[{}]'
					  and    questionaire_type_code = _questionaire_type_code
					  and    status_code = 'A'
					 ) 
			then
					v_err_code := v_err_code || 'VB03QTNCUD_003' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_003', _lang_code) || v_new_line;	
			end if;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QTNCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_008', _lang_code)|| v_new_line;	
		end if;
		
		-- validity from validation
		if _validity_from isnull
		then
				v_err_code := v_err_code || 'VB03QTNCUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_009', _lang_code) || v_new_line;	
		end if;

		-- Validity to or indefinite flag validation
		if _validity_from IS NOT NULL then
			if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
				_validity_to := null;
			end if;
			if _validity_to isnull and _indefinite_flag = 'N' then
				v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
			end if;
		end if;

		-- Validitiy to validation
		if  _validity_to < _validity_from then
			v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QTNCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_010', _lang_code)|| v_new_line;	
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_mst_tquestionaire
		where	questionaire_gid = _questionaire_gid;

		v_timestamp	:= coalesce(v_timestamp, '');

		IF (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB03QTNCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_011', _lang_code) || v_new_line;	
		end if;
	end if;
	
	-- deactivation validation
	if _mode_flag = 'D' and _questionaire_gid <> 0 then
		if _deactivation_reason_code isnull 
			then
				v_err_code := v_err_code || 'VB03QTNCUD_012' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_012', _lang_code) || v_new_line;
		end if;
		
		if _deactivation_reason_code notnull then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB03QTNCUD_013' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_013', _lang_code) || v_new_line;	
			end if;
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tquestionaire
				  where 	questionaire_gid = _questionaire_gid
				  and 		status_code         = 'A'
				 ) then
				 
			-- Insert in note table
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_QUESTIONAIRE', 
									v_questionaire_id, 
									null,
									'I',
									'',
									_deactivation_reason_code,
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;	
	 
				 
			Update 	trng_mst_tquestionaire
			set		status_code     = 'I',
					deactivation_reason_code =_deactivation_reason_code,
					updated_by      = _user_code,
					updated_date    = now(),
					row_timestamp   = now()
			where 	questionaire_gid = _questionaire_gid
			and 	status_code         = 'A';
			
			v_succ_code := 'VB03QTNCUD_014';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB03QTNCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QTNCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tquestionaire
					  where		questionaire_gid = _questionaire_gid
					  and 		status_code    	    = 'A'
					 ) then
			insert into trng_mst_tquestionaire 
			(
				questionaire_name,
				questionaire_ll_name,
				questionaire_type_code,
				lang_jsonb,
				course_jsonb,
				validity_from,
				validity_to,
				indefinite_flag,
				status_code,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_questionaire_name,
				_questionaire_ll_name,
				_questionaire_type_code,
				_lang_jsonb,
				_course_jsonb,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				_status_code,
				now(),
				_user_code,
				now()
			) returning questionaire_gid into _questionaire_gid;
			
			_questionaire_id := 'QTN_' || _questionaire_gid;
			-- Set questionaire id
			update trng_mst_tquestionaire 
			set questionaire_id = _questionaire_id
			where questionaire_gid = _questionaire_gid;
							
			v_succ_code := 'SB03QTNCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB03QTNCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QTNCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tquestionaire
				   where	questionaire_gid = _questionaire_gid
				   and 		status_code         = 'A'
				   ) then
			update	trng_mst_tquestionaire 
			set 	questionaire_name		= _questionaire_name,
					questionaire_type_code	= _questionaire_type_code,
					lang_jsonb				= _lang_jsonb,
					course_jsonb			= _course_jsonb,
					validity_from			= _validity_from,
					validity_to				= _validity_to,
					indefinite_flag			= _indefinite_flag,
					status_code 			= _status_code,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	questionaire_gid 		= _questionaire_gid
			and 	status_code 			= 'A';
			
			v_succ_code := 'SB03QTNCUD_002';
		else
			v_err_code := v_err_code || 'EB03QTNCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QTNCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tquestionaire
			    where 	questionaire_name      = _questionaire_name
			    and     questionaire_type_code = _questionaire_type_code
			    and 	status_code            = 'A'
				group	by questionaire_name,questionaire_type_code,status_code
				having	count('*') > 1) 
	then
		-- questionaire name cannot be duplicated
		v_err_code := v_err_code || 'VB03QTNCUD_015';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTNCUD_015', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else	
		_succ_msg := v_succ_code || '-' || FORMAT(fn_get_msg(v_succ_code,_lang_code),_questionaire_id,_questionaire_name);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_questionairegrp(INOUT _questionairegrp_gid udd_int, INOUT _questionaire_id udd_code, INOUT _questionairegrp_id udd_code, _questionairegrp_code udd_code, _questionairegrp_seq_no udd_int, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 22-09-2022
		
		Updated By : Satheesh S
		Updated Date : 15-03-2023
		
		SP Code : B03QGRCUD
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
begin 	
 	-- validation -- 
	if _mode_flag = 'U' and _questionairegrp_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- questionaire id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestionaire
					   where 	questionaire_id   = _questionaire_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QGRCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGRCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- group name validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_QUESTGRP_CODE'
					   and 		master_code = _questionairegrp_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QGRCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGRCUD_004', _lang_code)|| v_new_line;	
		end if;

		-- group seq no validation
		if _questionairegrp_seq_no = 0 then
			v_err_code := v_err_code || 'VB03QGRCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGRCUD_002', _lang_code) || v_new_line;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QGRCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGRCUD_005', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QGRCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGRCUD_006', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	
	insert into trng_mst_tquestionairegrp  (
			  								questionaire_id,
											questionairegrp_id,
											questionairegrp_code,
											questionairegrp_seq_no,
											status_code,
											created_date,
											created_by 
			  							)
								values  (											
			  								_questionaire_id,
											_questionairegrp_id,
											_questionairegrp_code,
											_questionairegrp_seq_no,
											_status_code,
											now(),
											_user_code
								       )
										
				on conflict (   
								questionaire_id,
								questionairegrp_id
							)
							do update set   questionaire_id			=	_questionaire_id,
											questionairegrp_code	=	_questionairegrp_code,
											questionairegrp_seq_no	=	_questionairegrp_seq_no,
											status_code			=	_status_code,
											updated_date		=	now(),
											updated_by			=	_user_code
											
							returning   questionairegrp_gid,questionairegrp_id 
							into 		_questionairegrp_gid,_questionairegrp_id;
							
			
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_questionairegrptranslate(INOUT _questionairegrptranslate_gid udd_int, INOUT _questionairegrp_id udd_code, _ques_grp_lang udd_code, _group_desc udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 23-09-2022
		SP Code : B03QGTCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 	
	-- Validation
	if _mode_flag = 'U' and _questionairegrptranslate_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- questionaire group id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestionairegrp
					   where 	questionairegrp_id   = _questionairegrp_id
					   and      status_code = 'A'
					  ) then
		raise notice '%',_questionairegrp_id;

			v_err_code := v_err_code || 'VB03QGTCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGTCUD_002', _lang_code)  || v_new_line;	
		end if;

		-- ques grp lang code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _ques_grp_lang
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QGTCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGTCUD_003', _lang_code)|| v_new_line;	
		end if;

		-- group desc validation
		if _group_desc = '' then
			v_err_code := v_err_code || 'VB03QGTCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGTCUD_001', _lang_code) || v_new_line;
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QGTCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QGTCUD_003', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tquestionairegrptranslate
				  where 	questionairegrptranslate_gid = _questionairegrptranslate_gid
				 ) then
				 
			   -- language english means delete over all Questiongroup
			   if _ques_grp_lang = 'en_US' then
					 delete from trng_mst_tquestionairegrptranslate
					 where 	questionairegrp_id = _questionairegrp_id;
				else
					 delete from trng_mst_tquestionairegrptranslate
					 where 	questionairegrptranslate_gid = _questionairegrptranslate_gid;
				end if;
						
			v_succ_code := 'SB03QGTCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB03QGTCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QGTCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tquestionairegrptranslate
					  where		questionairegrptranslate_gid = _questionairegrptranslate_gid
					 ) then
			insert into trng_mst_tquestionairegrptranslate 
			(
				questionairegrp_id,
				lang_code,
				group_desc,
				created_date,
				created_by
			)
			values
			(
			    _questionairegrp_id,
				_ques_grp_lang,
				_group_desc,
				now(),
				_user_code
			) returning questionairegrptranslate_gid into _questionairegrptranslate_gid;
							
			v_succ_code := 'SB03QGTCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB03QGTCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QGTCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tquestionairegrptranslate
				   where	questionairegrptranslate_gid = _questionairegrptranslate_gid
				   ) then
			update	trng_mst_tquestionairegrptranslate 
			set 	lang_code			= _ques_grp_lang,
					group_desc   		= _group_desc,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	questionairegrptranslate_gid = _questionairegrptranslate_gid;
			
			v_succ_code := 'SB03QGTCUD_002';
		else
			v_err_code := v_err_code || 'EB03QGTCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QGTCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tquestionairegrptranslate
			    where 	questionairegrp_id    = _questionairegrp_id
			    and     lang_code             = _ques_grp_lang
			    and 	group_desc        	  = _group_desc
				group	by questionairegrp_id, lang_code, group_desc
				having	count('*') > 1) 
	then
		-- questionairegrp id, lang_code and group desc cannot be duplicated
		v_err_code := v_err_code || 'EB03QGTCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB03QGTCUD_001', _lang_code),_questionairegrp_id,_ques_grp_lang,_group_desc);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_questiontranslate(INOUT _questiontranslate_gid udd_int, INOUT _question_id udd_code, _question_lang udd_code, _question_desc udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 23-09-2022
		
		Updated By : Satheesh S
		Update Date : 21-03-2023
		
		SP Code : B03QTRCUD
		version no : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 	
	-- Validation	
	if _mode_flag <> 'D' then
		-- question id validation
		if not exists (select 	* 
					   from 	trng_mst_tquestion
					   where 	question_id   = _question_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QTRCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTRCUD_002', _lang_code)  || v_new_line;	
		end if;

		-- question language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _question_lang
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QTRCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTRCUD_003', _lang_code)|| v_new_line;	
		end if;

		-- question desc validation
		if _question_desc = ''
		then
			v_err_code := v_err_code || 'VB03QTRCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTRCUD_001', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB03QTRCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB03QTRCUD_003', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tquestiontranslate
				  where 	question_id = _question_id
				  and 		lang_code = _question_lang
				 ) then
			if _question_lang = 'en_US' then	 
				delete from trng_mst_tquestiontranslate
				where	question_id = _question_id;
			else
				 delete from trng_mst_tquestiontranslate
				 where 	question_id = _question_id
				 and 	lang_code = _question_lang;
			end if;
			
			v_succ_code := 'SB03QTRCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB03QTRCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QTRCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tquestiontranslate
					  where 	question_id = _question_id
				  	  and 		lang_code = _question_lang
					 ) then
			insert into trng_mst_tquestiontranslate 
			(
				question_id,
				lang_code,
				question_desc,
				created_date,
				created_by
			)
			values
			(
			    _question_id,
				_question_lang,
				_question_desc,
				now(),
				_user_code
			) returning questiontranslate_gid into _questiontranslate_gid;
			
			v_succ_code := 'SB03QTRCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB03QTRCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QTRCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tquestiontranslate
				   where 	question_id = _question_id
				   and 		lang_code = _question_lang
				   ) then
			update	trng_mst_tquestiontranslate 
			set 	question_id         = _question_id,
					lang_code			= _question_lang,
					question_desc		= _question_desc,
					updated_by 			= _user_code,
					updated_date 		= now()
			 where 	question_id = _question_id
			 and 	lang_code = _question_lang;
			
			v_succ_code := 'SB03QTRCUD_002';
		else
			v_err_code := v_err_code || 'EB03QTRCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB03QTRCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tquestiontranslate
			    where 	question_id    = _question_id
			    and     lang_code      = _question_lang
			    and 	question_desc  = _question_desc
				group	by question_id, lang_code, question_desc
				having	count('*') > 1) 
	then
		-- questionaire id, questionairegrp id and question cannot be duplicated
		v_err_code := v_err_code || 'EB03QTRCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB03QTRCUD_001', _lang_code),_question_id,_question_lang,_question_desc);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_role(INOUT _role_gid udd_int, _role_name udd_desc, _status_code udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mohan S
		Created Date : 24-08-2022
		SP Code : B01ROLCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_role_code udd_desc := '';
begin
    v_role_code := replace(_role_name collate pg_catalog.""default"",' ','');
	_status_code := 'A';
	-- validation
	-- Role name cannot be blank
	if _role_name = '' then
		v_err_code := v_err_code || 'VB01RLMCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01RLMCUD_002', _lang_code) || v_new_line;
	end if;
	
	-- status code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_STATUS'
				   and 		master_code = _status_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01RLMCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01RLMCUD_002', _lang_code);	
	end if;

	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01RLMCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01RLMCUD_003', _lang_code);	
	end if;

	-- timestamp check for concurrency
	select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
	from 	core_mst_trole
	where	role_gid = _role_gid;
	
	v_timestamp	:= coalesce(v_timestamp, '');
	
	IF (v_timestamp != _row_timestamp) 
	then
		-- Record modified since last fetch so Kindly refetch and continue
		v_err_code := v_err_code || 'VB01RLMCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01RLMCUD_004', _lang_code) || v_new_line;	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_trole
				  where 	role_gid = _role_gid 
				  and 		status_code = 'A'
				 ) then
			Update 	core_mst_trole
			set		status_code = 'I',
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	role_gid = _role_gid 
			and 	status_code = 'A';
			
			v_succ_code := 'SB01RLMCUD_002';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01RLMCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01RLMCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		core_mst_trole
					  where		role_code = v_role_code 
					  and 		status_code = 'A'
					 ) then
			insert into core_mst_trole 
			(
				role_code,
				role_name,
				status_code,
				created_by,
				created_date,
				row_timestamp
			)
			values
			(
				v_role_code,
				_role_name,
				_status_code,
				_user_code,
				now(),
				now()
			) returning role_gid into _role_gid;
			
			v_succ_code := 'SB01RLMCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01RLMCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01RLMCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_trole
				   where	role_gid = _role_gid 
				   and 		status_code = 'A'
				   ) then
			update	core_mst_trole 
			set 	status_code = _status_code,
					updated_by = _user_code,
					updated_date = now(),
					row_timestamp = now()
			where 	role_gid = _role_gid 
			and 	status_code = 'A';
			
			v_succ_code := 'SB01RLMCUD_002';
		else
			v_err_code := v_err_code || 'EB01RLMCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01RLMCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	core_mst_trole
			    where 	role_code = v_role_code 
				group	by role_code
				having	count('*') > 1) 
	then
		-- role code cannot be duplicated
		v_err_code := v_err_code || 'EB01ROLCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB01ROLCUD_001', 'en_US'),v_role_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_rolemenurights(INOUT _rolemenurights_gid udd_int, INOUT _role_code udd_code, _menu_code udd_code, _add_flag udd_desc, _modifiy_flag udd_flag, _view_flag udd_flag, _auth_flag udd_flag, _print_flag udd_flag, _inactive_flag udd_flag, _deny_flag udd_flag, _lang_code udd_code, _user_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mohan S
		Created Date : 24-08-2022
		SP Code : B01RORCDX
		
		Updated by : Mangai
		Updated Date : 22-03-2023
		
		Version No : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
	v_parent_code udd_code:= '';
	v_return_value udd_boolean;
	v_view_flag udd_flag := 'N';
begin
	-- validation
	-- Role code cannot be blank
	if _role_code = '' then
		v_err_code := v_err_code || 'VB01RLRCXX_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01RLRCXX_001', _lang_code) || v_new_line;
	end if;

	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A' 	
				  ) then
		v_err_code := v_err_code || 'VB01RLRCXX_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01RLRCXX_002', _lang_code);	
	end if;
	
	-- View_flag set as Yes
	if _add_flag = 'Y' or _modifiy_flag = 'Y' or _auth_flag = 'Y' then
		_view_flag := 'Y';
	end if;
	
	-- Deny_flag set as No
	if _add_flag = 'N' and _modifiy_flag = 'N' and _auth_flag = 'N' and _view_flag = 'N' then
		_deny_flag := 'Y';
	else
		_deny_flag := 'N';
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if exists(select 	* 
				  from 		core_mst_trolemenurights
				  where 	role_code = _role_code 
				  and 		menu_code = _menu_code 
				 ) then
				 
			--get parent_code from menu table
			select parent_code into v_parent_code from core_mst_tmenu 
			where menu_code = _menu_code
			and status_code  = 'A' ;
			
			-- Get mainmenu permission
			select fn_get_mainmenupermission(v_parent_code,_role_code) into v_return_value;
			
			if v_return_value = 'false' then
				v_view_flag := 'N';
			elseif v_return_value = 'true' then
				v_view_flag := 'Y';
			end if;
			
			update core_mst_trolemenurights set view_flag = v_view_flag
			where role_code = _role_code
			and menu_code = v_parent_code;
			
-- 			update core_mst_trolemenurights set view_flag = 'N'
-- 			where role_code = _role_code
-- 			and menu_code = v_parent_code
-- 			and view_flag = 'N';
			
-- 			if _deny_flag = 'N' then 
-- 				update core_mst_trolemenurights set view_flag = 'Y'
-- 				where role_code = _role_code
-- 				and menu_code = v_parent_code;
-- 			end if;
			
			update	core_mst_trolemenurights 
			set 	add_flag = _add_flag,
					modifiy_flag = _modifiy_flag,
					view_flag = _view_flag,
					auth_flag = _auth_flag,
					print_flag = _print_flag,
					inactive_flag = _inactive_flag,
					deny_flag = _deny_flag
			where 	role_code = _role_code
			and 	menu_code = _menu_code
			returning role_code into _role_code;
			
			v_succ_code := 'SB01RLMCUD_002';
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
			
	end if;
	
	if not exists (select 	* 
				   from 	core_mst_trolemenurights 
				   where 	role_code = _role_code
				   and 		menu_code = _menu_code 
				  ) then
					  
			 insert into core_mst_trolemenurights
								(
									role_code,
									menu_code,
									add_flag,
									modifiy_flag,
									view_flag,
									auth_flag,
									print_flag,
									inactive_flag,
									deny_flag
								)
								values
								(
									_role_code,
									_menu_code,
									_add_flag,
									_modifiy_flag,
									_view_flag,
									_auth_flag,
									_print_flag,
									_inactive_flag,
									_deny_flag
								) returning role_code into _role_code;

					 v_succ_code := 'SB01RLMCUD_001';
					_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
					
	end if;		
					
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_screen(INOUT _screen_gid udd_int, _screen_code udd_code, _screen_name udd_desc, _status_code udd_code, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01SCRCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);	
begin
	-- validation
	-- screen code validation
	if _screen_code = '' then
		v_err_code := v_err_code || 'VB01SCRCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCRCUD_001', _lang_code) || v_new_line;
	end if;
	
	-- screen name validation
	if _screen_name = '' then
		v_err_code := v_err_code || 'VB01SCRCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCRCUD_002', _lang_code) || v_new_line;
	end if;
	
	-- status code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_STATUS'
				   and 		master_code = _status_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01SCRCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCRCUD_004', _lang_code) || v_new_line;	
	end if;

	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01SCRCUD_005' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCRCUD_005', _lang_code) || v_new_line;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_tscreen
				  where 	screen_gid 	= _screen_gid 
				  and 		status_code = 'A'
				 ) then
			Update 	core_mst_tscreen
			set		status_code 	= 'I',
					updated_by 		= _user_code,
					updated_date 	= now()					
			where 	screen_gid 		= _screen_gid 
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB01SCRCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01SCRCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01SCRCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		core_mst_tscreen
					  where		screen_code = _screen_code
					  and 		status_code = 'A'
					 ) then
			insert into core_mst_tscreen 
			(
				screen_code,
				screen_name,
				status_code,
				created_by,
				created_date			
			)
			values
			(
				_screen_code,
				_screen_name,
				_status_code,
				_user_code,
				now()
				
			) returning screen_gid into _screen_gid;			
			v_succ_code := 'SB01SCRCUD_001';			
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01SCRCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01SCRCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;	
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tscreen
				   where	screen_gid 	= _screen_gid 
				   and 		status_code = 'A'
				   ) then
			update	core_mst_tscreen 
			set	    screen_name			= _screen_name,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()					
			where 	screen_gid			= _screen_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB01SCRCUD_002';
		else
			v_err_code := v_err_code || 'EB01SCRCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01SCRCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;		
	end if;
	
	if exists (	select	count(*)
				from 	core_mst_tscreen
			    where 	screen_code 	= _screen_code 
				group	by screen_code
				having	count('*') > 1) 
	then
		-- screen code  cannot be duplicated
		v_err_code := v_err_code || 'VB01SCRCUD_003';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB01SCRCUD_003', _lang_code),_screen_code);
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
			
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_screendata(INOUT _screendata_gid udd_int, _screen_code udd_code, _langcode udd_code, _ctrl_type_code udd_code, _ctrl_id udd_desc, _data_field udd_desc, _label_desc udd_desc, _tooltip_desc udd_desc, _default_label_desc udd_desc, _default_tooltip_desc udd_desc, _ctrl_slno udd_decimal, _lang_code udd_code, _user_code udd_code, _role_code udd_code, _mode_flag udd_flag, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Muthu
		Created Date : 24-08-2022
		SP Code : B01SCDCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);	
begin
	-- validation
	
	-- screen code validation
	if not exists (select 	* 
				   from 	core_mst_tscreen 
				   where 	screen_code = _screen_code				  
				  ) then
		v_err_code := v_err_code || 'VB01SCDCUD_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCDCUD_001', _lang_code)|| v_new_line;
	end if;
	
	-- ctrl_type_code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_CTRL_TYPE'
				   and 		master_code = _ctrl_type_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01SCDCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCDCUD_002', _lang_code) || v_new_line;	
	end if;
	
	-- ctrl id validation
	if _ctrl_id = '' then
		v_err_code := v_err_code || 'VB01SCDCUD_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCDCUD_003', _lang_code) || v_new_line;
	end if;

	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB01SCDCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB01SCDCUD_004', _lang_code) || v_new_line;
	end if;
	
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_tscreendata
				  where 	screendata_gid 	= _screendata_gid 				 
				 ) then
				 
			Delete from 	core_mst_tscreendata
			where		    screendata_gid = _screendata_gid;
			
			v_succ_code := 'SB01SCDCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB01SCDCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01SCDCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		core_mst_tscreendata
					  where		screen_code = _screen_code
					  and       screendata_gid = _screendata_gid
					 ) then
			insert into core_mst_tscreendata 
			(
				screen_code,
				lang_code,
				ctrl_type_code,
				ctrl_id,
				data_field,
				label_desc,
				tooltip_desc,
				default_label_desc,				
				default_tooltip_desc,
				ctrl_slno,				
				created_by,
				created_date			
			)
			values
			(
				_screen_code,
				_langcode,
				_ctrl_type_code,
				_ctrl_id,
				_data_field,
				_label_desc,
				_tooltip_desc,
				_default_label_desc,				
				_default_tooltip_desc,
				_ctrl_slno,
				_user_code,
				now()
				
			) returning screendata_gid into _screendata_gid;			
			v_succ_code := 'SB01SCDCUD_001';			
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB01SCDCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01SCDCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;	
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tscreendata
				   where	screendata_gid 	= _screendata_gid 
				   ) then
			update	core_mst_tscreendata 
			set	    lang_code				= _langcode,
					ctrl_type_code			= _ctrl_type_code,
					ctrl_id					= _ctrl_id,
					data_field				= _data_field,
					label_desc				= _label_desc,
					tooltip_desc			= _tooltip_desc,
					default_label_desc		= _default_label_desc,
					default_tooltip_desc	= _default_tooltip_desc,
					ctrl_slno				= _ctrl_slno,
					updated_by 				= _user_code,
					updated_date 			= now()					
			where 	screendata_gid			= _screendata_gid;
			
			
			v_succ_code := 'SB01SCDCUD_002';
		else
			v_err_code := v_err_code || 'EB01SCDCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB01SCDCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;		
	end if;
	
	if exists (	select	count(*) from core_mst_tscreendata
			    where 	screen_code = _screen_code 
			    and 	lang_code   = _langcode
			    and     ctrl_id     = _ctrl_id
			    and     data_field  = _data_field 
				group	by screen_code, lang_code, ctrl_id, data_field
				having	count('*') > 1) 
	then
--	raise exception '%',_data_field;
		-- screen_code, ctrl_id, data_field and lang_code cannot be duplicated
		v_err_code := v_err_code || 'EB01SCDCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB01SCDCUD_001', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if; 
			
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_smstran(_tprogram_id udd_code, _tprogrambatch_id udd_code, _feedback_lang_code udd_code, _feedback_type_code udd_code, _questionaire_id udd_code, _trainer_part_id udd_code, _mobile_no udd_mobile, _original_url udd_text, _short_url udd_code, _smstemplate_code udd_code, _dlt_template_id udd_code, _sms_text udd_text, _user_code udd_code, _role_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan
		Created Date : 30-12-2022
		
		Updated By : Mohan Raja S
		Updatde date : 12-01-2023
		
		SP Code : B04SMSCXX
		Version No : 02
	*/
begin 
	insert into trng_trn_tsmstran (	tprogram_id,
								 	tprogrambatch_id,
								    questionaire_id,
								   	feedback_lang_code,
								   	feedback_type_code,
								    trainer_part_id,
								    mobile_no,
								    original_url,
								    short_url,
									smstemplate_code,
									dlt_template_id,
									sms_text,
									user_code,
									role_code,
								 	scheduled_date,
								 	sms_delivered_flag,
								 	status_code,
									created_date,
									created_by)
							values(	_tprogram_id,
								    _tprogrambatch_id,
								    _questionaire_id,
								    _feedback_lang_code,
								    _feedback_type_code,
								    _trainer_part_id,
								    _mobile_no,
								    _original_url,
								    '',
								   	_smstemplate_code,
									_dlt_template_id,
									_sms_text,
									_user_code,
									_role_code,
								   	now(),
								   	'N',
									'A',
								    now(),
								    'system');
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_sqliteattachment(INOUT _sqliteattachment_gid udd_int, _tprogram_id udd_code, _role_code udd_code, _user_code udd_code, _mobile_no udd_mobile, _lang_code udd_code, _mode_flag udd_flag, INOUT _file_path udd_desc, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mangai
		Created Date : 20-03-2022
		
		Updated By   : Mangai
		Updated Date : 21-03-2023
		
		SP Code      : B04SLACXX
		Version No   : 2
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line text = chr(13)||chr(10);
	v_mobile_no udd_mobile := '';
begin

	-- Program ID Validation
-- 	if not exists (select * from trng_trn_ttprogram
-- 				   where 	tprogram_id  = _tprogram_id 
-- 				   and 		status_code <> 'I')
-- 	then
-- 		v_err_code := v_err_code || 'VB04SLACXX_001' || ',';
-- 		v_err_msg  := v_err_msg || fn_get_msg ('VB04SLACXX_001', _lang_code) || v_new_line;
-- 	end if;	
	
	-- Get user mmobile number
	select mobile_no into v_mobile_no
	from   core_mst_tuser
	where  user_code = _user_code
	and    status_code = 'A';
	
	-- User code validation
	if not exists (select * from core_mst_tuser
				   where user_code = _user_code
				   AND   status_code = 'A') then
		v_err_code := v_err_code || 'VB04SLACXX_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04SLACXX_003', _lang_code) || v_new_line;					   
	end if;
	
	-- language code validation
	if not exists (select * from core_mst_tlanguage 
				   where 	lang_code   = _lang_code
				   and   	status_code = 'A')
	then
		v_err_code := v_err_code || 'VB04SLACXX_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04SLACXX_002', _lang_code) || v_new_line;		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag = 'I' then
		if not exists (select * from trng_trn_tsqliteattachment
				   	   where 	sqliteattachment_gid = _sqliteattachment_gid
				   	   and   	user_code		     = _user_code)
		 then
		 	select fn_get_configvalue('sqllite_filepath') into _file_path;
			insert into trng_trn_tsqliteattachment(
												tprogram_id,
												role_code,
												user_code,
												mobile_no,
												created_date,
												created_by
															)
										values(
												_tprogram_id,
												_role_code,
												_user_code,
												v_mobile_no,
												now(),
												_user_code
												) 
												returning sqliteattachment_gid,_file_path into _sqliteattachment_gid;
												v_succ_code := 'SB04SLACXX_001';
			  
		else
	       -- Record already exists
		   v_err_code := v_err_code || 'EB04SLACXX_001';
		   v_err_msg  := v_err_msg ||  fn_get_msg('EB04SLACXX_001', _lang_code) || v_new_line;	
			
		   RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogram(INOUT _tprogram_gid udd_int, INOUT _tprogram_id udd_code, _tprogram_name udd_desc, _tprogram_ll_name udd_desc, INOUT _course_id udd_code, INOUT _coordinator_id udd_code, _tprogram_level_code udd_code, _start_date udd_date, _end_date udd_date, _no_of_days udd_int, _no_of_batches udd_int, _budget_amount udd_amount, _actual_amount udd_amount, _budget_remark udd_text, _execution_status_code udd_code, _execution_status_date udd_datetime, _status_code udd_code, _deactivation_reason_code udd_code, INOUT _tprogramapproval_gid udd_int, _approver_id udd_code, _reject_reason_code udd_code, _approver_remark udd_desc, _user_code udd_code, _user_level_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 05-10-2022
		
		Updated By   : Mangai
		Updated Date : 5-04-2023 
		
		Version No : 34
		SP Code : B07PRGCUD
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_note_gid udd_int := 0;
	v_tprogramapproval_gid udd_int := 0;
	v_tprogrambatch_gid udd_int := 0;
	v_tprogrambatch_id udd_code := '';
	v_tprogram_id udd_code := '';
	v_tprogbatchcount udd_int := 0;
	v_start_date udd_date := null;
	v_end_date udd_date := null;
	v_initiated_date udd_date := null;
	v_status_code udd_code := '';
	v_execution_status_code udd_code := '';
	v_cou_status_code udd_code := '';
	v_batch_count udd_int := 0;
	v_program_level udd_code := '';
	v_approval_status udd_code := '';
	
	v_participant_id record;
begin 	
	-- Validation
	_coordinator_id := _user_code;
	
   if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PRGCUD_034' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_034', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogram_gid = 0 then
		_mode_flag := 'I';
	end if;

	-- reject reason code null
	if _reject_reason_code = '' then
		_reject_reason_code = null;
	end if;
		
	-- Get program id against program gid
	select tprogram_id, execution_status_code, status_code
	into   v_tprogram_id, v_execution_status_code, v_status_code
	from   trng_trn_ttprogram
	where  tprogram_gid = _tprogram_gid
	and    status_code <> 'I';
	
	-- deactivation reason code null
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	-- programgeo validation 
	if _mode_flag = 'U' and _status_code = 'S' then
	   if not exists (select tprogram_id 
							 from   trng_trn_ttprogramgeo
							 where  tprogram_id = _tprogram_id
							 and    status_code = 'A') 
	   then
		   v_err_code := v_err_code || 'VB07PRGCUD_031'  || ',';
		   v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_031', _lang_code)  || v_new_line;
	  end if;
	end if;
	
	-- This program is submitted so unable to change
	if _mode_flag = 'U' and v_status_code = 'S' and _status_code = 'D' then
		   v_err_code := v_err_code || 'VB07PRGCUD_050'  || ',';
		   v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_050', _lang_code)  || v_new_line;
		   raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- approver remark null
	if _approver_remark = '' then
		_approver_remark = null;
	end if;
	
	-- Get program level
	 v_program_level := (select fn_get_programlevel(_tprogram_id)) ;
	
	-- Get start date and end date against program id from batch table
	select max(end_date) into v_end_date  
	from  trng_trn_ttprogrambatch 
	where tprogram_id = _tprogram_id
	and   status_code <> 'I';
	
	select min(start_date) into v_start_date 
	from trng_trn_ttprogrambatch 
	where tprogram_id = _tprogram_id
	and   status_code <> 'I';
 	
	if _mode_flag = 'U' and _status_code = 'S' then
		-- get batch count from batch table
		select fn_get_tprogrambatchcount(_tprogram_id) into v_tprogbatchcount;
		if _no_of_batches <> v_tprogbatchcount then
			v_err_code := v_err_code || 'VB07PRGCUD_022' || ',';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PRGCUD_022', _lang_code),_no_of_batches,v_tprogbatchcount)  || v_new_line;
		end if;
	 end if ;
	
	if _mode_flag <> 'D' then
		-- course id validation
		if not exists (select 	* 
					   from 	trng_mst_tcourse
					   where 	course_id   = _course_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_035' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_035', _lang_code)  || v_new_line;	
		end if;

		-- program name validation
		if _tprogram_name = ''
		then
			v_err_code := v_err_code || 'VB07PRGCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_001', _lang_code)|| v_new_line;	
		end if;

		-- execution status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_EXEC_STATUS'
					   and 		master_code = _execution_status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_002', _lang_code)|| v_new_line;	
		end if;

		-- execution status date vallidation
		if _execution_status_date isnull 
		then
			v_err_code := v_err_code || 'VB07PRGCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_003', _lang_code)|| v_new_line;	
		end if;

		-- Program level validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_LEVEL'
					   and 		master_code = _tprogram_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_036' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_036', _lang_code)|| v_new_line;	
		end if;

		-- Approver id validation
		if _status_code = 'S' and _approver_id = '' and _user_level_code <> '99' then
			v_err_code := v_err_code || 'VB07PRGCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_010', _lang_code)|| v_new_line;
		end if;

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_037' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_037', _lang_code)|| v_new_line;	
		end if;

		-- start date validation
		if _start_date isnull
		then
				v_err_code := v_err_code || 'VB07PRGCUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_004', _lang_code)|| v_new_line;	
		end if;
			
		-- end date validation
		if _end_date isnull
		then
				v_err_code := v_err_code || 'VB07PRGCUD_011' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_011', _lang_code)|| v_new_line;	
		end if;
		
		if _end_date < _start_date 
		then
				v_err_code := v_err_code || 'VB07PRGCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_005', _lang_code)|| v_new_line;	
		end if;
		
		-- no_of_days cannot be negative value
		if _no_of_days < 0 then
				v_err_code := v_err_code || 'VB07PRGCUD_038' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_038', _lang_code)|| v_new_line;	
		end if;
		
		-- no_of_batches cannot be negative value
		if _no_of_batches <= 0 then
				v_err_code := v_err_code || 'VB07PRGCUD_039' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_039', _lang_code)|| v_new_line;	
		end if;
		
		if _mode_flag = 'U' then
			select fn_get_tprogrambatchcount(_tprogram_id) into v_tprogbatchcount;
			if _no_of_batches < v_tprogbatchcount 
			then
				v_err_code := v_err_code || 'VB07PRGCUD_029' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_029', _lang_code)|| v_new_line;
			end if;
		end if;
		
		-- budget_amount cannot be negative value
		if _budget_amount < 0 then
			    v_err_code := v_err_code || 'VB07PRGCUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_008', _lang_code)|| v_new_line;	
		end if;
		
		-- actual_amount cannot be negative value
		if _actual_amount < 0 then
			    v_err_code := v_err_code || 'VB07PRGCUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_009', _lang_code)|| v_new_line;	
		end if;
		
		-- reject reason code validation
		if _status_code = 'R' and _reject_reason_code isnull 
		then
				v_err_code := v_err_code || 'VB07PRGCUD_040' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_040', _lang_code)|| v_new_line;	
		end if;
		
		if _reject_reason_code notnull then
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_REJ_REASON'
							   and 		master_code = _reject_reason_code
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB07PRGCUD_041' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_041', _lang_code) || v_new_line;	
				end if;
		end if;
-- 		end if;
		
		-- Send back validation
		if _status_code = 'B' and (_approver_remark = '' or _approver_remark isnull)
		then
				v_err_code := v_err_code || 'VB07PRGCUD_042' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_042', _lang_code)|| v_new_line;	
		end if;
		
		-- deactivation reason code validation
		if _deactivation_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB07PRGCUD_043' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_043', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- Approver id validation
		if _approver_id = '' and _status_code = 'S' and _user_level_code <> '99' then
				v_err_code := v_err_code || 'VB07PRGCUD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_010', _lang_code) || v_new_line;	
		end if;
		
		-- User level code based trainer level validation
		if _tprogram_level_code > _user_level_code then
				v_err_code := v_err_code || 'VB07PRGCUD_044' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_044', _lang_code) || v_new_line;	
		end if	;
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_045' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_045', _lang_code)|| v_new_line;	
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_trn_ttprogram
		where	tprogram_gid = _tprogram_gid;

		v_timestamp	:= coalesce(v_timestamp, '');

		if (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB07PRGCUD_046' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_046', _lang_code) || v_new_line;	
		end if;
		
 		if _mode_flag = 'U' and _start_date > v_start_date
		then 
			v_err_code := v_err_code || 'VB07PRGCUD_023' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_023', _lang_code) || v_new_line;	
		end if;
		
		if _mode_flag = 'U' and _end_date < v_end_date
		then 
			v_err_code := v_err_code || 'VB07PRGCUD_024' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_024', _lang_code) || v_new_line;	
		end if;
		
		-- update on tprogrambatch table
		if _mode_flag = 'U' and _status_code = 'A' then
			update trng_trn_ttprogrambatch 
			set    status_code = 'H',
				   updated_date = now(),
				   updated_by = _user_code
		    where tprogram_id = _tprogram_id
			and   status_code = 'D';
		end if;
		
		-- his program not in draft or send back. So, this program not to allowed submit.
		if _mode_flag = 'U' and _status_code = 'S' then
			if not exists(select * from trng_trn_ttprogram
						  where  tprogram_id = _tprogram_id
						  and    status_code in ('D','B')) then
				v_err_code := v_err_code || 'VB07PRGCUD_033' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_033', _lang_code) || v_new_line;
			end if;
		end if;
		
	end if;	

	
	-- Program id refered table check
	if _mode_flag = 'D' and v_execution_status_code = 'P' then
-- 		if _mode_flag = 'D' and v_tprogram_id <> '' then
-- 			if exists ( select * from trng_trn_ttprogramapproval 
-- 						where tprogram_id = v_tprogram_id
-- 						and   approval_status_code <> 'I') then
-- 					v_err_code := v_err_code || 'VB07PRGCUD_012' || ',';
-- 					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_012', _lang_code)  || v_new_line;	
-- 			end if;
-- 		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogramgeo 
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_013' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_013', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogrambatch 
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_014' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_014', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogramtrainer
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_015' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_015', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogrambatchcount 
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_016' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_016', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogramparticipant
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_017' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_017', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogramexpense 
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_018' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_018', _lang_code)  || v_new_line;	
			end if;
		end if;
		
		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogrambudget 
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_028' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_028', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_ttprogrambatchattachment 
						where tprogram_id = v_tprogram_id
						and   status_code <> 'I') then
					v_err_code := v_err_code || 'VB07PRGCUD_019' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_019', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_tfeedbacktrainer 
						where tprogram_id = v_tprogram_id) then
					v_err_code := v_err_code || 'VB07PRGCUD_020' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_020', _lang_code)  || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'D' and v_tprogram_id <> '' then
			if exists ( select * from trng_trn_tfeedbackparticipant 
						where tprogram_id = v_tprogram_id) then
					v_err_code := v_err_code || 'VB07PRGCUD_021' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_021', _lang_code)  || v_new_line;	
			end if;
		end if;
	end if;
	
	-- deactivation reason code validation
	if _mode_flag = 'D' and _deactivation_reason_code isnull 
	then
			v_err_code := v_err_code || 'VB07PRGCUD_047' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_047', _lang_code)|| v_new_line;	
	end if;
	if _deactivation_reason_code notnull then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB07PRGCUD_048' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_048', _lang_code) || v_new_line;	
			end if;
	end if;
	
	-- Should not be update or deactivate the program
	if _mode_flag = 'U' then
		if exists(select * from trng_trn_ttprogram
				  where tprogram_id = v_tprogram_id
				  and   execution_status_code in ('P','L','C')
				  and   status_code = 'A')
		then
				v_err_code := v_err_code || 'VB07PRGCUD_026' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_026', _lang_code) || v_new_line;	
		end if;		
	end if;
	
	if _mode_flag = 'U' and v_execution_status_code = 'H' 
	then
			v_err_code := v_err_code || 'VB07PRGCUD_030' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_030', _lang_code) || v_new_line;	
	end if;
	
	-- When the program is going to active.The mapped course is active or not check
	if _mode_flag = 'U' and _status_code = 'A' then
		if not exists(select '*'
					  from 	 trng_mst_tcourse
					  where course_id = _course_id
					  and   status_code = 'A') then
			v_err_code := v_err_code || 'VB07PRGCUD_027' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_027', _lang_code) || v_new_line;
		end if;
	end if;
	
	-- Deactivation is allowed only program status in 'H','D' and 'B'
	if _mode_flag = 'D' and v_status_code not in ('A','D','B') and v_execution_status_code not in ('H','D') then
			v_err_code := v_err_code || 'VB07PRGCUD_032' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_032', _lang_code) || v_new_line;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;

	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogram
				  where 	tprogram_gid = _tprogram_gid
				  and 		status_code  <> 'I'
				 ) then
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',v_tprogram_id,null,'I','',
									_deactivation_reason_code,'',_user_code,_role_code,_lang_code, 
									'I',_succ_msg);
				 
			Update 	trng_trn_ttprogram
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now(),
					row_timestamp   = now()
			where 	tprogram_gid = _tprogram_gid
			and 	status_code  <> 'I';
			
			v_succ_code := 'VB07PRGCUD_049';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PRGCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PRGCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogram
					  where		tprogram_gid = _tprogram_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogram 
			(
				tprogram_id,
				tprogram_name,
				tprogram_ll_name,
				course_id,
				coordinator_id,
				tprogram_level_code,
				start_date,
				end_date,
				no_of_days,
				no_of_batches,
				budget_amount,
				actual_amount,
				budget_remark,
				execution_status_code,
				execution_status_date,				
				status_code,
				deactivation_reason_code,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_tprogram_id,
				_tprogram_name,
				_tprogram_ll_name,
				_course_id,
				_coordinator_id,
				_tprogram_level_code,
				_start_date,
				_end_date,
				_no_of_days,
				_no_of_batches,
				_budget_amount,
				_actual_amount,
				_budget_remark,
				_execution_status_code,
				_execution_status_date,
				_status_code,
				_deactivation_reason_code,
				now(),
				_user_code,
				now()
			) returning tprogram_gid into _tprogram_gid;
			
			_tprogram_id := 'PRG_'||_tprogram_gid;
			-- set program id --
			update trng_trn_ttprogram
			set    tprogram_id = _tprogram_id
			where  tprogram_gid = _tprogram_gid;
			
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code,
									'','','',_user_code,_role_code,_lang_code,'I',_succ_msg);
									
			-- Batch table insert for batch count 1
			if _no_of_batches = 1 then 
				call pr_iud_tprogrambatch(v_tprogrambatch_gid, _tprogram_id, v_tprogrambatch_id,
										  _tprogram_name, _tprogram_ll_name, 'en_US', _start_date, _end_date,
										  _no_of_days, '', '', _status_code, _user_code, _role_code,
										  _lang_code, _mode_flag, _succ_msg);
			end if;
			
			v_succ_code := 'SB07PRGCUD_001';
		else			
			-- Record already exists
			v_err_code := v_err_code || 'EB07PRGCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PRGCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogram
				   where	tprogram_gid = _tprogram_gid
				   and 		status_code  <> 'I'
				   ) then
				   
			-- Get program status code 
			 select status_code into v_status_code
			 from 	trng_trn_ttprogram where tprogram_id = _tprogram_id
			 and 	status_code <> 'I';
			 
			-- Get program approval status
			 select  approval_status_code into v_approval_status
			 from 	trng_trn_ttprogramapproval 
-- 			 where  programapproval_gid = _tprogramapproval_gid
			 where    tprogram_id = _tprogram_id
			 and 	approval_status_code <> 'I';
			 
			-- Direct approver 
			if _status_code = 'S'then
				if _role_code = 'TrainingCoordinator' and v_status_code = 'D' and _user_level_code = '99'
				then
					_status_code := 'A';
					v_initiated_date := (select now());
					
					-- Update coordinator id
					update trng_trn_ttprogram
					set    coordinator_id = _user_code,
						   updated_by = _user_code,
						   updated_date = now()
					where  tprogram_id = _tprogram_id;
					
					call pr_iud_tprogramapproval(
											 v_tprogramapproval_gid,_tprogram_id,v_initiated_date,
											 _approver_id,null,_status_code,'','',_user_code,
											 _role_code,_lang_code,'I',_succ_msg);
					-- Insert into note table 
-- 					CALL public.pr_iud_notewithcode( 
-- 										v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code,
-- 										'','','',_user_code,_role_code,_lang_code,'I',_succ_msg);
					-- Email trigger
					CALL pr_email_programappreq(_tprogram_id,_user_code,_role_code,_lang_code);
					
					-- Email or sms trigger for participant
					for v_participant_id in (select tprogram_id,tprogrambatch_id,batch_date,participant_id 
											 from   trng_trn_ttprogramparticipant
											 where  tprogram_id = _tprogram_id
											 and    status_code = 'A'
											) 
					loop
					raise notice 'tprogram_id : %',v_participant_id.tprogram_id;
					raise notice 'tprogrambatch_id : %',v_participant_id.tprogrambatch_id;
					raise notice 'batch_date : %',v_participant_id.batch_date;
					raise notice 'participant_id : %',v_participant_id.participant_id;
					
						-- Email Trigger
						if v_program_level ::udd_int >= 69 then
							CALL pr_email_programparticipant(
									v_participant_id.tprogram_id,v_participant_id.tprogrambatch_id,v_participant_id.batch_date,
									v_participant_id.participant_id,_user_code,_role_code,_lang_code);
						-- SMS Trigger
						elseif v_program_level ::udd_int < 69 then
							CALL pr_sms_programparticipant(
									v_participant_id.tprogram_id,v_participant_id.tprogrambatch_id,v_participant_id.batch_date,
									v_participant_id.participant_id,_user_code,_role_code,_lang_code);
						end if;
					end loop;
					
				end if;		  
			end if;
			-- Program approval table update (send back flow)
			if _status_code = 'B' then
				if exists (select * 
						   from   trng_trn_ttprogramapproval
						   where  programapproval_gid = _tprogramapproval_gid
						   and    tprogram_id = _tprogram_id
						   and    approval_status_code = 'S'
						   ) then
				 	update trng_trn_ttprogramapproval
					set    approval_status_code = 'B',
						   approver_remark = _approver_remark,
					       updated_by  = _user_code,
						   updated_date = now()
					where  programapproval_gid = _tprogramapproval_gid
					and	   tprogram_id = _tprogram_id
					and    approval_status_code = 'S';
					
					update trng_trn_ttprogram
					set    status_code = 'B',
						   updated_by  = _user_code,
						   updated_date = now()
					where  tprogram_id = _tprogram_id;
					
					--Insert in note table
					CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code,
										'','',_approver_remark,_user_code,_role_code,_lang_code, 
										'I',_succ_msg);
				end if;
			end if;
			
			-- Insert in note table -- 
-- 			if _status_code <> 'R' then
-- 				CALL public.pr_iud_notewithcode( 
-- 										v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code,
-- 										'','','',_user_code,_role_code,_lang_code,'I',_succ_msg) ;
-- 			end if;
			
			-- Insert in tprogram approval table 
			if _approver_id <> '' and _status_code = 'S'
			then
				if v_approval_status = 'B' then
					update trng_trn_ttprogramapproval 
					set approval_status_code = 'I',
						updated_date = now(),
						updated_by = _user_code
					where tprogram_id = _tprogram_id;
				end if;
				
				call pr_iud_tprogramapproval(
											 v_tprogramapproval_gid,_tprogram_id,'now()',_approver_id,
											 null,_status_code,'','',_user_code,_role_code,_lang_code,
											 'I',_succ_msg);
								v_tprogramapproval_gid := _tprogramapproval_gid;
								
				-- Insert into note table
				CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code, 
									'','','',_user_code,_role_code,_lang_code,'I',_succ_msg);
				-- Email trigger
					CALL pr_email_programappreq(_tprogram_id,_user_code,_role_code,_lang_code);
			end if;
			
			-- Insert into note table
			if _status_code = 'R' then
				CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code, 
									_reject_reason_code,'','',_user_code,_role_code,_lang_code, 
									'I',_succ_msg);
				update  trng_trn_ttprogramapproval
				set     approval_status_code = 'R',
						reject_reason_code   = _reject_reason_code,
						updated_by = _user_code,
						updated_date = now()
				where   programapproval_gid = _tprogramapproval_gid   ; 
				
				update trng_trn_ttprogram
				set    status_code = 'R',
					   updated_by  = _user_code,
					   updated_date = now()
				where  tprogram_id = _tprogram_id;
				
				-- Email trigger
				if v_program_level::udd_int >= 69 then
					CALL pr_email_programrejected(_tprogram_id,_user_code,_role_code,_lang_code);
				end if;
				
				-- SMS Trigger
				if v_program_level::udd_int < 69 then
					CALL pr_sms_programrejected(_tprogram_id,_user_code,_role_code,_lang_code);
				end if;
				
			end if;
			
			-- Insert into note table
			if _status_code = 'A' then		
				CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code, 
									_reject_reason_code,_deactivation_reason_code,_approver_remark,
									_user_code,_role_code,_lang_code,'I',_succ_msg);
									
				update  trng_trn_ttprogramapproval
				set     approval_status_code = 'A',
				        approval_date = now(),
						updated_by = _user_code,
						updated_date = now()
				where   programapproval_gid = _tprogramapproval_gid  
				and     tprogram_id = _tprogram_id;  
				
				update trng_trn_ttprogram
				set    
-- 						coordinator_id = _user_code,
					   status_code = 'A',
					   execution_status_code = 'H',
					   updated_by  = _user_code,
					   updated_date = now()
				where  tprogram_id = _tprogram_id;
				
				update trng_trn_ttprogrambatch
				set    status_code = 'H',
					   updated_by  = _user_code,
					   updated_date = now()
				where  tprogram_id = _tprogram_id
				and    status_code = 'D';
				
				-- Email trigger
				if v_program_level::udd_int >= 69 then
					CALL pr_email_programapproved(_tprogram_id,_user_code,_role_code,_lang_code);
				end if;
				
				-- SMS Trigger
				if v_program_level::udd_int < 69 then
					CALL pr_sms_programapproved(_tprogram_id,_user_code,_role_code,_lang_code);
				end if;
				
				-- Email or sms trigger for participant
				for v_participant_id in (select  tprogram_id,tprogrambatch_id,batch_date,participant_id  
										 from   trng_trn_ttprogramparticipant
										 where  tprogram_id      = _tprogram_id
										 and    status_code = 'A'
										) 
				loop
					-- Email Trigger
					if v_program_level ::udd_int >= 69 then
						CALL pr_email_programparticipant(
								v_participant_id.tprogram_id,v_participant_id.tprogrambatch_id,v_participant_id.batch_date,
							    v_participant_id.participant_id,_user_code,_role_code,_lang_code);
					-- SMS Trigger
					elseif v_program_level ::udd_int < 69 then
						CALL pr_sms_programparticipant(
								v_participant_id.tprogram_id,v_participant_id.tprogrambatch_id,v_participant_id.batch_date,
							    v_participant_id.participant_id,_user_code,_role_code,_lang_code);
					end if;
				end loop;
				
			end if;
			
			-- Reassign updation --
			if exists (select * from trng_trn_ttprogramapproval
					   where programapproval_gid = _tprogramapproval_gid
					   and   tprogram_id   = _tprogram_id
					   and   approver_id <> _approver_id
					   and 	 approval_status_code in ('S','B') )then
				update trng_trn_ttprogramapproval
				set    approval_status_code = 'E',
				       updated_by           = _user_code,
					   updated_date         = now()
				where  programapproval_gid = _tprogramapproval_gid
				and    tprogram_id   = _tprogram_id
				and    approval_status_code in ('S','B');
				
				-- Insert in note table -- 
				CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,'E','','',
										'',_user_code,_role_code,_lang_code,'I',_succ_msg);
			end if;	
			
			if _status_code not in('A','B','R') then
				update	trng_trn_ttprogram 
				set 	tprogram_name			= _tprogram_name,
						tprogram_ll_name		= _tprogram_ll_name,
						course_id				= _course_id,
						coordinator_id			= _coordinator_id,
						tprogram_level_code		= _tprogram_level_code,
						start_date				= _start_date,
						end_date				= _end_date,
						no_of_days				= _no_of_days,
						no_of_batches			= _no_of_batches,
						budget_amount			= _budget_amount,
						actual_amount			= _actual_amount,
						budget_remark			= _budget_remark,
						execution_status_code	= _execution_status_code,
						execution_status_date	= _execution_status_date,
						status_code 			= _status_code,
						deactivation_reason_code = _deactivation_reason_code,
						updated_by 				= _user_code,
						updated_date 			= now(),
						row_timestamp   		= now()
				where 	tprogram_gid    = _tprogram_gid
				and 	status_code 	<> 'I';
				
				-- Insert in note table -- 
				if _status_code not in('A','B','R','S') then
					CALL public.pr_iud_notewithcode( 
										v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,null,_status_code,'','',
										'',_user_code,_role_code,_lang_code,'I',_succ_msg);
				end if;
			end if;
			
			-- Get batch count
			select count(*) into v_batch_count
			from   trng_trn_ttprogrambatch
			where  tprogram_id = _tprogram_id
			and    status_code <> 'I';
			
			-- Insert in batch table
			if v_batch_count = 0 and _no_of_batches = 1
			then
				call pr_iud_tprogrambatch(v_tprogrambatch_gid, _tprogram_id, v_tprogrambatch_id,
										  _tprogram_name, _tprogram_ll_name, 'en_US', _start_date, _end_date,
										  _no_of_days, '', '', _status_code, _user_code, _role_code,
										  _lang_code, _mode_flag, _succ_msg);
			end if;
			
			if _status_code =  'D' then
				v_succ_code := 'SB07PRGCUD_002';
			elseif _status_code =  'S' then
				v_succ_code := 'SB07PRGCUD_004';
			elseif _status_code =  'A' then
				v_succ_code := 'SB07PRGCUD_005';
			elseif _status_code =  'R' then
				v_succ_code := 'SB07PRGCUD_006';
			elseif _status_code =  'B' then
				v_succ_code := 'SB07PRGCUD_007';
			end if;
		else
			v_err_code := v_err_code || 'EB07PRGCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PRGCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttprogram
			    where 	tprogram_name = _tprogram_name 
			    and 	course_id = _course_id
			    and 	coordinator_id = _coordinator_id
			    and 	tprogram_level_code = _tprogram_level_code
			    and 	start_date = _start_date
			    and 	end_date = _end_date
			    and 	status_code <> 'I'
				group	by tprogram_name,course_id,coordinator_id,tprogram_level_code,start_date,end_date
				having	count('*') > 1) 
	then
		-- Program name cannot be duplicated
		v_err_code := v_err_code || 'EB07PRGCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB07PRGCUD_001', _lang_code),_tprogram_name);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || FORMAT(fn_get_msg(v_succ_code,_lang_code),_tprogram_id,_tprogram_name);
	end if;

end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramapproval(INOUT _tprogramapproval_gid udd_int, INOUT _tprogram_id udd_code, _initiated_date udd_date, INOUT _approver_id udd_code, _approval_date udd_date, _approval_status_code udd_code, _reject_reason_code udd_code, _approver_remark udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 05-10-2022
		
		Updated By  : Satheesh
		Updated Date : 21-03-2023
		
		SP Code : B07PAPCUD
		Version No : 6
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_tprogramapproval_gid udd_int := 0;
	v_note_gid udd_int := 0;

begin 	
	-- Validation
	   if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PAPCUD_003' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PAPCUD_003', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PAPCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PAPCUD_004', _lang_code)  || v_new_line;	
		end if;

		/*-- Approver id validation	
		if _approver_id = '' then
			v_err_code := v_err_code || 'VB07PAPCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PAPCUD_001', _lang_code)|| v_new_line;	
		end if;*/

		-- reject reason code validation
		if _reject_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_REJ_REASON'
						   and 		master_code = _reject_reason_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB07PAPCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PAPCUD_005', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- initiated date validation
		if _initiated_date isnull 
		then
			v_err_code := v_err_code || 'VB04CAPCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_001', _lang_code) || v_new_line;	
		end if;

		-- approval status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _approval_status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PAPCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PAPCUD_006', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PAPCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PAPCUD_007', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogramapproval
				  where 	programapproval_gid = _tprogramapproval_gid
				  and 		approval_status_code  = 'A'
				 ) then
			Update 	trng_trn_ttprogramapproval
			set		approval_status_code   = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	programapproval_gid = _tprogramapproval_gid
			and 	approval_status_code  = 'A';
			
			v_succ_code := 'SB07PAPCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PAPCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PAPCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogramapproval
					  where		programapproval_gid = _tprogramapproval_gid
					  and 		approval_status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogramapproval
			(
				tprogram_id,
				initiated_date,
				approver_id,
				approval_status_code,
				reject_reason_code,
				approver_remark,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				now(),
				_approver_id,
				_approval_status_code,
				_reject_reason_code,
				_approver_remark,
				now(),
				_user_code
			) returning programapproval_gid into _tprogramapproval_gid;
							
			v_succ_code := 'SB07PAPCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PAPCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PAPCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogramapproval
				   where	_tprogram_id = _tprogram_id
				   and 		approval_status_code = 'S'
				   ) then
				   
			-- Reassign updation --
			if exists (select * from trng_trn_ttprogramapproval
					   where tprogram_id   = _tprogram_id
					   and   approver_id <> _approver_id
					   and 	 approval_status_code in ('S','B') )then
				update trng_trn_ttprogramapproval
				set    approval_status_code = 'E',
				       updated_by           = _user_code,
					   updated_date         = now()
				where  tprogram_id   = _tprogram_id
				and    approval_status_code in ('S','B');
				
				-- Insert in note table -- 
				CALL public.pr_iud_notewithcode( 
										v_note_gid, 
										'QCD_TRNG_PROGRAM', 
										_tprogram_id, 
										null,
										'E',
										'',
										'',
										'',
										_user_code, 
										_role_code, 
										_lang_code, 
										'I', 
										_succ_msg 
										) ;

				CALL public.pr_iud_tprogramapproval( 
											 v_tprogramapproval_gid,
											 _tprogram_id,
											 'now()',
											 _approver_id,
											 null,
											 'S',
											 '',
											 '',
											 _user_code,
											 _role_code,
											 _lang_code,
											 'I',
											 _succ_msg);
											 
					
				else
						update	trng_trn_ttprogramapproval 
						set 	approver_id		= _approver_id,
								approval_date	= now(),
								approval_status_code	= _approval_status_code,
								reject_reason_code 		= _reject_reason_code,
								approver_remark			= _approver_remark,
								updated_by 				= _user_code,
								updated_date 			= now()
						where 	programapproval_gid    = _tprogramapproval_gid
						and 	approval_status_code   = 'S';
			end if;		 
			-- Insert in note table --  
			if _approval_status_code = 'R' then
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_TRNG_PROGRAM', 
									_tprogram_id,
									null,
									_approval_status_code, 
									_reject_reason_code,
									'',
									'',
									_user_code,
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;
			end if;
			
			v_succ_code := 'SB07PAPCUD_002';
		else
			v_err_code := v_err_code || 'EB07PAPCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PAPCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttprogramapproval
			    where 	tprogram_id = _tprogram_id 
			    and     approver_id = _approver_id
			    and 	approval_status_code = 'S'
				group	by tprogram_id, approver_id, approval_status_code
				having	count('*') > 1) 
	then
		-- Approval id cannot be duplicated
		v_err_code := v_err_code || 'EB07PAPCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB07PAPCUD_001', _lang_code),_approver_id);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambatch(INOUT _tprogrambatch_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _batch_name udd_desc, _batch_ll_name udd_desc, _prgbatch_lang_code udd_code, _start_date udd_date, _end_date udd_date, _no_of_days udd_int, _tprogram_venue_id udd_code, _confirm_venue_id udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 05-10-2022
		
		Updated By :   Satheesh
		Updated Date : 21-03-2023
		
		SP Code : B07PBACUD
		Version No : 16
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_tprogram_venue_id udd_code := '';
	v_tprogram_id udd_code := '';
	v_tprogrambatch_id udd_code := '';
	v_start_date udd_date := null;
	v_end_date   udd_date := null;
	v_no_of_batches udd_int := 0;
	v_tprogbatch_count udd_int := 0;
	v_no_of_days udd_int := 0;
	v_note_gid udd_int :=  0;
	v_batch_name  udd_desc := 0;
	v_status_code udd_code := '';
	v_confirm_venue_id udd_code := '';
	v_execution_status_code udd_code := '';
begin 	
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PBACUD_023' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_023', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogrambatch_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get start, end date and execution status from program table
	select start_date , end_date, execution_status_code
	into   v_start_date, v_end_date, v_execution_status_code
	from   trng_trn_ttprogram 
	where  tprogram_id = _tprogram_id
	and    status_code <> 'I';
	
	--Get program batch name
	select batch_name, status_code , confirm_venue_id
	into   v_batch_name, v_status_code, v_confirm_venue_id
	from   trng_trn_ttprogrambatch 
	where  tprogrambatch_gid = _tprogrambatch_gid
	and    status_code <> 'I';
	
	if (_mode_flag = 'U' or _mode_flag = 'D' or _mode_flag = 'I') and v_execution_status_code = 'H' 
	then
			v_err_code := v_err_code || 'VB07PRGCUD_030';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_030', _lang_code) || v_new_line;	
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PBACUD_024' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_024', _lang_code)  || v_new_line;	
		end if;

		-- batch name validation 
		if _batch_name = ''
		then
			v_err_code := v_err_code || 'VB07PBACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_001', _lang_code)  || v_new_line;	
		end if;

		-- start date validation 
		if _start_date isnull
		then
			v_err_code := v_err_code || 'VB07PBACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_002', _lang_code)  || v_new_line;	
		end if;

		-- end date validation 
		if _end_date isnull
		then
			v_err_code := v_err_code || 'VB07PBACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_003', _lang_code)  || v_new_line;	
		end if;

		-- start date validation
		/*if _start_date > now() :: udd_date
		then
					v_err_code := v_err_code || 'VB07PRGCUD_004' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_004', _lang_code)|| v_new_line;	

		end if;*/
		
		-- start date validation against program start date to end date
		if _start_date < v_start_date or _start_date > v_end_date 
		then
				v_err_code := v_err_code || 'VB07PBACUD_011' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_011', _lang_code)|| v_new_line;	
		end if;
		
		-- end date validation
		if _end_date < _start_date  
		then
				v_err_code := v_err_code || 'VB07PRGCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_005', _lang_code)|| v_new_line;	
		end if;
		
		if _end_date > v_end_date
		then
				v_err_code := v_err_code || 'VB07PBACUD_012' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_012', _lang_code)|| v_new_line;	
		end if;
		
		-- no_of_days cannot be negative value
		if _no_of_days < 0 then
				v_err_code := v_err_code || 'VB07PBACUD_025' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_025', _lang_code)|| v_new_line;	
		end if;

		-- program batch lang code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _prgbatch_lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBACUD_026' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_026', _lang_code)|| v_new_line;	
		end if;

		-- Training program venue id validation
		if _tprogram_venue_id <> '' then
			if not exists (select 	* 
					   from 	trng_mst_tvenue
					   where 	venue_id   = _tprogram_venue_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_006', _lang_code)  || v_new_line;	
			end if;
		 end if;	

		-- confirm venue id validation
		/*if _confirm_venue_id <> '' then
			then
				v_err_code := v_err_code || 'VB07PRGCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_007', _lang_code)  || v_new_line;	
		end if;*/

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBACUD_027' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_027', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBACUD_026' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_026', _lang_code)|| v_new_line;	
		end if;
		
		-- This batch status is already completed, So unable to delete the venue
		if v_status_code = 'C'
		then
			v_err_code := v_err_code || 'VB07PBACUD_020' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_020', _lang_code)|| v_new_line;	
		end if;
		
-- 		if v_confirm_venue_id <> ''
-- 		then
-- 			v_err_code := v_err_code || 'VB07PBACUD_021' || ',';
-- 			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_021', _lang_code)|| v_new_line;	
-- 		end if;
		
	end if;
	
	-- Batch id refered table check
	--get batch id against tprogram batch gid
	select tprogram_id,tprogrambatch_id 
	into   v_tprogram_id,v_tprogrambatch_id
	from   trng_trn_ttprogrambatch
	where  tprogrambatch_gid = _tprogrambatch_gid;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogramtrainer 
						where tprogrambatch_id = v_tprogrambatch_id
						and   status_code      <> 'I') then
				v_err_code := v_err_code || 'VB07PBACUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_004', _lang_code)  || v_new_line;	
		end if;
	end if;
	/*
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogrambatchcount 
						where tprogrambatch_id = v_tprogrambatch_id
						and   status_code      <> 'I') then
				v_err_code := v_err_code || 'VB07PBACUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_005', _lang_code)  || v_new_line;	
		end if;
	end if;
	*/
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogramparticipant 
						where tprogrambatch_id = v_tprogrambatch_id
						and   status_code      <> 'I') then
				v_err_code := v_err_code || 'VB07PBACUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_006', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogramexpense 
						where tprogrambatch_id = v_tprogrambatch_id
						and   status_code      <> 'I') then
				v_err_code := v_err_code || 'VB07PBACUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_007', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogrambudget 
						where tprogrambatch_id = v_tprogrambatch_id
						and   status_code      <> 'I') then
				v_err_code := v_err_code || 'VB07PBACUD_017' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_017', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogrambatchattachment 
						where tprogrambatch_id = v_tprogrambatch_id
						and   status_code      <> 'I') then
				v_err_code := v_err_code || 'VB07PBACUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_008', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_tfeedbacktrainer
						where tprogrambatch_id = v_tprogrambatch_id) then
				v_err_code := v_err_code || 'VB07PBACUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_009', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_tfeedbackparticipant 
						where tprogrambatch_id = v_tprogrambatch_id) then
				v_err_code := v_err_code || 'VB07PBACUD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_010', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if _mode_flag = 'D' and v_tprogrambatch_id <> '' then
		if exists ( select * from trng_trn_ttprogrambatch
						where tprogram_id = v_tprogram_id
				   		and   tprogrambatch_id = v_tprogrambatch_id
				   		and   tprogram_venue_id <> ''
				        and   status_code    <>  'I') then
				v_err_code := v_err_code || 'VB07PBACUD_022' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_022', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;	
	
	if _mode_flag = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogrambatch
				  where 	tprogrambatch_gid = _tprogrambatch_gid
				  and 		status_code  <> 'I'
				 ) then
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,v_batch_name,'I','',
									'','',_user_code,_role_code,_lang_code,'I',_succ_msg);
				 
			Update 	trng_trn_ttprogrambatch
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	tprogrambatch_gid = _tprogrambatch_gid
			and 	status_code  <> 'I';
			
			v_succ_code := 'SB07PBACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PBACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogrambatch
					  where		tprogrambatch_gid = _tprogrambatch_gid
					  and 		status_code  <> 'I'
					 ) then
			insert into trng_trn_ttprogrambatch 
			(
				tprogram_id,
				tprogrambatch_id,
				batch_name,
				batch_ll_name,
				lang_code,
				start_date,
				end_date,
				no_of_days,
				tprogram_venue_id,
				confirm_venue_id,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogrambatch_id,
				_batch_name,
				_batch_ll_name,
				_prgbatch_lang_code,
				_start_date,
				_end_date,
				_no_of_days,
				_tprogram_venue_id,
				_confirm_venue_id,
				_status_code,
				now(),
				_user_code
			) returning tprogrambatch_gid into _tprogrambatch_gid;
			_tprogrambatch_id := 'PBA_'||_tprogrambatch_gid;
			-- set program batch id --
			update trng_trn_ttprogrambatch
			set    tprogrambatch_id =_tprogrambatch_id
			where  tprogrambatch_gid =_tprogrambatch_gid; 
			
			-- no of days calculation against start date from end date
			select (_end_date::udd_date - _start_date::udd_date) + 1 into  v_no_of_days
			from   trng_trn_ttprogrambatch
			where  tprogram_id = _tprogram_id
			and    tprogrambatch_id = _tprogrambatch_id;
			
			update trng_trn_ttprogrambatch 
			set    no_of_days = v_no_of_days
			where  tprogram_id = _tprogram_id
			and    tprogrambatch_id = _tprogrambatch_id;
			
			-- call batchcount store procedure
			call pr_ins_tprogrambatchcount(_tprogram_id,_tprogrambatch_id,_start_date,_end_date,
										   _user_code,_role_code,_lang_code,_succ_msg);
			
			-- update on no_of_batch in tprogram table
			select no_of_batches into v_no_of_batches  
			from   trng_trn_ttprogram 
			where  tprogram_id = _tprogram_id;
			
			select fn_get_tprogrambatchcount(_tprogram_id) 
			into v_tprogbatch_count;
			
			if v_no_of_batches < v_tprogbatch_count then
				update trng_trn_ttprogram
				set    no_of_batches = v_tprogbatch_count
				where  tprogram_id =_tprogram_id; 		
			end if;
			
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,_batch_name,_status_code,'',
									'','',_user_code,_role_code,_lang_code,'I',_succ_msg);
			
			v_succ_code := 'SB07PBACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PBACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogrambatch
				   where	tprogrambatch_gid = _tprogrambatch_gid
				   and 		status_code  <> 'I'
				   ) then
			
			-- insert in feedback trainer and participant table
			if _status_code = 'C' then
				call public.pr_ins_feedback(_tprogram_id, _tprogrambatch_id, _feedback_lang_code,
											_user_code, _role_code, _lang_code, _succ_msg);
			end if;
			
			select 	tprogram_venue_id into v_tprogram_venue_id   
			from    trng_trn_ttprogrambatch
			where	tprogrambatch_gid = _tprogrambatch_gid
			and 	status_code  <> 'I';
			
			if v_tprogram_venue_id <> '' then
				update	trng_trn_ttprogrambatch 
				set 	
						batch_name				= _batch_name,
						batch_ll_name			= _batch_ll_name,
						lang_code				= _prgbatch_lang_code,
						start_date				= _start_date,
						end_date				= _end_date,
-- 						no_of_days				= _no_of_days,
						tprogram_venue_id		= _tprogram_venue_id,
						confirm_venue_id		= _confirm_venue_id,
-- 						status_code 			= _status_code,
						updated_by 				= _user_code,
						updated_date 			= now()
				where 	tprogrambatch_gid    = _tprogrambatch_gid
				and 	status_code 	<> 'I';

				v_succ_code := 'SB07PBACUD_004';
			else
				update	trng_trn_ttprogrambatch 
				set 	
-- 						batch_name				= _batch_name,
-- 						batch_ll_name			= _batch_ll_name,
-- 						lang_code				= _prgbatch_lang_code,
-- 						start_date				= _start_date,
-- 						end_date				= _end_date,
-- 						no_of_days				= _no_of_days,
						tprogram_venue_id		= _tprogram_venue_id,
-- 						confirm_venue_id		= _confirm_venue_id,
-- 						status_code 			= _status_code,
						updated_by 				= _user_code,
						updated_date 			= now()
				where 	tprogrambatch_gid    = _tprogrambatch_gid
				and 	status_code 	<> 'I';
				
				v_succ_code := 'SB07PBACUD_002';
			end if;
		else
			v_err_code := v_err_code || 'EB07PBACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttprogrambatch
			    where 	tprogram_id = _tprogram_id 
			    and 	batch_name = _batch_name
			    and 	lang_code = _prgbatch_lang_code
			    and 	status_code <> 'I'
				group	by tprogram_id,batch_name,lang_code,status_code
				having	count('*') > 1) 
	then
		-- Duplicate Validation
		v_err_code := v_err_code || 'VB07PBACUD_028';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBACUD_028', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambatchattachment(INOUT _tprogrambatchattachment_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _doc_type_code udd_code, _doc_subtype_code udd_code, _file_name udd_desc, _file_path udd_text, _file_version udd_code, _file_size udd_code, _status_code udd_code, _attachment_remark udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 11-10-2022
		
		Updated By : Satheesh
		updated Date : 20-03-2023
		
		SP Code : B07PPACUD
		Version N0 : 4
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_status_code udd_code := '';
begin 	
	-- Validation
	/*if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07BAACUD_011' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_011', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;*/
	
	if _mode_flag = 'U' and _tprogrambatchattachment_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get program batch start,end date and status code 
	select status_code into v_status_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id   = _tprogram_id
	and    tprogrambatch_id   = _tprogrambatch_id
	and    status_code <> 'I';
	
-- 	if v_status_code in ('O','L') then
-- 			v_err_code := v_err_code || 'VB07BAACUD_012' || ',';
-- 			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_012', _lang_code)  || v_new_line;	
-- 	end if;
	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07BAACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_005', _lang_code)  || v_new_line;	
		end if;

		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogrambatch_id   = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07BAACUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_006', _lang_code)  || v_new_line;	
		end if;

		-- document type validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_DOC_TYPE'
					   and 		master_code = _doc_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07BAACUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_007', _lang_code)|| v_new_line;	
		end if;

		-- document sub type validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_DOC_SUBTYPE'
					   and 		master_code = _doc_subtype_code 
					   and      depend_code = _doc_type_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07BAACUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_008', _lang_code)|| v_new_line;	
		end if;

		-- file name validation
		if _file_name = ''
		then
			v_err_code := v_err_code || 'VB07BAACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_001', _lang_code)|| v_new_line;	
		end if;

		-- file path validation
		if _file_path = ''
		then
			v_err_code := v_err_code || 'VB07BAACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_002', _lang_code)|| v_new_line;	
		end if;

		-- file version validation
		if _file_version = ''
		then
			v_err_code := v_err_code || 'VB07BAACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_003', _lang_code)|| v_new_line;	
		end if;

		-- file size validation
		if _file_size = ''
		then
			v_err_code := v_err_code || 'VB07BAACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_004', _lang_code)|| v_new_line;	
		end if;

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07BAACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_009', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07BAACUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07BAACUD_010', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogrambatchattachment
				  where 	tprogrambatchattachment_gid = _tprogrambatchattachment_gid
				  and 		status_code  = 'A'
				 ) then
			Update 	trng_trn_ttprogrambatchattachment
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	tprogrambatchattachment_gid = _tprogrambatchattachment_gid
			and 	status_code  = 'A';
			
			v_succ_code := 'SB07BAACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07BAACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07BAACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogrambatchattachment
					  where		tprogrambatchattachment_gid = _tprogrambatchattachment_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogrambatchattachment 
			(
				tprogram_id,
				tprogrambatch_id,
				doc_type_code,
				doc_subtype_code,
				file_name,
				file_path,
				file_version,
				file_size,
				status_code,
				attachment_remark,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogrambatch_id,
				_doc_type_code,
				_doc_subtype_code,
				_file_name,
				_file_path,
				_file_version,
				_file_size,
				_status_code,
				_attachment_remark,
				now(),
				_user_code
			) returning tprogrambatchattachment_gid into _tprogrambatchattachment_gid;
			
			v_succ_code := 'SB07BAACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07BAACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07BAACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogrambatchattachment
				   where	tprogrambatchattachment_gid = _tprogrambatchattachment_gid
				   and 		status_code  = 'A'
				   ) then
			update	trng_trn_ttprogrambatchattachment 
			set 	doc_type_code		= _doc_type_code,
					doc_subtype_code	= _doc_subtype_code,
					file_name			= _file_name,
					file_path			= _file_path,
					file_version		= _file_version,
					file_size			= _file_size,
					status_code			= _status_code,
					attachment_remark	= _attachment_remark,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	tprogrambatchattachment_gid = _tprogrambatchattachment_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB07BAACUD_002';
		else
			v_err_code := v_err_code || 'EB07BAACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07BAACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
-- 	if exists (	select	count(*)
-- 				from 	trng_mst_tcourse
-- 			    where 	course_name = _course_name 
-- 			    and 	status_code <> 'I'
-- 				group	by course_name
-- 				having	count('*') > 1) 
-- 	then
-- 		-- Course name cannot be duplicated
-- 		v_err_code := v_err_code || 'EB04COUCUD_001';
-- 		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB04COUCUD_001', _lang_code),_course_name);	
		
-- 		raise exception '%',v_err_code || '-' || v_err_msg;
-- 	else
-- 		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
-- 	end if;

	if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambatchattachmentjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 20-12-2022
		
		Updated By   : Mangai
		Updated Date : 27-03-2023
		
		SP Code      : B07BAACUX
		Version No   : 2
	*/
	v_colrec record;
	v_updated_date udd_datetime;
	v_config_value udd_desc := '';
begin
	 -- Get program batch attachment file path from config table
	 select config_value into v_config_value
	 from   core_mst_tconfig
	 where  config_name = 'programbatch_attachment'
	 and    status_code = 'A';
	 
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogrambatchattachment_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											doc_type_code udd_code,
											doc_subtype_code udd_code,
											file_name udd_desc,
											file_path udd_text,
											file_version udd_code,
											file_size udd_code,
											status_code udd_code,
											attachment_remark udd_desc,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogrambatchattachment(
-- 			  										tprogrambatchattachment_gid ,
													tprogram_id ,
													tprogrambatch_id ,
													doc_type_code ,
													doc_subtype_code ,
													file_name ,
													file_path ,
													file_version ,
													file_size ,
													status_code ,
													attachment_remark ,
													created_date ,
													created_by 
												)
										values  (										
-- 													v_colrec.tprogrambatchattachment_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.doc_type_code ,
													v_colrec.doc_subtype_code ,
													v_colrec.file_name ,
													v_config_value ,
													v_colrec.file_version ,
													v_colrec.file_size ,
													v_colrec.status_code ,
													v_colrec.attachment_remark ,
													v_colrec.created_date ,
													v_colrec.created_by 
												);
				end loop;
				
				/*on conflict (
								tprogrambatchattachment_gid
							)
							do update set 	tprogrambatchattachment_gid = v_colrec.tprogrambatchattachment_gid ,
										  	tprogram_id = v_colrec.tprogram_id ,
										  	tprogrambatch_id = v_colrec.tprogrambatch_id ,
											doc_type_code = v_colrec.doc_type_code ,
											doc_subtype_code = v_colrec.doc_subtype_code ,
											file_name =	v_colrec.file_name ,
											file_path = v_colrec.file_path ,
											file_version = v_colrec.file_version ,
											file_size = v_colrec.file_size ,
											status_code =	v_colrec.status_code ,
											attachment_remark = v_colrec.attachment_remark ,
											updated_date		=	v_updated_date,
											updated_by			=	v_colrec.updated_by;
			END LOOP;*/
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambatchcount(INOUT _tprogrambatchcount_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _batch_date udd_date, _batch_count udd_int, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By   : Mangai
		Created Date : 11-10-2022
		
		Updated By   : Satheesh
		Updated Date : 21-03-2023
		
		SP Code 	 : B07PBCCUD
		version no   : 07
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_part_count udd_int := 0 ;
	v_status_code udd_code := '';
	v_execution_status_code udd_code := '';
begin 	
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PBCCUD_006' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_006', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogrambatchcount_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get program execution status
	select execution_status_code into v_execution_status_code
	from   trng_trn_ttprogram
	where  tprogram_id = _tprogram_id;
	
	--Get batch status
	select status_code into v_status_code
	from trng_trn_ttprogrambatch
	where tprogrambatch_id = _tprogrambatch_id;
	
	-- The program status is %s, so unable to edit.
/*	if (_mode_flag in ('I','U','D')) and (v_execution_status_code in ('H','P','C','L'))
	then
			v_err_code := v_err_code || 'VB07PBCCUD_012';
			v_err_msg  := v_err_msg ||  format(fn_get_msg('VB07PBCCUD_012', _lang_code),
											   fn_get_masterdesc('QCD_EXEC_STATUS',v_execution_status_code,_lang_code))  || v_new_line;
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
*/	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PBCCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_007', _lang_code)  || v_new_line;	
		end if;

		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogram_id   = _tprogram_id
					   and      tprogrambatch_id   = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PBCCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_008', _lang_code)  || v_new_line;	
		end if;

		-- batch date validation
		if _batch_date isnull
		then
			v_err_code := v_err_code || 'VB07PBCCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_001', _lang_code)|| v_new_line;	
		end if;

/*		if _batch_date < now() :: udd_date 
		then
			v_err_code := v_err_code || 'VB07PBCCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_003', _lang_code)|| v_new_line;	
		end if;
*/
		-- batch count validation
		if _batch_count <= 0
		then
			v_err_code := v_err_code || 'VB07PBCCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_002', _lang_code)|| v_new_line;	
		end if;
		
		-- batch count against participant count validation 
		if _mode_flag = 'U' then
				-- Get Participant count
				select count(*) into v_part_count
				from trng_trn_ttprogramparticipant
				where tprogram_id = _tprogram_id
				and tprogrambatch_id = _tprogrambatch_id
				and batch_date = _batch_date
				and status_code = 'A';
			if  _batch_count < v_part_count then
					v_err_code := v_err_code || 'VB07PBCCUD_004' || ',';
					v_err_msg  := v_err_msg ||   FORMAT(fn_get_msg('VB07PBCCUD_004', _lang_code),v_part_count)  || v_new_line;
			 end if;
		end if;

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBCCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_009', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBCCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_010', _lang_code)|| v_new_line;	
		end if;
		
		if _mode_flag = 'U' and v_status_code  = 'C'
		then
			v_err_code := v_err_code || 'VB07PBCCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBCCUD_005', _lang_code)|| v_new_line;	
		end if;
		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogrambatchcount
				  where 	tprogrambatchcount_gid = _tprogrambatchcount_gid
				  and 		status_code  = 'A'
				 ) then
			delete from trng_trn_ttprogrambatchcount
			where  tprogrambatchcount_gid = _tprogrambatchcount_gid
			and    status_code  = 'A';
			
			v_succ_code := 'SB07PBCCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PBCCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBCCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogrambatchcount
					  where		tprogrambatchcount_gid = _tprogrambatchcount_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogrambatchcount 
			(
				tprogram_id,
				tprogrambatch_id,
				batch_date,
				batch_count,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogrambatch_id,
				_batch_date,
				_batch_count,
				_status_code,
				now(),
				_user_code
			) returning tprogrambatchcount_gid into _tprogrambatchcount_gid;
			
			v_succ_code := 'SB07PBCCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PBCCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBCCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogrambatchcount
				   where	tprogrambatchcount_gid = _tprogrambatchcount_gid
				   and 		status_code  = 'A'
				   ) then
			update	trng_trn_ttprogrambatchcount 
			set 	batch_date				= _batch_date,
					batch_count				= _batch_count,	
					status_code 			= _status_code,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	tprogrambatchcount_gid  = _tprogrambatchcount_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB07PBCCUD_002';
		else
			v_err_code := v_err_code || 'EB07PBCCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBCCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttprogrambatchcount
			    where 	tprogram_id = _tprogram_id 
			   	and 	tprogrambatch_id = _tprogrambatch_id
			   	and 	batch_date = _batch_date
			    and 	status_code <> 'I'
				group	by tprogram_id,tprogrambatch_id,batch_date,status_code
				having	count('*') > 1) 
	then
		-- Duplicate Validation
		v_err_code := v_err_code || 'VB07PBCCUD_011';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBCCUD_011', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;

end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambatchcountjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 19-12-2022
		SP Code      : B07PBCCUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogrambatchcount_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											batch_date udd_date,
											batch_count udd_int,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogrambatchcount(
                                                    tprogrambatchcount_gid,
											        tprogram_id,
											        tprogrambatch_id,
											        batch_date,
											        batch_count,
											        status_code,
 											        created_date,
											        created_by
												)
										values  (										
													v_colrec.tprogrambatchcount_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.batch_date ,
													v_colrec.batch_count ,
													v_colrec.status_code ,
													v_colrec.created_date ,
													v_colrec.created_by 
												)
										
				on conflict (
								tprogram_id,
					            tprogrambatch_id,
					            batch_date
							)
							do update set 	tprogrambatchcount_gid =  v_colrec.tprogrambatchcount_gid,
											tprogram_id =  v_colrec.tprogram_id,
											tprogrambatch_id =  v_colrec.tprogrambatch_id,
											batch_date =  v_colrec.batch_date,
											batch_count =  v_colrec.batch_count,
											status_code =  v_colrec.status_code,
											updated_date =  v_updated_date,
											updated_by =  v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambatchjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 19-12-2022
		SP Code      : B07PBACUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogrambatch_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											batch_name udd_desc,
											batch_ll_name udd_desc,
											lang_code udd_code,
											start_date udd_date,
											end_date udd_date,
											no_of_days udd_int,
											tprogram_venue_id udd_code,
											confirm_venue_id udd_code,
											status_code udd_code,
											tprogrambatch_remark udd_text,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogrambatch(
			  										tprogrambatch_gid ,
													tprogram_id ,
													tprogrambatch_id ,
													batch_name ,
													batch_ll_name ,
													lang_code ,
													start_date ,
													end_date ,
													no_of_days ,
													tprogram_venue_id ,
													confirm_venue_id ,
													status_code ,
													tprogrambatch_remark ,
													created_date ,
													created_by	
												)
										values  (										
													v_colrec.tprogrambatch_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.batch_name ,
													v_colrec.batch_ll_name ,
													v_colrec.lang_code ,
													v_colrec.start_date ,
													v_colrec.end_date ,
													v_colrec.no_of_days ,
													v_colrec.tprogram_venue_id ,
													v_colrec.confirm_venue_id ,
													v_colrec.status_code ,
													v_colrec.tprogrambatch_remark ,
													v_colrec.created_date ,
													v_colrec.created_by 
												)
										
				on conflict (
								tprogrambatch_gid
							)
							do update set 	tprogrambatch_gid = v_colrec.tprogrambatch_gid ,
										  	tprogram_id = v_colrec.tprogram_id ,
										  	tprogrambatch_id = v_colrec.tprogrambatch_id ,
											batch_name = v_colrec.batch_name ,
											batch_ll_name = v_colrec.batch_ll_name ,
											lang_code =	v_colrec.lang_code ,
											start_date = v_colrec.start_date ,
											end_date = v_colrec.end_date ,
											no_of_days = v_colrec.no_of_days ,
											tprogram_venue_id =	v_colrec.tprogram_venue_id ,
											confirm_venue_id = v_colrec.confirm_venue_id ,
											status_code = v_colrec.status_code ,
											tprogrambatch_remark = v_colrec.tprogrambatch_remark ,
											updated_date		=	v_updated_date,
											updated_by			=	v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambudget(INOUT _tprogrambudget_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _batch_date udd_date, _expense_code udd_code, _budget_desc udd_desc, _budget_amount udd_amount, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 21-10-2022
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		SP Code : B07PBUCUD
		Version No : 3
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_execution_status_code udd_code := '';
begin 	
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PBUCUD_002' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_002', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	-- Get program execution status
	select execution_status_code into v_execution_status_code
	from   trng_trn_ttprogram
	where  tprogram_id = _tprogram_id;
	
	if _mode_flag = 'U' and _tprogrambudget_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- The program status is %s, so unable to edit.
/*	if (_mode_flag in ('I','U','D')) and (v_execution_status_code in ('H','P','C','L'))
	then
			v_err_code := v_err_code || 'VB07PBUCUD_009';
			v_err_msg  := v_err_msg ||  format(fn_get_msg('VB07PBUCUD_009', _lang_code),
											   fn_get_masterdesc('QCD_EXEC_STATUS',v_execution_status_code,_lang_code))  || v_new_line;
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
*/	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PBUCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogram_id       = _tprogram_id
					   and      tprogrambatch_id  = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PBUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_004', _lang_code)  || v_new_line;	
		end if;	
		
		-- expense code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_EXPENSE'
					   and 		master_code = _expense_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBUCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_005', _lang_code)|| v_new_line;	
		end if;
		
		-- budget amount validation
		if _budget_amount <= 0 
		then 
			v_err_code := v_err_code || 'VB07PBUCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_001', _lang_code)  || v_new_line;	
		end if;		

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBUCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_006', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PBUCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBUCUD_007', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- get start date 
	select  start_date into _batch_date
	from 	trng_trn_ttprogrambatch
	where   tprogram_id      = _tprogram_id
	and     tprogrambatch_id = _tprogrambatch_id
	and     status_code      <> 'I';
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogrambudget
				  where 	tprogrambudget_gid = _tprogrambudget_gid
				  and 		status_code  = 'A'
				 ) then
			Update 	trng_trn_ttprogrambudget
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	tprogrambudget_gid = _tprogrambudget_gid
			and 	status_code  = 'A';
			
			v_succ_code := 'SB07PBUCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PBUCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBUCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogrambudget
					  where		tprogrambudget_gid = _tprogrambudget_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogrambudget 
			(
				tprogram_id,
				tprogrambatch_id,
				batch_date,
				expense_code,
				budget_desc,
				budget_amount,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogrambatch_id,
				_batch_date,
				_expense_code,
				_budget_desc,
				_budget_amount,
				_status_code,
				now(),
				_user_code
			) returning tprogrambudget_gid into _tprogrambudget_gid;
							
			v_succ_code := 'SB07PBUCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PBUCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBUCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogrambudget
				   where	tprogrambudget_gid = _tprogrambudget_gid
				   and 		status_code  = 'A'
				   ) then
				   
			update	trng_trn_ttprogrambudget 
			set 	
					batch_date         = _batch_date,
					expense_code       = _expense_code,
					budget_desc        = _budget_desc,
					budget_amount	   = _budget_amount,
					status_code 	   = _status_code,
					updated_by 		   = _user_code,
					updated_date 	   = now()
			where 	tprogrambudget_gid = _tprogrambudget_gid
			and 	status_code 	= 'A';

			v_succ_code := 'SB07PBUCUD_002';
		else
			v_err_code := v_err_code || 'EB07PBUCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PBUCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttprogrambudget
			    where 	tprogram_id = _tprogram_id
			    and     tprogrambatch_id = _tprogrambatch_id
			    and     batch_date = _batch_date
			    and     expense_code = _expense_code
			    and 	status_code <> 'I'
				group	by tprogram_id,tprogrambatch_id,batch_date,expense_code
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB07PBUCUD_008';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBUCUD_008', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;

	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogrambudgetjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 19-12-2022
		SP Code      : B07PBUCUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogrambudget_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											batch_date udd_date,
											expense_code udd_code,
											budget_desc udd_desc,
 											budget_amount udd_numeric,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogrambudget(
                                                    tprogrambudget_gid,
											        tprogram_id,
											        tprogrambatch_id,
											        batch_date,
											        expense_code,
											        budget_desc,
 											        budget_amount,
											        status_code,
											        created_date,
											        created_by
												)
										values  (										
													v_colrec.tprogrambudget_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.batch_date ,
													v_colrec.expense_code ,
													v_colrec.budget_desc ,
													v_colrec.budget_amount ,
													v_colrec.status_code ,
													v_colrec.created_date ,
													v_colrec.created_by 
												)
										
				on conflict (
								tprogrambudget_gid
							)
							do update set 	tprogrambudget_gid =  v_colrec.tprogrambudget_gid,
											tprogram_id =  v_colrec.tprogram_id,
											tprogrambatch_id =  v_colrec.tprogrambatch_id,
											batch_date =  v_colrec.batch_date,
											expense_code =  v_colrec.expense_code,
											budget_desc =  v_colrec.budget_desc,
 											budget_amount =  v_colrec.budget_amount,
											status_code =  v_colrec.status_code,
											updated_date =  v_updated_date,
											updated_by =  v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramexpense(INOUT _tprogramexpense_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _expense_date udd_date, _expense_code udd_code, _expense_desc udd_desc, _expense_amount udd_amount, _expense_reason udd_text, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 11-10-2022
		
		Updated By : Satheesh
		updated Date : 21-03-2023
		
		SP Code : B07PPACUD
		version no : 08
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_start_date udd_date := null;
	v_end_date udd_date := null;
	v_status_code udd_code := '';
	v_total_budget udd_amount := 0;
	v_expense udd_amount := 0;
	v_exp_amt udd_amount := 0;
begin 	
	-- Validation
	select fn_get_totalbudgetamount(_tprogram_id) into v_total_budget;
    select fn_get_expenseamount(_tprogram_id, _tprogrambatch_id) into v_expense;
	v_exp_amt := v_expense + _expense_amount;
	
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PEXCUD_005' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_005', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogramexpense_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get program batch start,end date and status code 
	select start_date, end_date ,status_code
	into   v_start_date, v_end_date, v_status_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id   = _tprogram_id
	and    tprogrambatch_id   = _tprogrambatch_id
	and    status_code <> 'I';
	
-- 	if v_status_code in ('O','L') then
-- 			v_err_code := v_err_code || 'VB07PEXCUD_011' || ',';
-- 			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_011', _lang_code)  || v_new_line;	
-- 	end if;
	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PEXCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_006', _lang_code)  || v_new_line;	
		end if;

		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogram_id   = _tprogram_id
					   and      tprogrambatch_id   = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PEXCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_007', _lang_code)  || v_new_line;	
		end if;

		-- expense date validation
		if _expense_date isnull 
		then
			v_err_code := v_err_code || 'VB07PEXCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_001', _lang_code)  || v_new_line;	
		end if;
		
		if _expense_date < v_start_date  or _expense_date > v_end_date
		then
			v_err_code := v_err_code || 'VB07PEXCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- expense code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_EXPENSE'
					   and 		master_code = _expense_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PEXCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_008', _lang_code)|| v_new_line;	
		end if;

		-- expense amount
		if _expense_amount <= 0
		then
			v_err_code := v_err_code || 'VB07PEXCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_002', _lang_code)|| v_new_line;	
		end if;
		
		-- expense reason
		if v_exp_amt > v_total_budget then
			if (_expense_reason = '' or _expense_reason isnull) then
				v_err_code := v_err_code || 'VB07PEXCUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_004', _lang_code)|| v_new_line;	
			end if;
		end if;
		
		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PEXCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_009', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PEXCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXCUD_010', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogramexpense
				  where 	tprogramexpense_gid = _tprogramexpense_gid
				  and 		status_code  = 'A'
				 ) then
			/*Update 	trng_trn_ttprogramexpense
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	tprogramexpense_gid = _tprogramexpense_gid
			and 	status_code  = 'A';*/
			
			delete from trng_trn_ttprogramexpense
			where 	tprogramexpense_gid = _tprogramexpense_gid
			and 	status_code  = 'A';
			
			v_succ_code := 'SB07PEXCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PEXCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PEXCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogramexpense
					  where		tprogramexpense_gid = _tprogramexpense_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogramexpense 
			(
				tprogram_id,
				tprogrambatch_id,
				expense_date,
				expense_code,
				expense_desc,
				expense_amount,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogrambatch_id,
				_expense_date,
				_expense_code,
				_expense_desc,
				_expense_amount,
				_status_code,
				now(),
				_user_code
			) returning tprogramexpense_gid into _tprogramexpense_gid;
			
			-- Update expense reason 
			if _expense_reason <> '' then
				CALL public.pr_set_tprogramexpensereason(_tprogramexpense_gid,_expense_reason,
														 _user_code,_role_code,_lang_code,_succ_msg);
			end if;
			
			v_succ_code := 'SB07PEXCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PEXCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PEXCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogramexpense
				   where	tprogramexpense_gid = _tprogramexpense_gid
				   and 		status_code  = 'A'
				   ) then
			update	trng_trn_ttprogramexpense 
			set 	expense_date		= _expense_date,
					expense_code		= _expense_code,
					expense_desc		= _expense_desc,
					expense_amount		= _expense_amount,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	tprogramexpense_gid = _tprogramexpense_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB07PEXCUD_002';
		else
			v_err_code := v_err_code || 'EB07PEXCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PEXCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	/*
	if exists (	select	count(*)
				from 	trng_trn_ttprogramexpense
			    where 	tprogram_id = _tprogram_id
			    and     tprogrambatch_id = _tprogrambatch_id
			    -- and     expense_date = _expense_date
			    and     expense_code = _expense_code
			    and 	status_code <> 'I'
				group	by tprogram_id,tprogrambatch_id,expense_date,expense_code
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB07PEXCUD_012';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PEXCUD_012', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	*/
	
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramexpensejson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 19-12-2022
		
		updated_date : 24-01-2023
		updated by   : satheesh 
		
		SP Code      : B07PEXCUX
		Version No   : 2
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogramexpense_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											expense_date udd_date,
											expense_code udd_code,
											expense_desc udd_desc,
											expense_amount udd_numeric,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code,
											expense_reason udd_text
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogramexpense(
                                                    tprogramexpense_gid,
											        tprogram_id,
											        tprogrambatch_id,
											        expense_date,
											        expense_code,
											        expense_desc,
 											        expense_amount,
											        status_code,
											        created_date,
											        created_by,
				                                    expense_reason
												)
										values  (										
													v_colrec.tprogramexpense_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.expense_date ,
													v_colrec.expense_code ,
													v_colrec.expense_desc ,
													v_colrec.expense_amount ,
													v_colrec.status_code ,
													v_colrec.created_date ,
													v_colrec.created_by ,
											        v_colrec.expense_reason
												)
										
				on conflict (
								tprogramexpense_gid
							)
							do update set 	tprogramexpense_gid =  v_colrec.tprogramexpense_gid,
											tprogram_id =  v_colrec.tprogram_id,
											tprogrambatch_id =  v_colrec.tprogrambatch_id,
											expense_date =  v_colrec.expense_date,
											expense_code =  v_colrec.expense_code,
											expense_desc =  v_colrec.expense_desc,
 											expense_amount =  v_colrec.expense_amount,
											status_code =  v_colrec.status_code,
											updated_date =  v_updated_date,
											updated_by =  v_colrec.updated_by,
											expense_reason = v_colrec.expense_reason;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramgeo(INOUT _tprogramgeo_gid udd_int, INOUT _tprogram_id udd_code, _tprogram_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 05-10-2022
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		SP Code : B07PGECUD
		version no : 07
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_batch_count udd_int := 0;
	v_execution_status_code udd_code := '';
	v_proglevelgeovalidation udd_text := '';
begin 	
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PGECUD_002' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PGECUD_002', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogramgeo_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get program execution status
	select execution_status_code into v_execution_status_code
	from   trng_trn_ttprogram 
	where  tprogram_id = _tprogram_id;
	
	-- Get batch count
	select count(*) into v_batch_count
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    status_code <> 'I';
	
	select fn_get_proglevelgeovalidation(_tprogram_id,_state_code,_district_code,_block_code,_grampanchayat_code,
										_village_code) into v_proglevelgeovalidation;
	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PGECUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PGECUD_003', _lang_code)  || v_new_line;	
		end if;

		-- program level validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_LEVEL'
					   and 		master_code = _tprogram_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PGECUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PGECUD_004', _lang_code)|| v_new_line;	
		end if;
		
		-- Please add geo as per program level
		if v_proglevelgeovalidation = 'false' then
			v_err_code := v_err_code || 'VB07PGECUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PGECUD_001', _lang_code)|| v_new_line;	
		end if;

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PGECUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PGECUD_005', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PGECUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PGECUD_006', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	if  _mode_flag = 'D'  and v_execution_status_code = 'H' 
	then
			v_err_code := v_err_code || 'VB07PRGCUD_030'  ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_030', _lang_code) || v_new_line;	
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag = 'U' or _mode_flag = 'D' then
		if v_batch_count > 0 
		then
			v_err_code := v_err_code || 'VB07PRGCUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_014', _lang_code)|| v_new_line;	
		end if;
	end if;
			 
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogramgeo
				  where 	tprogramgeo_gid = _tprogramgeo_gid
				  and 		status_code  = 'A'
				 ) then
			Update 	trng_trn_ttprogramgeo
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	tprogramgeo_gid = _tprogramgeo_gid
			and 	status_code  = 'A';
			
			v_succ_code := 'SB07PGECUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PGECUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PGECUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogramgeo
					  where		tprogramgeo_gid = _tprogramgeo_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogramgeo 
			(
				tprogram_id,
				tprogram_level_code,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				village_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogram_level_code,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_village_code,
				_status_code,
				now(),
				_user_code
			) returning tprogramgeo_gid into _tprogramgeo_gid;
							
			v_succ_code := 'SB07PGECUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PGECUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PGECUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogramgeo
				   where	tprogramgeo_gid = _tprogramgeo_gid
				   and 		status_code  = 'A'
				   ) then
			update	trng_trn_ttprogramgeo 
			set 	tprogram_level_code		= _tprogram_level_code,
					state_code				= _state_code,
					district_code			= _district_code,
					block_code				= _block_code,
					grampanchayat_code		= _grampanchayat_code,
					village_code			= _village_code,
					status_code 			= _status_code,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	tprogramgeo_gid    = _tprogramgeo_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB07PGECUD_002';
		else
			v_err_code := v_err_code || 'EB07PGECUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PGECUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttprogramgeo
			    where 	tprogram_id = _tprogram_id
			    /*and 	state_code = _state_code
			    and 	district_code = _district_code
			    and 	block_code = _block_code
			    and 	grampanchayat_code = _grampanchayat_code
			    and 	village_code = _village_code*/
			    and 	status_code = 'A'
				group	by tprogram_id,status_code
				--,state_code,district_code,block_code,grampanchayat_code,village_code
				having	count('*') > 1) 
	then
		-- Duplicate Record
		v_err_code := v_err_code || 'EB07PGECUD_002';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB07PGECUD_002', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramgeojson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 20-12-2022
		SP Code      : B07PGECUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogramgeo_gid udd_int,
											tprogram_id udd_code,
											tprogram_level_code udd_code,
											state_code udd_code,
											district_code udd_code,
											block_code udd_code,
											grampanchayat_code udd_code,
											village_code udd_code,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogramgeo(
			  										tprogramgeo_gid,
													tprogram_id,
													tprogram_level_code,
													state_code,
													district_code,
													block_code,
													grampanchayat_code,
				                                    village_code,
													status_code,
													created_date ,
													created_by	
												)
										values  (										
													v_colrec.tprogramgeo_gid,
													v_colrec.tprogram_id,
													v_colrec.tprogram_level_code,
													v_colrec.state_code,
													v_colrec.district_code,
													v_colrec.block_code,
													v_colrec.grampanchayat_code,
											        v_colrec.village_code,
													v_colrec.status_code,
													v_colrec.created_date ,
													v_colrec.created_by 
												)
										
				on conflict (
								tprogramgeo_gid
							)
							do update set 	tprogramgeo_gid = v_colrec.tprogramgeo_gid,
											tprogram_id = v_colrec.tprogram_id,
											tprogram_level_code = v_colrec.tprogram_level_code,
											state_code = v_colrec.state_code,
											district_code = v_colrec.district_code,
											block_code = v_colrec.block_code,
											grampanchayat_code = v_colrec.grampanchayat_code,
											village_code = v_colrec.village_code,
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mangai
		Created Date : 20-12-2022
		
		Updated By   : Mangai
		Updated Date : 24-03-2022
		
		SP Code      : B07PRGCUX
		Version No   : 3
	*/
	v_colrec record;
	v_updated_date udd_datetime;
	v_row_timestamp udd_datetime;
	
	v_last_sync_date udd_datetime;
begin 
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogram_gid udd_int,
											tprogram_id udd_code,
											tprogram_name udd_desc,
											tprogram_ll_name udd_desc,
											course_id udd_code,
											coordinator_id udd_code,
											tprogram_level_code udd_code,
											start_date udd_date,
											end_date udd_date,
											no_of_days udd_int,
											no_of_batches udd_int,
											budget_amount udd_amount,
											actual_amount udd_amount,
											budget_remark udd_text,
											execution_status_code udd_code,
											execution_status_date udd_date,
											deactivation_reason_code udd_code,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code,
											row_timestamp udd_text
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;
			  select fn_text_todatetime(v_colrec.row_timestamp) into v_row_timestamp;

		      insert into trng_trn_ttprogram(
			  										tprogram_gid,
													tprogram_id,
													tprogram_name,
													tprogram_ll_name,
													course_id,
													coordinator_id,
													tprogram_level_code,
													start_date,
													end_date,
													no_of_days,
													no_of_batches,
													budget_amount,
													actual_amount,
													budget_remark,
													execution_status_code,
													execution_status_date,
													deactivation_reason_code,
													status_code,
													created_date,
													created_by,
													row_timestamp
												)
										values  (										
													v_colrec.tprogram_gid,
													v_colrec.tprogram_id,
													v_colrec.tprogram_name,
													v_colrec.tprogram_ll_name,
													v_colrec.course_id,
													v_colrec.coordinator_id,
													v_colrec.tprogram_level_code,
													v_colrec.start_date,
													v_colrec.end_date,
													v_colrec.no_of_days,
													v_colrec.no_of_batches,
													v_colrec.budget_amount,
													v_colrec.actual_amount,
													v_colrec.budget_remark,
													v_colrec.execution_status_code,
													v_colrec.execution_status_date,
													v_colrec.deactivation_reason_code,
													v_colrec.status_code,
													v_colrec.created_date,
													v_colrec.created_by,
													v_row_timestamp	
											)
										
				on conflict (
								tprogram_gid
-- 								tprogram_name,course_id,coordinator_id,tprogram_level_code,start_date,end_date
							)
							do update set   
-- 											tprogram_gid = v_colrec.tprogram_gid,
-- 										    tprogram_id = v_colrec.tprogram_id,
										    tprogram_name = v_colrec.tprogram_name,
											tprogram_ll_name = v_colrec.tprogram_ll_name,
											course_id = v_colrec.course_id,
											coordinator_id = v_colrec.coordinator_id,
											tprogram_level_code = v_colrec.tprogram_level_code,
											start_date = v_colrec.start_date,
											end_date = v_colrec.end_date,
											no_of_days = v_colrec.no_of_days,
											no_of_batches = v_colrec.no_of_batches,
											budget_amount = v_colrec.budget_amount,
											actual_amount = v_colrec.actual_amount,
											budget_remark = v_colrec.budget_remark,
											execution_status_code = v_colrec.execution_status_code,
											execution_status_date = v_colrec.execution_status_date,
											deactivation_reason_code = v_colrec.deactivation_reason_code,
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by,
											row_timestamp = v_row_timestamp;
			
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramparticipant(INOUT _tprogramparticipant_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _batch_date udd_date, _participant_type_code udd_code, _participant_subtype_code udd_code, _participant_id udd_code, _participant_name udd_desc, _participant_ll_name udd_desc, _fatherhusband_name udd_desc, _fatherhusband_ll_name udd_desc, _shg_id udd_code, _mobile_no udd_mobile, _email_id udd_email, _gender_code udd_code, _attendance_flag udd_flag, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 11-10-2022
		
		Updated By : Satheesh
		Updated Date : 20-03-2023
		
		Version No : 17
		SP Code : B07PPACUD
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_batch_count udd_int := 0;
	v_prt_count udd_int := 0;
	v_tprogrambatch_id udd_code := '';
	v_status_code udd_code := '';
	v_shg_code udd_code := '';
	v_execution_status_code udd_code := '';
	v_parent_code udd_code := '';
	v_program_level udd_code := '';
begin 	
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PPACUD_012' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_012', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogramparticipant_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get program execution status
	select execution_status_code into v_execution_status_code
	from   trng_trn_ttprogram
	where  tprogram_id = _tprogram_id;
	
	-- Get program level
	 v_program_level := (select fn_get_programlevel(_tprogram_id)) ;
	
	-- Get shg code 
	if _participant_subtype_code = 'QCD_INT_LOKOS' then
			select  shg_code into v_shg_code
			from    shgmember_profileconsolidated_view 
			where   shg_member_id :: udd_code = _participant_id;
	end if;
	
	-- Get batch id from trainer table
-- 	select tprogrambatch_id into v_tprogrambatch_id
-- 	from   trng_trn_ttprogramparticipant
-- 	where  tprogramparticipant_gid = _tprogramparticipant_gid;
	
	-- Get batch status
	if _tprogrambatch_id <> '' then
		select status_code into v_status_code
		from   trng_trn_ttprogrambatch
		where  tprogrambatch_id = _tprogrambatch_id;
	else
		select tprogrambatch_id into v_tprogrambatch_id
		from   trng_trn_ttprogramparticipant
		where  tprogramparticipant_gid = _tprogramparticipant_gid;
		
		select status_code into v_status_code
		from   trng_trn_ttprogrambatch
		where  tprogrambatch_id = v_tprogrambatch_id;
	end if;
	
	-- The program status is %s, so the participant is unable to edit.
/*	if (_mode_flag in ('I','U','D')) and (v_execution_status_code in ('H','P','C','L'))
	then
			v_err_code := v_err_code || 'VB07PPACUD_011';
			v_err_msg  := v_err_msg ||  format(fn_get_msg('VB07PPACUD_011', _lang_code),
											   fn_get_masterdesc('QCD_EXEC_STATUS',v_execution_status_code,_lang_code))  || v_new_line;
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
*/	
	if _mode_flag <> 'D' then
		if _participant_type_code = 'QCD_EXTERNAL' then
			_participant_id := '';
		end if;
		
		if _participant_type_code = 'QCD_EXTERNAL' then
			_participant_subtype_code := 'QCD_EXTERNAL';
		end if;
		
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PPACUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_013', _lang_code)  || v_new_line;	
		end if;

		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogrambatch_id   = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PPACUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_014', _lang_code)  || v_new_line;	
		end if;
		
		-- mobile number length validation
		if _participant_type_code = 'QCD_EXTERNAL' then
			if (select length(_mobile_no) < 10)
			then
				v_err_code := v_err_code || 'VB07PPACUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_008', _lang_code)|| v_new_line;	
			end if;
		end if;

		-- batch date validation
		if _batch_date isnull
		then
			v_err_code := v_err_code || 'VB07PPACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_001', _lang_code)|| v_new_line;	
		end if;

-- 		if _batch_date < now() :: udd_date 
-- 		then
-- 			v_err_code := v_err_code || 'VB07PPACUD_003' || ',';
-- 			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_003', _lang_code)|| v_new_line;	
-- 		end if;

		-- participant type validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_PRT_TYPE'
					   and 		master_code = _participant_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PPACUD_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_015', _lang_code)|| v_new_line;	
		end if;
		
		-- participant subtype validation
-- 		if _participant_type_code = 'QCD_INTERNAL' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_PRT_SUBTYPE'
						   and 		master_code = _participant_subtype_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB07PPACUD_016' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_016', _lang_code)|| v_new_line;	
			end if;
-- 		end if;
		
		-- participant id validatiion
-- 		if _participant_id <> '' then
-- 			if not exists (select 	* 
-- 						   from 	trng_mst_tcadreuser
-- 						   where 	cadreuser_id   = _participant_id
-- 						   and      status_code <> 'I'
-- 						  )then
-- 				v_err_code := v_err_code || 'VB00CMNCMN_045' || ',';
-- 				v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_045', _lang_code)  || v_new_line;
-- 			end if;
-- 		end if;
		if _participant_type_code = 'QCD_INTERNAL' then
			if _participant_id = ''
			then
				v_err_code := v_err_code || 'VB07PPACUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_004', _lang_code)  || v_new_line;
			end if;
		end if;
		
		-- participant name validation
		if _participant_name = ''
		then
			v_err_code := v_err_code || 'VB07PPACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_002', _lang_code)|| v_new_line;	
		end if;

		-- gender code validation	
		if _gender_code = '1' or _gender_code = '2' or _gender_code = '3' then
			v_parent_code := 'QCD_GENDER';
		else 
			v_parent_code := 'QCD_C_GENDER';
		end if;
		
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = v_parent_code
					   and 		master_code = _gender_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PPACUD_017' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_017', _lang_code)|| v_new_line;	
		end if;

		-- attendance flag validation	
		if _mode_flag = 'U' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_ATTENDANCE'
						   and 		master_code = _attendance_flag 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB07PPACUD_022' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_022', _lang_code)|| v_new_line;	
			end if;
		end if;

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PPACUD_019' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_019', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PPACUD_020' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_020', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	-- This batch status is already completed, So unable to delete the participant
	if v_status_code = 'C'
	then
			v_err_code := v_err_code || 'VB07PPACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_009', _lang_code)|| v_new_line;	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- Get batch count
	select 	batch_count into v_batch_count
	from 	trng_trn_ttprogrambatchcount
	where 	tprogram_id = _tprogram_id
	and 	tprogrambatch_id = _tprogrambatch_id
	and 	batch_date = _batch_date;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogramparticipant
				  where 	tprogramparticipant_gid = _tprogramparticipant_gid
				  and 		status_code  = 'A'
				 ) then
			delete from trng_trn_ttprogramparticipant
			where  tprogramparticipant_gid = _tprogramparticipant_gid
			and    status_code  = 'A';
			
			-- Get Participant count
			select count(*) into v_prt_count from trng_trn_ttprogramparticipant
			where tprogram_id = _tprogram_id
			and tprogrambatch_id = _tprogrambatch_id
			and batch_date = _batch_date;
			
			-- Update on batch table
			if v_prt_count < v_batch_count then
				update 	trng_trn_ttprogrambatchcount 
				set 	batch_count = v_prt_count
				where 	tprogram_id = _tprogram_id
				and 	tprogrambatch_id = _tprogrambatch_id
				and 	batch_date = _batch_date;
			end if;
				 
			v_succ_code := 'SB07PPACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PPACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PPACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttprogramparticipant
					  where		tprogramparticipant_gid = _tprogramparticipant_gid
					  and 		status_code  = 'A'
					 ) then
			insert into trng_trn_ttprogramparticipant 
			(
				tprogram_id,
				tprogrambatch_id,
				batch_date,
				participant_type_code,
				participant_subtype_code,
				participant_id,
				participant_name,
				participant_ll_name,
				fatherhusband_name,
				fatherhusband_ll_name,
				shg_id,
				mobile_no,
				email_id,
				gender_code,
				attendance_flag,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_tprogram_id,
				_tprogrambatch_id,
				_batch_date,
				_participant_type_code,
				_participant_subtype_code,
				_participant_id,
				_participant_name,
				_participant_ll_name,
				_fatherhusband_name,
				_fatherhusband_ll_name,
				v_shg_code,
				_mobile_no,
				_email_id,
				_gender_code,
				_attendance_flag,
				_status_code,
				now(),
				_user_code
			) 
			on conflict (
							tprogram_id,tprogrambatch_id,batch_date,participant_id
						)
			do update set 
				    batch_date				= _batch_date,
					participant_type_code	= _participant_type_code,
					participant_subtype_code= _participant_subtype_code,
					participant_id			= _participant_id,
					participant_name		= _participant_name,
					participant_ll_name		= _participant_ll_name,
					fatherhusband_name		= _fatherhusband_name,
					fatherhusband_ll_name	= _fatherhusband_ll_name,
					shg_id					= v_shg_code,
					mobile_no				= _mobile_no,
					email_id				= _email_id,
					gender_code				= _gender_code,
					attendance_flag			= _attendance_flag,
					status_code 			= _status_code,
					updated_by 				= _user_code,
					updated_date 			= now();
					
					v_succ_code := 'SB07PPACUD_004';
					
				select max(tprogramparticipant_gid) into _tprogramparticipant_gid
				from trng_trn_ttprogramparticipant ; 		
			
			if _participant_type_code = 'QCD_EXTERNAL' then
				_participant_id := 'PRT_'||_tprogramparticipant_gid;
				
				update trng_trn_ttprogramparticipant
				set    participant_id = _participant_id
				where tprogramparticipant_gid = _tprogramparticipant_gid;
			end if;
			
			-- Get Participant count
			select count(*) into v_prt_count from trng_trn_ttprogramparticipant
			where tprogram_id = _tprogram_id
			and tprogrambatch_id = _tprogrambatch_id
			and batch_date = _batch_date;
			
			-- Update on batch table
			if v_prt_count > v_batch_count then
				update 	trng_trn_ttprogrambatchcount 
				set 	batch_count = v_prt_count
				where 	tprogram_id = _tprogram_id
				and 	tprogrambatch_id = _tprogrambatch_id
				and 	batch_date = _batch_date;
			end if;
			
			-- Email or sms Trigger for participant
			if exists (select * from trng_trn_ttprogram
					   where  tprogram_id = _tprogram_id
					   and    status_code = 'A') then
				-- Email Trigger
				if v_program_level ::udd_int >= 69 then
					CALL pr_email_programparticipant(
							_tprogram_id,_tprogrambatch_id,_batch_date,_participant_id,_user_code,_role_code,_lang_code);
				-- SMS Trigger
				elseif v_program_level ::udd_int < 69 then
					CALL pr_sms_programparticipant(
							_tprogram_id,_tprogrambatch_id,_batch_date,_participant_id,_user_code,_role_code,_lang_code);
				end if;
			end if;
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PPACUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PPACUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogramparticipant
				   where	tprogramparticipant_gid = _tprogramparticipant_gid
				   and 		status_code  = 'A'
				   ) then
			update	trng_trn_ttprogramparticipant 
			set 	batch_date				= _batch_date,
					participant_type_code	= _participant_type_code,
					participant_subtype_code= _participant_subtype_code,
					participant_id			= _participant_id,
					participant_name		= _participant_name,
					participant_ll_name		= _participant_ll_name,
					fatherhusband_name		= _fatherhusband_name,
					fatherhusband_ll_name	= _fatherhusband_ll_name,
-- 					shg_id					= _shg_id,
					mobile_no				= _mobile_no,
					email_id				= _email_id,
					gender_code				= _gender_code,
					attendance_flag			= _attendance_flag,
					status_code 			= _status_code,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	tprogramparticipant_gid    = _tprogramparticipant_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB07PPACUD_002';
		else
			v_err_code := v_err_code || 'EB07PPACUD_005';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PPACUD_005', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;

	-- Duplicate validation
	if _participant_type_code = 'QCD_INTERNAL' then
		if exists (	select	count(*)
					from 	trng_trn_ttprogramparticipant
					where 	tprogram_id      = _tprogram_id
					and     tprogrambatch_id = _tprogrambatch_id
					and     batch_date       = _batch_date
					and     participant_id   = _participant_id
					and     mobile_no        = _mobile_no
					and 	status_code <> 'I'
					group	by tprogram_id,tprogrambatch_id,batch_date,participant_id,mobile_no,status_code
					having	count('*') > 1) 
		then
			-- Duplicated Validation
			v_err_code := v_err_code || 'VB07PPACUD_021';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PPACUD_021', _lang_code));	

			raise exception '%',v_err_code || '-' || v_err_msg;
		else
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
		end if;
	else
			if exists (	select	count(*)
					from 	trng_trn_ttprogramparticipant
					where 	tprogram_id      = _tprogram_id
					and     tprogrambatch_id = _tprogrambatch_id
					and     batch_date       = _batch_date
-- 					and     participant_id   = _participant_id
					and     mobile_no        = _mobile_no
					and 	status_code <> 'I'
					group	by tprogram_id,tprogrambatch_id,batch_date,mobile_no,status_code
					having	count('*') > 1) 
		then
			-- Duplicated Validation
			v_err_code := v_err_code || 'VB07PPACUD_021';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PPACUD_021', _lang_code));	

			raise exception '%',v_err_code || '-' || v_err_msg;
		else
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
		end if;
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramparticipantjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mohan S
		Created Date : 19-12-2022
		
		Updated By   : Mangai
		Updated Date : 15-03-2023
		
		SP Code      : B07PPTCUX
		Version No : 04
	*/
	v_colrec record;
	v_updated_date udd_datetime;
	v_tprogramparticipant_gid udd_int := 0;
	v_program_level udd_code := '';
	v_participant_id udd_code := '';
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogramparticipant_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											batch_date udd_date,
											participant_type_code udd_code,
											participant_subtype_code udd_code,
											participant_id udd_code,
											participant_name udd_desc,
											participant_ll_name udd_desc,
											fatherhusband_name udd_desc,
											fatherhusband_ll_name udd_desc,
											shg_id udd_code,
											mobile_no udd_mobile,
											email_id udd_text,
											gender_code udd_code,
											attendance_flag udd_flag,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;
			  if (v_colrec.participant_type_code <> 'QCD_EXTERNAL' 
			  and v_colrec.participant_subtype_code <> 'QCD_EXTERNAL') then
		      insert into trng_trn_ttprogramparticipant(
 			  										-- tprogramparticipant_gid ,
													tprogram_id ,
													tprogrambatch_id ,
													batch_date ,
													participant_type_code ,
													participant_subtype_code ,
													participant_id ,
													participant_name ,
													participant_ll_name ,
				  									fatherhusband_name,
				  									fatherhusband_ll_name,
				  									shg_id,
				  									mobile_no,
				  									email_id,
				  									gender_code,
				  									attendance_flag,
													status_code ,
													created_date ,
													created_by	
												)
										values  (										
 													-- v_colrec.tprogramparticipant_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.batch_date ,
													v_colrec.participant_type_code ,
													v_colrec.participant_subtype_code ,
													v_colrec.participant_id ,
													v_colrec.participant_name ,
													v_colrec.participant_ll_name ,
													v_colrec.fatherhusband_name ,
													v_colrec.fatherhusband_ll_name ,
													v_colrec.shg_id ,
													v_colrec.mobile_no ,
													v_colrec.email_id ,
													v_colrec.gender_code ,
													v_colrec.attendance_flag ,
													v_colrec.status_code ,
													v_colrec.created_date ,
													v_colrec.created_by 
												)
										
				on conflict (
								tprogram_id,tprogrambatch_id,batch_date,participant_id
							)
							do update set 	
 											-- tprogramparticipant_gid = v_colrec.tprogramparticipant_gid ,
										  	tprogram_id = v_colrec.tprogram_id ,
										  	tprogrambatch_id = v_colrec.tprogrambatch_id ,
										  	batch_date = v_colrec.batch_date ,
											participant_type_code = v_colrec.participant_type_code ,
											participant_subtype_code = v_colrec.participant_subtype_code ,
											-- participant_id =	v_colrec.participant_id ,
											participant_name = v_colrec.participant_name ,
											participant_ll_name = v_colrec.participant_ll_name ,
											fatherhusband_name = v_colrec.fatherhusband_name ,
											fatherhusband_ll_name = v_colrec.fatherhusband_ll_name ,
											shg_id = v_colrec.shg_id ,
											mobile_no = v_colrec.mobile_no ,
											email_id = v_colrec.email_id ,
											gender_code = v_colrec.gender_code ,
											attendance_flag = v_colrec.attendance_flag ,
											status_code = v_colrec.status_code ,
											updated_date =	v_updated_date,
											updated_by	=	v_colrec.updated_by;
					-- email or sms trigger for participant 
					-- Get program level
					select public.fn_get_programlevel(v_colrec.tprogram_id) into v_program_level;
					
					-- Email Trigger 
					if (v_colrec.email_id <> '' or v_colrec.email_id notnull) then
						if v_program_level ::udd_int >= 69 then						
							CALL pr_email_programparticipant(
									v_colrec.tprogram_id,v_colrec.tprogrambatch_id,v_colrec.batch_date,
									v_participant_id,v_colrec.created_by,'System','en_US');
						end if;
					end if;

					-- SMS Trigger
					if (v_colrec.mobile_no <> '0' or v_colrec.mobile_no notnull) then
						if v_program_level ::udd_int < 69 then
							CALL pr_sms_programparticipant(
									v_colrec.tprogram_id,v_colrec.tprogrambatch_id,v_colrec.batch_date,
									v_participant_id,v_colrec.created_by,'System','en_US');
						end if;
					end if;
						
			else
			  if not exists (select * from trng_trn_ttprogramparticipant 
							 where tprogram_id = v_colrec.tprogram_id
							 and tprogrambatch_id = v_colrec.tprogrambatch_id
							 and batch_date = v_colrec.batch_date
							 and participant_name = v_colrec.participant_name)then
							 
					insert into trng_trn_ttprogramparticipant(
													tprogram_id ,
													tprogrambatch_id ,
													batch_date ,
													participant_type_code ,
													participant_subtype_code ,
													participant_id ,
													participant_name ,
													participant_ll_name ,
				  									fatherhusband_name,
				  									fatherhusband_ll_name,
				  									shg_id,
				  									mobile_no,
				  									email_id,
				  									gender_code,
				  									attendance_flag,
													status_code ,
													created_date ,
													created_by	
												)
										values  (										
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.batch_date ,
													v_colrec.participant_type_code ,
													v_colrec.participant_subtype_code ,
													v_colrec.participant_id ,
													v_colrec.participant_name ,
													v_colrec.participant_ll_name ,
													v_colrec.fatherhusband_name ,
													v_colrec.fatherhusband_ll_name ,
													v_colrec.shg_id ,
													v_colrec.mobile_no ,
													v_colrec.email_id ,
													v_colrec.gender_code ,
													v_colrec.attendance_flag ,
													v_colrec.status_code ,
													v_colrec.created_date ,
													v_colrec.created_by 
												);
					-- Get max of gid from participant table
					select max(tprogramparticipant_gid) into v_tprogramparticipant_gid
					from trng_trn_ttprogramparticipant;
					
					v_participant_id :=  'MPRT_' || v_tprogramparticipant_gid;
					
					update 	trng_trn_ttprogramparticipant
					set 	participant_id = v_participant_id
					where 	participant_id = v_colrec.participant_id
					and   	tprogramparticipant_gid = v_tprogramparticipant_gid;	
					
					-- email or sms trigger for participant 
					-- Get program level
					select public.fn_get_programlevel(v_colrec.tprogram_id) into v_program_level;

					-- Email Trigger 
					if (v_colrec.email_id <> '' or v_colrec.email_id notnull) then
						if v_program_level ::udd_int >= 69 then						
							CALL pr_email_programparticipant(
									v_colrec.tprogram_id,v_colrec.tprogrambatch_id,v_colrec.batch_date,
									v_participant_id,v_colrec.created_by,'System','en_US');
						end if;
					end if;

					-- SMS Trigger
					if (v_colrec.mobile_no <> '0' or v_colrec.mobile_no notnull) then
						if v_program_level ::udd_int < 69 then
							CALL pr_sms_programparticipant(
									v_colrec.tprogram_id,v_colrec.tprogrambatch_id,v_colrec.batch_date,
									v_participant_id,v_colrec.created_by,'System','en_US');
						end if;
					end if;
								   
				else
					update trng_trn_ttprogramparticipant
					set    attendance_flag = v_colrec.attendance_flag ,
						   updated_date =	v_updated_date,
						   updated_by	=	v_colrec.updated_by	
					where  tprogramparticipant_gid = v_colrec.tprogramparticipant_gid;
				end if;
							 
			end if;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramtrainer(INOUT _tprogramtrainer_gid udd_int, INOUT _tprogram_id udd_code, INOUT _tprogrambatch_id udd_code, _org_type_code udd_code, INOUT _trngorg_id udd_code, _trainer_id udd_jsonb, _trainer_type_code udd_code, _trainer_flag udd_flag, _confirmation_flag udd_flag, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 11-10-2022
		
		Updated By   :  Satheesh
		Updated Date :  20-03-2023
		
		SP Code : B07PBACUD
		version no : 11
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_colrec record;
	v_trainer_id udd_code := '';
	v_start_date udd_date := null;
	v_end_date udd_date := null;
	v_available_flag udd_flag := '';
	
	v_tprogrambatch_id udd_code := '';
	v_status_code udd_code := '';
	v_execution_status_code udd_code := '';
begin
	
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PTRCUD_006' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_006', _lang_code)  || v_new_line;	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if _mode_flag = 'U' and _tprogramtrainer_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get program execution status
	select execution_status_code into v_execution_status_code
	from   trng_trn_ttprogram
	where  tprogram_id = _tprogram_id;
	
	-- Get batch start and end date
	select start_date, end_date
	into   v_start_date,v_end_date
	from   trng_trn_ttprogrambatch
	where  tprogrambatch_id = _tprogrambatch_id;
	
	-- Get batch id from trainer table
-- 	select tprogrambatch_id into v_tprogrambatch_id
-- 	from   trng_trn_ttprogramtrainer
-- 	where  tprogramtrainer_gid = _tprogramtrainer_gid;
	
	-- Get batch status
	if _tprogrambatch_id <> '' then
		select status_code into v_status_code
		from   trng_trn_ttprogrambatch
		where  tprogrambatch_id = _tprogrambatch_id;
	else 
		select tprogrambatch_id into v_tprogrambatch_id
		from   trng_trn_ttprogramtrainer
		where  tprogramtrainer_gid = _tprogramtrainer_gid;
		
		select status_code into v_status_code
		from   trng_trn_ttprogrambatch
		where  tprogrambatch_id = v_tprogrambatch_id;
	end if;
	
	-- The program status is %s, so the trainer is unable to edit.
/*	if (_mode_flag in ('I','U','D')) and (v_execution_status_code in ('H','P','C','L'))
	then
			v_err_code := v_err_code || 'VB07PTRCUD_005';
			v_err_msg  := v_err_msg ||  format(fn_get_msg('VB07PTRCUD_005', _lang_code),
											   fn_get_masterdesc('QCD_EXEC_STATUS',v_execution_status_code,_lang_code))  || v_new_line;
			raise exception '%',v_err_code || '-' || v_err_msg;
	end if;
*/	
	if _mode_flag <> 'D' then
		-- program id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogram
					   where 	tprogram_id   = _tprogram_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_007', _lang_code)  || v_new_line;	
		end if;

		-- program batch id validation
		if not exists (select 	* 
					   from 	trng_trn_ttprogrambatch
					   where 	tprogrambatch_id   = _tprogrambatch_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_008', _lang_code)  || v_new_line;	
		end if;

		-- organization type code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_TYPE'
					   and 		master_code = _org_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_009', _lang_code)|| v_new_line;	
		end if;

		-- training organization id validation
		if (_trainer_type_code = 'QCD_ORGANIZATION' or _trainer_type_code = 'QCD_GROUP')
			and _trainer_flag = 'N' 
			then
			if not exists (select 	* 
						   from 	trng_mst_ttrainingorg
						   where 	trngorg_id   = _trngorg_id
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB07PTRCUD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_010', _lang_code)  || v_new_line;	
			end if;
		end if;

		-- trainer id validation 
		if _trainer_id <> '[{}]' and _trainer_flag = 'Y' then
		   if _trainer_type_code = 'QCD_INTERNAL' or _trainer_type_code = 'QCD_EXTERNAL' then
				for v_trainer_id in (select * from jsonb_to_recordset(_trainer_id) as b (trainer_id udd_text))
				LOOP
					if not exists (select 	* 
							   from 	trng_mst_ttrainer
							   where 	trainer_id   = v_trainer_id
							   and      status_code <> 'I'
							  ) 
					then
						v_err_code := v_err_code || 'VB07PTRCUD_011' || ',';
						v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_011', _lang_code)  || v_new_line;	
					end if;
				end loop;
			end if;
		end if;
		
		-- trainer id validation against trainer flag
		/*if _trainer_flag = 'Y' and _trainer_id = '[{}]' then
			if not exists (select 	* 
						   from 	trng_mst_ttrainer
						   where 	trainer_id   = _trainer_id
						   and      status_code <> 'I'
						  ) 
			then
				v_err_code := v_err_code || 'VB07PTRCUD_015' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_015', _lang_code)  || v_new_line;	
			end if;
		end if;*/

		-- trainer type code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_TYPE'
					   and 		master_code = _trainer_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_012', _lang_code)|| v_new_line;	
		end if;

		-- trainer flag code validation	
-- 		for v_colrec in select * from jsonb_to_recordset(_trainer_id :: udd_jsonb) as items
-- 											(trainer_id udd_code,
-- 											 trainer_flag udd_flag)	
-- 		loop
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_YES_NO'
						   and 		master_code = _trainer_flag 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB07PTRCUD_001' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_001', _lang_code)|| v_new_line;	
			end if;
			
-- 			select fn_get_tavailableflag(v_colrec.trainer_id, _tprogrambatch_id, v_start_date, v_end_date) 
-- 				into v_available_flag;

-- 			if v_available_flag <> 'Y' 
-- 			then
-- 				v_err_code := v_err_code || 'VB07PTRCUD_003' || ',';
-- 				v_err_msg  := v_err_msg ||  format(fn_get_msg('VB07PTRCUD_003', _lang_code),v_colrec.trainer_id)|| v_new_line;	
-- 			end if;
			
-- 		end loop;

		-- confirmation flag code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _confirmation_flag 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_002', _lang_code)|| v_new_line;	
		end if;

		-- status code validation	
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_013', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB07PTRCUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_014', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	-- This batch status is already completed, So unable to delete the trainer
	if v_status_code = 'C'
	then
			v_err_code := v_err_code || 'VB07PTRCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRCUD_004', _lang_code)|| v_new_line;	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttprogramtrainer
				  where 	tprogramtrainer_gid = _tprogramtrainer_gid
				  and 		status_code  = 'A'
				 ) then
			/*Update 	trng_trn_ttprogramtrainer
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	tprogramtrainer_gid = _tprogramtrainer_gid
			and 	status_code  = 'A';*/
			
			delete from trng_trn_ttprogramtrainer
			where 	tprogramtrainer_gid = _tprogramtrainer_gid
			and 	status_code  = 'A';
			
			v_succ_code := 'SB07PTRCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB07PTRCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PTRCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
			if not exists(select 	* 
					  from		trng_trn_ttprogramtrainer
					  where		tprogramtrainer_gid = _tprogramtrainer_gid
					  and 		status_code  = 'A'
					 ) then
			for v_colrec in select * from jsonb_to_recordset(_trainer_id :: udd_jsonb) as items
											(trainer_id udd_code)
			loop
				
				insert into trng_trn_ttprogramtrainer 
				(
					tprogram_id,
					tprogrambatch_id,
					org_type_code,
					trngorg_id,
					trainer_id,
					trainer_type_code,
					trainer_flag,
					confirmation_flag,
					status_code,
					created_date,
					created_by
				)
				values
				(
					_tprogram_id,
					_tprogrambatch_id,
					_org_type_code,
					_trngorg_id,
					v_colrec.trainer_id,
					_trainer_type_code,
					_trainer_flag,
					_confirmation_flag,
					_status_code,
					now(),
					_user_code
				) returning tprogramtrainer_gid into _tprogramtrainer_gid;
			end loop;
			
			v_succ_code := 'SB07PTRCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB07PTRCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PTRCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttprogramtrainer
				   where	tprogramtrainer_gid = _tprogramtrainer_gid
				   and 		status_code  = 'A'
				   ) then
			update	trng_trn_ttprogramtrainer 
			set 	org_type_code			= _org_type_code,
					trngorg_id				= _trngorg_id,
					trainer_id				= _trainer_id,
					trainer_type_code		= _trainer_type_code,
					trainer_flag			= _trainer_flag,
-- 					confirmation_flag		= _confirmation_flag,
					status_code 			= _status_code,
					updated_by 				= _user_code,
					updated_date 			= now()
			where 	tprogramtrainer_gid    = _tprogramtrainer_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB07PTRCUD_002';
		else
			v_err_code := v_err_code || 'EB07PTRCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB07PTRCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	for v_trainer_id in (select * from jsonb_to_recordset(_trainer_id) as b (trainer_id udd_text))
	LOOP
		if exists (	select  count(*)
					from 	trng_trn_ttprogramtrainer
					where 	tprogram_id = _tprogram_id
					and     tprogrambatch_id = _tprogrambatch_id
					and     trainer_id = v_trainer_id
					and 	status_code <> 'I'
					group	by tprogram_id,tprogrambatch_id,trainer_id,status_code
					having	count('*') > 1) 
		then
			-- trainer id cannot be duplicated
			v_err_code := v_err_code || 'EB07PTRCUD_003';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB07PTRCUD_003', _lang_code));	

			raise exception '%',v_err_code || '-' || v_err_msg;
		else
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
		end if;
	end loop;

	
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_tprogramtrainerjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Mohan S
		Created Date : 19-12-2022
		
		Updated By   : Mangai
		Updated Date : 17-03-2023
		
		SP Code      : B07PTNCUX
		Version No   : 2
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											tprogramtrainer_gid udd_int,
											tprogram_id udd_code,
											tprogrambatch_id udd_code,
											org_type_code udd_code,
											trngorg_id udd_code,
											trainer_id udd_code,
											trainer_type_code udd_code,
											trainer_flag udd_flag,
											confirmation_flag udd_flag,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_trn_ttprogramtrainer(
			  										--tprogramtrainer_gid ,
													tprogram_id ,
													tprogrambatch_id ,
													org_type_code ,
													trngorg_id ,
													trainer_id ,
													trainer_type_code ,
													trainer_flag ,
													confirmation_flag ,
													status_code ,
													created_date ,
													created_by	
												)
										values  (										
													--v_colrec.tprogramtrainer_gid ,
													v_colrec.tprogram_id ,
													v_colrec.tprogrambatch_id ,
													v_colrec.org_type_code ,
													v_colrec.trngorg_id ,
													v_colrec.trainer_id ,
													v_colrec.trainer_type_code ,
													v_colrec.trainer_flag ,
													v_colrec.confirmation_flag ,
													v_colrec.status_code ,
													v_colrec.created_date ,
													v_colrec.created_by 
												)
										
				on conflict (
								tprogram_id,tprogrambatch_id,trainer_id
							)
							do update set 	
											--tprogramtrainer_gid = v_colrec.tprogramtrainer_gid ,
										  	tprogram_id = v_colrec.tprogram_id ,
										  	tprogrambatch_id = v_colrec.tprogrambatch_id ,
											org_type_code = v_colrec.org_type_code ,
											trngorg_id = v_colrec.trngorg_id ,
											trainer_id =	v_colrec.trainer_id ,
											trainer_type_code = v_colrec.trainer_type_code ,
											trainer_flag = v_colrec.trainer_flag ,
											confirmation_flag = v_colrec.confirmation_flag ,
											status_code = v_colrec.status_code ,
											updated_date =	v_updated_date,
											updated_by	=	v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainer(INOUT _trainer_gid udd_int, INOUT _trngorg_id udd_code, _trngorg_type_code udd_code, INOUT _trainer_id udd_code, _trainer_name udd_desc, _trainer_ll_name udd_desc, _trainer_type_code udd_code, _trainer_level_code udd_code, _mobile_no udd_mobile, _email_id udd_text, _gender_code udd_code, _resource_type_code udd_code, _trainer_qualification udd_text, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _photo_file_name udd_desc, _photo_file_path udd_text, _status_code udd_code, _deactivation_reason_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 22-09-2022
		
		Updated By   : Satheesh
		Updated Date : 21-03-2023
		
		SP Code : B05TRACUD
		version no : 09
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_note_gid udd_int := 0;
	v_vertical_code udd_code := '';
	v_trainer_id udd_code := '';
	v_trainer_name udd_desc := '';
	v_trainer_level_code udd_code := '';
	v_count_geo udd_int := 0;
begin 	
		-- Validation
		if _mode_flag = 'U' and _trainer_gid = 0 then
			_mode_flag := 'I';
		end if;
	
		if _deactivation_reason_code = '' then
			_deactivation_reason_code = null;
		end if;
		
		--Get trainer id against trainer gid
		select trainer_id,trainer_name,trainer_level_code
		into  v_trainer_id,v_trainer_name,v_trainer_level_code
		from  trng_mst_ttrainer
		where trainer_gid = _trainer_gid
		and status_code <> 'I';
		
		-- Record check in trainer geo against trainer id
		select count(*) into v_count_geo
		from   trng_mst_ttrainergeo
		where  trainer_id = _trainer_id
		and    status_code <> 'I';
		
		-- Get vertical code against user code
		select fn_get_userverticalcode(_user_code) 
		into 	v_vertical_code;
		
		-- Before Edit or Delete whether the trainer is mapped with some other trng program validation
	   if _mode_flag = 'U' or _mode_flag = 'D' then
			if exists (select '*' from trng_trn_ttprogramtrainer as a
					   inner join trng_trn_ttprogram as b
					   on a.tprogram_id = b.tprogram_id 
					   and b.status_code = 'A' 
					   and b.execution_status_code in ('H','P')
					   and b.end_date >= now() :: udd_date
					   where a.trainer_id = v_trainer_id
					   and a.confirmation_flag in ('Y','N') 
					   and a.status_code = 'A') then
					v_err_code := v_err_code || 'VB05TRACUD_003' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_003', _lang_code) || v_new_line;	
			end if;
		end if;

		if _mode_flag = 'I' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_VERTICAL'
						   and 		master_code = v_vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB05TRACUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_004', _lang_code) || v_new_line;	
			end if;
		end if;
	
		if _mode_flag <> 'D' then
			-- orgn id value assigning area
			if _trngorg_type_code = 'QCD_INTERNAL' then
						_trngorg_id := 'TOR_INTERNAL';
				else if _trngorg_type_code = 'QCD_EXTERNAL' then
						_trngorg_id := 'TOR_EXTERNAL';
			end if;
		end if;
		
	   	-- training org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id   = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_006', _lang_code)  || v_new_line;	
		end if;

		-- org type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_TYPE'
					   and 		master_code = _trngorg_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_005', _lang_code)|| v_new_line;	
		end if;

		-- Trainer name validation
		if _trainer_name = '' then
			v_err_code := v_err_code || 'VB05TRACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_001', _lang_code) || v_new_line;
		end if;

		-- Trainer Type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_TYPE'
					   and 		master_code = _trainer_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_007', _lang_code)|| v_new_line;	
		end if;

		-- Trainer Level validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_LEVEL'
					   and 		master_code = _trainer_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_008', _lang_code)|| v_new_line;	
		end if;

		-- Gender validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_GENDER'
					   and 		master_code = _gender_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_009', _lang_code)|| v_new_line;	
		end if;

		-- Resource Type validation
		if _resource_type_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster
						   where 	parent_code = 'QCD_RESOURCE_TYPE'
						   and 		master_code = _resource_type_code 
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB05TRACUD_010' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_010', _lang_code)|| v_new_line;	
			end if;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_011', _lang_code)|| v_new_line;	
		end if;
		
		-- validity from validation
		if _validity_from isnull
		then
				v_err_code := v_err_code || 'VB05TRACUD_012' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_012', _lang_code) || v_new_line;	
		end if;
		
		-- Validity to or indefinite flag validation
		if _validity_from IS NOT NULL then
			if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
				_validity_to := null;
			end if;
			if _validity_to isnull and _indefinite_flag = 'N' then
				v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
			end if;
		end if;

		-- Validitiy to validation
		if  _validity_to < _validity_from then
			v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
		end if;
		
		-- deactivation reason code validation
-- 		if _deactivation_reason_code <> '' then
-- 			if not exists (select 	* 
-- 						   from 	core_mst_tmaster 
-- 						   where 	parent_code = 'QCD_TRAINER_REJ'
-- 						   and 		master_code = _deactivation_reason_code
-- 						   and 		status_code = 'A'
-- 						  ) then
-- 				v_err_code := v_err_code || 'VB05TRACUD_018' || ',';
-- 				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_018', _lang_code) || v_new_line;	
-- 			end if;
-- 		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TRACUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_013', _lang_code)|| v_new_line;	
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_mst_ttrainer
		where	trainer_gid = _trainer_gid;

		v_timestamp	:= coalesce(v_timestamp, '');

		IF (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB05TRACUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_014', _lang_code) || v_new_line;	
		end if;
		
		--Trainer level updation validation
		if _mode_flag = 'U' then
			if v_trainer_level_code <> _trainer_level_code and v_count_geo > 0
			then
				v_err_code := v_err_code || 'VB05TRACUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_002', _lang_code) || v_new_line;	
			end if;
		end if;
	end if;
	
	-- deactivation validation
-- 	if _mode_flag = 'D' and _trainer_gid <> 0  and _deactivation_reason_code isnull then
-- 		_deactivation_reason_code := 'QCD_NA';
-- 	end if;
	
	if _mode_flag = 'D' and _trainer_gid <> 0 then
		if _deactivation_reason_code isnull 
			then
				v_err_code := v_err_code || 'VB05TRACUD_015' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_015', _lang_code) || v_new_line;
		else
			if _deactivation_reason_code notnull then
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_DEA_REASON'
							   and 		master_code = _deactivation_reason_code
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB05TRACUD_016' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_016', _lang_code) || v_new_line;	
				end if;
			end if;
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainer
				  where 	trainer_gid = _trainer_gid
				  and 		status_code = 'A'
				 ) then
			
			-- Insert in note table select * from trng_mst_tnote
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRAINER',v_trainer_id,null,'I','',
									_deactivation_reason_code,'',_user_code,_role_code,_lang_code, 
									'I', _succ_msg ) ;
								
			Update 	trng_mst_ttrainer
			set		status_code   = 'I',
					deactivation_reason_code = _deactivation_reason_code,
					updated_by    = _user_code,
					updated_date  = now(),
					row_timestamp = now()
			where 	trainer_gid   = _trainer_gid
			and 	status_code   = 'A';
			
			v_succ_code := 'VB05TRACUD_017';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TRACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TRACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainer
					  where		trainer_gid = _trainer_gid
					  and 		status_code = 'A'
					 ) then
			insert into trng_mst_ttrainer 
			(
				trngorg_id,
				trngorg_type_code,
				trainer_id,
				trainer_name,
				trainer_ll_name,
				trainer_type_code,
				trainer_level_code,
				mobile_no,
				email_id,
				gender_code,
				resource_type_code,
				trainer_qualification,
				validity_from,
				validity_to,
				indefinite_flag,
				photo_file_name,
				photo_file_path,
				status_code,
				deactivation_reason_code,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_trngorg_id,
				_trngorg_type_code,
				_trainer_id,
				_trainer_name,
				_trainer_ll_name,
				_trainer_type_code,
				_trainer_level_code,
				_mobile_no,
				_email_id,
				_gender_code,
				_resource_type_code,
				_trainer_qualification,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				_photo_file_name,
				_photo_file_path,
				_status_code,
				_deactivation_reason_code,
				now(),
				_user_code,
				now()
			) returning trainer_gid into _trainer_gid;
			
			_trainer_id := 'TRA_' ||  _trainer_gid;
			
			-- Set Trainer id 
			update trng_mst_ttrainer 
			set trainer_id    = _trainer_id
			where trainer_gid = _trainer_gid;
			
			-- Trainer domain table insert
			insert into trng_mst_ttrainerdomain (trainer_id,
												 vertical_code,
												 subvertical_jsonb,
												 area_of_experience,
												 yrs_of_experience,
												 status_code,
												 created_date,
												 created_by)
										   values(_trainer_id,
											      v_vertical_code,
											      '[{}]',
												  '-',
												  0,
												  'A',
												  now(),
												  _user_code);
			
			/*-- Insert in note table -- 
			CALL public.pr_iud_note( 
									v_note_gid, 
									'QCD_TRAINER', 
									_trainer_id, 
									null,
									_status_code,
									'',
									'',
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;*/
						
			v_succ_code := 'SB05TRACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TRACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TRACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainer
				   where	trainer_gid = _trainer_gid
				   and 		status_code = 'A'
				   ) then
			update	trng_mst_ttrainer 
			set 	trngorg_type_code 	= _trngorg_type_code,
					trainer_name 		= _trainer_name,
					trainer_ll_name 	= _trainer_ll_name,
					trainer_type_code 	= _trainer_type_code,
					trainer_level_code 	= _trainer_level_code,
					mobile_no 			= _mobile_no,
					email_id 			= _email_id,
					gender_code 		= _gender_code,
					resource_type_code 	= _resource_type_code,
					trainer_qualification = _trainer_qualification,
					validity_from 		= _validity_from,
					validity_to 		= _validity_to,
					indefinite_flag 	= _indefinite_flag,
					photo_file_name 	= _photo_file_name,
					photo_file_path 	= _photo_file_path,
					status_code 		= _status_code,
					deactivation_reason_code = _deactivation_reason_code,
					updated_by 			= _user_code,
					updated_date 		= now(),
					row_timestamp 		= now()
			where 	trainer_gid 		= _trainer_gid
			and 	status_code 		= 'A';
			
			/*-- Insert in note table -- 
			CALL public.pr_iud_note( 
									v_note_gid, 
									'QCD_TRAINER', 
									_trainer_id, 
									null,
									_status_code,
									'',
									'',
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;*/
			
			v_succ_code := 'SB05TRACUD_002';
		else
			v_err_code := v_err_code || 'EB05TRACUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TRACUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainer
			    where 	trngorg_id = _trngorg_id 
			    and     trainer_name = _trainer_name
			    and     mobile_no = _mobile_no
			    and		trngorg_type_code = _trngorg_type_code
			    and 	status_code <> 'I'
				group	by trngorg_id,trainer_name,trngorg_type_code,mobile_no
				having	count('*') > 1) 
	then
		-- Trainer name cannot be duplicated
		v_err_code := v_err_code || 'EB05TRACUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB05TRACUD_001', _lang_code),_trainer_name);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || FORMAT(fn_get_msg(v_succ_code,_lang_code),_trainer_id,_trainer_name);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_traineraddr(INOUT _traineraddr_gid udd_int, INOUT _trainer_id udd_code, _addr_line udd_text, _addr_pincode udd_pincode, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 22-09-2022
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		SP Code : B05TADCUD
		version no : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_village_id udd_int := 0;
	
begin 	
	-- Validation
	if _mode_flag = 'U' and _traineraddr_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- get state, district, block, panchayat and village id
	v_state_id := (select fn_get_stateid(_state_code));
	v_district_id := (select fn_get_districtid(_district_code));
	v_block_id := (select fn_get_blockid(_block_code));
	v_panchayat_id := (select fn_get_panchayatid(_grampanchayat_code));
	v_village_id := (select fn_get_villageid(_village_code));
	
	if _mode_flag <> 'D' then
		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TADCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_004', _lang_code)  || v_new_line;	
		end if;

		-- address line validation
		if _addr_line = '' then
			v_err_code := v_err_code || 'VB05TADCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_001', _lang_code) || v_new_line;
		end if;
		
		-- address pincode validation
		if _addr_pincode <> '' then 
			if (select length(_addr_pincode)) > 6
			then
				v_err_code := v_err_code || 'VB05TADCUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_002', _lang_code) || v_new_line;
			end if;
		end if;
		
		-- state code validation
		-- comment due to national level user control 
/*		if _state_code = ''
		then
			v_err_code := v_err_code || 'VB05TADCUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_013', _lang_code) || v_new_line;
		end if;
*/		
		-- state code validation
		if _state_code <> '' then
			if not exists (select 	* 
						   from 	state_master
						   where    state_code = _state_code
						   and      is_active = 'true')
			then
				v_err_code := v_err_code || 'VB05TADCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_005', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- district code validation
		if _district_code <> ''  then
			if not exists (select 	* 
						   from 	district_master
						   where    district_code = _district_code
						   and      state_id      = v_state_id
						   and      is_active     = 'true')
			then
				v_err_code := v_err_code || 'VB05TADCUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_006', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- block code validation
		if _block_code <> ''  then
			if not exists (select 	* 
						   from 	block_master
						   where    block_code   = _block_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB05TADCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_007', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- panchayat code validation
		if _grampanchayat_code <> ''  
		then
			if not exists (select 	* 
						   from 	panchayat_master 
						   where    panchayat_code = _grampanchayat_code
						   and      state_id       = v_state_id
						   and      district_id    = v_district_id
						   and      block_id       = v_block_id
						   and      is_active      = 'true')
			then
				v_err_code := v_err_code || 'VB05TADCUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_008', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- village code validation
		if _village_code <> ''
		then
			if not exists (select 	* 
						   from 	village_master 
						   where    village_code = _village_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      block_id     = v_block_id
						   and      panchayat_id = v_panchayat_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB05TADCUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_009', _lang_code) || v_new_line;
			end if;
		end if ;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TADCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_010', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TADCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TADCUD_011', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttraineraddr
				  where 	traineraddr_gid = _traineraddr_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttraineraddr
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	traineraddr_gid = _traineraddr_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB05TADCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TADCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TADCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttraineraddr
					  where		traineraddr_gid = _traineraddr_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_ttraineraddr 
			(
				trainer_id,
				addr_line,
				addr_pincode,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				village_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				_addr_line,
				_addr_pincode,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_village_code,
				_status_code,
				now(),
				_user_code
			) returning traineraddr_gid into _traineraddr_gid;
							
			v_succ_code := 'SB05TADCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TADCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TADCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttraineraddr
				   where	traineraddr_gid = _traineraddr_gid
				   and 		status_code     = 'A'
				   ) then
			update	trng_mst_ttraineraddr 
			set 	addr_line			= _addr_line,
					addr_pincode		= _addr_pincode,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					village_code		= _village_code,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	traineraddr_gid 	= _traineraddr_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB05TADCUD_002';
		else
			v_err_code := v_err_code || 'EB05TADCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TADCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttraineraddr
			    where 	trainer_id = _trainer_id
			    -- and     addr_line  = _addr_line (Cmd by Mohan - review done on 10-11-2022 instruction came from kannappan)
			    and 	status_code <> 'I'
				group	by trainer_id,addr_line
				having	count('*') > 1) 
	then
		-- duplicated validation
		v_err_code := v_err_code || 'VB05TADCUD_012';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB05TADCUD_012', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainerbank(INOUT _trainerbank_gid udd_int, INOUT _trainer_id udd_code, _bank_code udd_code, _branch_name udd_desc, _ifsc_code udd_code, _acc_type_code udd_code, _acc_no udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 21-09-2022
		SP Code : B05TOBCUD
		
		Updated By  : Satheesh
		Updated Date : 21-03-2023
		
		version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_bool udd_boolean := false;
begin 	
	-- Validation
	if _mode_flag = 'U' and _trainerbank_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_004', _lang_code)  || v_new_line;	
		end if;

		-- bank code validation
		if not exists (select 	* 
					   from 	bank_master 
					   where 	bank_code   = _bank_code
					   and      is_active   = '1'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_005', _lang_code)  || v_new_line;	
		end if;

		-- IFSC code validation
		if not exists (select 	* 
					   from 	bank_branch_master
					   where 	bank_code = _bank_code
					   and      bank_branch_name = _branch_name
					   and      ifsc_code   = _ifsc_code
					   and      is_active = 'true'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_006', _lang_code)  || v_new_line;	
		end if;
	
		-- branch name validation
		if not exists (select 	* 
					   from 	bank_branch_master
					   where 	bank_code = _bank_code
					   and      bank_branch_name = _branch_name
					   and      is_active = 'true'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_007', _lang_code)  || v_new_line;	
		end if;
					   
		-- branch name validation
		if _branch_name = '' then
			v_err_code := v_err_code || 'VB05TBACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_001', _lang_code) || v_new_line;
		end if;

		-- bank account type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_BANKACC_TYPE'
					   and 		master_code = _acc_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_008', _lang_code)|| v_new_line;	
		end if;

		-- account number validation
		if _acc_no = ''
		then
			v_err_code := v_err_code || 'VB05TBACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_002', _lang_code)|| v_new_line;	
		end if;
		
		v_bool := (select fn_get_bankacclength(_bank_code, _acc_no));
		if v_bool = 'f' then
			v_err_code := v_err_code || 'VB05TBACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_003', _lang_code) || v_new_line;
		end if;
		
		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_009', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TBACUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_010', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainerbank
				  where 	trainerbank_gid = _trainerbank_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttrainerbank
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trainerbank_gid = _trainerbank_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB05TBACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TBACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TBACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainerbank
					  where		trainerbank_gid = _trainerbank_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_ttrainerbank 
			(
				trainer_id,
				bank_code,
				branch_name,
				ifsc_code,
				acc_type_code,
				acc_no,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				_bank_code,
				_branch_name,
				_ifsc_code,
				_acc_type_code,
				_acc_no,
				_status_code,
				now(),
				_user_code
			) returning trainerbank_gid into _trainerbank_gid;
							
			v_succ_code := 'SB05TBACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TBACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TBACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainerbank
				   where	trainerbank_gid = _trainerbank_gid
				   and 		status_code     = 'A'
				   ) then
			update	trng_mst_ttrainerbank 
			set 	bank_code		= _bank_code,
					branch_name		= _branch_name,
					ifsc_code		= _ifsc_code,
					acc_type_code	= _acc_type_code,
					acc_no			= _acc_no,
					status_code 	= _status_code,
					updated_by 		= _user_code,
					updated_date 	= now()
			where 	trainerbank_gid = _trainerbank_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB05TBACUD_002';
		else
			v_err_code := v_err_code || 'EB05TBACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TBACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainerbank
			    where 	trainer_id = _trainer_id
			    and     bank_code  = _bank_code
			    and     acc_no     = _acc_no
			    and 	status_code <> 'I'
				group	by trainer_id,bank_code,acc_no
				having	count('*') > 1) 
	then
		-- duplicated validation
		v_err_code := v_err_code || 'VB05TBACUD_011';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB05TBACUD_011', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainerdomain(INOUT _trainerdomain_gid udd_int, INOUT _trainer_id udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _area_of_experience udd_text, _yrs_of_experience udd_decimal, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 22-09-2022
		
		Updated By 	 : Satheesh
		Updatde date : 21-03-2023
		
		SP Code : B05TDOCUD
		Version No : 06
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_trainer_id udd_code := '';
	v_colrec udd_code;
begin 	
	-- Validation
	if _mode_flag = 'U' and _trainerdomain_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- Get trainer id against trainer gid
	select trainer_id into v_trainer_id
	from   trng_mst_ttrainerdomain
	where  trainerdomain_gid = _trainerdomain_gid;
	
	-- Before Edit or Delete whether the trainer is mapped with some other trng program validation
	if _mode_flag = 'U' or _mode_flag = 'D' then
		if exists (select '*' from trng_trn_ttprogramtrainer as a
				   inner join trng_trn_ttprogram as b
				   on a.tprogram_id = b.tprogram_id 
				   and b.status_code = 'A' 
				   and b.execution_status_code in ('H','P')
				   and b.end_date >= now() :: udd_date
				   where a.trainer_id = v_trainer_id
				   and a.confirmation_flag = 'Y' 
				   and a.status_code = 'A') then
				v_err_code := v_err_code || 'VB05TRACUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TRACUD_003', _lang_code) || v_new_line;	
		end if;
	end if;
	
	if _mode_flag <> 'D' then
		-- training id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB05TDOCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- vertical code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = _vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TDOCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_004', _lang_code)|| v_new_line;	
		end if;

		-- sub verical validation
		for v_colrec in (select * from jsonb_to_recordset(_subvertical_jsonb) as b (subvertical udd_code))
		LOOP 
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_SUBVERTICAL'
						   and 		master_code = v_colrec
						   and      depend_code = _vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB05TDOCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_005', _lang_code) || v_new_line;
			end if;
		end loop;

		-- area of experience validation
		if _area_of_experience = ''
		then
			v_err_code := v_err_code || 'VB05TDOCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_001', _lang_code) || v_new_line;
		end if;

		-- years of experience validation
		if _yrs_of_experience < 0
		then
			v_err_code := v_err_code || 'VB05TDOCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_002', _lang_code) || v_new_line;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TDOCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_006', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TDOCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_007', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainerdomain
				  where 	trainerdomain_gid  = _trainerdomain_gid
				  and 		status_code     = 'A'
				 ) then
				 
		   if 	 (select  count(*) 
				  from 	  trng_mst_ttrainerdomain
				  where   trainer_id = _trainer_id 
				  and 	  status_code = 'A') > 1 then
					Update 	trng_mst_ttrainerdomain
					set		status_code     = 'I',
							updated_by      = _user_code,
							updated_date    = now()
					where 	trainerdomain_gid  = _trainerdomain_gid
					and 	status_code        = 'A';
					
					v_succ_code := 'SB05TDOCUD_003';
			else
				-- Minimum one record in domain
				v_err_code := v_err_code || 'VB05TDOCUD_008';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TDOCUD_008', _lang_code) || v_new_line;	
				
				RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
			end if;
			
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TDOCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TDOCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainerdomain
					  where		trainerdomain_gid = _trainerdomain_gid
					  and 		status_code       = 'A'
					 ) then
			insert into trng_mst_ttrainerdomain 
			(
				trainer_id,
				vertical_code,
				subvertical_jsonb,
				area_of_experience,
				yrs_of_experience,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				_vertical_code,
				_subvertical_jsonb,
				_area_of_experience,
				_yrs_of_experience,
				_status_code,
				now(),
				_user_code
			) returning trainerdomain_gid into _trainerdomain_gid;
							
			v_succ_code := 'SB05TDOCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TDOCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TDOCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainerdomain
				   where	trainerdomain_gid = _trainerdomain_gid
				   and 		status_code    	  = 'A'
				   ) then
			update	trng_mst_ttrainerdomain 
			set 	vertical_code		= _vertical_code,
					subvertical_jsonb	= _subvertical_jsonb,
					area_of_experience	= _area_of_experience,
					yrs_of_experience	= _yrs_of_experience,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trainerdomain_gid 	= _trainerdomain_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB05TDOCUD_002';
		else
			v_err_code := v_err_code || 'EB05TDOCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TDOCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)   
				from 	trng_mst_ttrainerdomain
			    where 	trainer_id		  = _trainer_id
			    and     vertical_code 	  = _vertical_code
			    and     subvertical_jsonb = _subvertical_jsonb
			    and 	status_code <> 'I'
				group	by trainer_id,vertical_code,subvertical_jsonb,status_code
				having	count('*') > 1) 
	then
		-- trainer id, vertical and subvertical cannot be duplicated
		v_err_code := v_err_code || 'EB05TDOCUD_001';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB05TDOCUD_001', _lang_code),_trainer_id,_vertical_code,_subvertical_jsonb);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainerdomainjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 04-01-2023
		SP Code      : B05TDOCUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											trainerdomain_gid udd_int,
											trainer_id udd_code,
											vertical_code udd_code,
											subvertical_jsonb udd_jsonb,
											area_of_experience udd_text,
											yrs_of_experience udd_decimal,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_mst_ttrainerdomain(
			  										trainerdomain_gid,
													trainer_id,
													vertical_code,
													subvertical_jsonb,
													area_of_experience,
													yrs_of_experience,
				                                    status_code,
                                                    created_date,
													created_by
												)
										values  (										
													v_colrec.trainerdomain_gid,
													v_colrec.trainer_id,
													v_colrec.vertical_code,
													v_colrec.subvertical_jsonb,
													v_colrec.area_of_experience,
													v_colrec.yrs_of_experience,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by
												)
										
				on conflict (
								trainerdomain_gid
							)
							do update set 	trainerdomain_gid = v_colrec.trainerdomain_gid,
											trainer_id = v_colrec.trainer_id,
											vertical_code = v_colrec.vertical_code,
											subvertical_jsonb = v_colrec.subvertical_jsonb,
											area_of_experience = v_colrec.area_of_experience,
											yrs_of_experience = v_colrec.yrs_of_experience,											
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by;							
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainergeo(INOUT _trainergeo_gid udd_int, INOUT _trainer_id udd_code, _trainer_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 19-09-2022
		SP Code : B04TOGCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_trainer_level_code udd_code := ''; 
	
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_village_id udd_int := 0;
begin 	
	-- Validation
	if _mode_flag = 'U' and _trainergeo_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- get state, district, block, panchayat and village id
	v_state_id := (select fn_get_stateid(_state_code));
	v_district_id := (select fn_get_districtid(_district_code));
	v_block_id := (select fn_get_blockid(_block_code));
	v_panchayat_id := (select fn_get_panchayatid(_grampanchayat_code));
-- 	v_village_id := (select fn_get_villageid(_village_code));
	
	if _mode_flag <> 'D' then
		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGECUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_001', _lang_code)  || v_new_line;	
		end if;

		-- org level validation
		/*if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_LEVEL'
					   and 		master_code = _trainer_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGECUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_013', _lang_code)|| v_new_line;	
		end if;*/
		
		-- get trainer level code -- 
		select fn_get_trainerlevel(_trainer_id) into v_trainer_level_code;
		
		/*if v_trainer_level_code = 99 then
			if _state_code <> 'QCD_ALL' then
				v_err_code := v_err_code || 'VB05TGECUD_014' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_014', _lang_code) || v_new_line;
			end if;
		end if;*/
		
		-- state level validation
		if v_trainer_level_code = '89' then
			if _state_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_002', _lang_code) || v_new_line;
			end if;
		end if;
		
		-- district level validation
		if v_trainer_level_code = '79' then
			if _state_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_002', _lang_code) || v_new_line;
			end if;
			if _district_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_003', _lang_code) || v_new_line;
			end if;
		end if;
		
		-- block level validation
		if v_trainer_level_code = '69' then
			if _state_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_002', _lang_code) || v_new_line;
			end if;
			if _district_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_003', _lang_code) || v_new_line;
			end if;
			if _block_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_004', _lang_code) || v_new_line;
			end if;
		end if;
		
		-- panchayat level validation
		if v_trainer_level_code = '59' then
			if _state_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_002', _lang_code) || v_new_line;
			end if;
			if _district_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_003', _lang_code) || v_new_line;
			end if;
			if _block_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_004', _lang_code) || v_new_line;
			end if;
			if _grampanchayat_code = '' then
				v_err_code := v_err_code || 'VB05TGECUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_005', _lang_code) || v_new_line;
			end if;
		end if;

		-- state code validation
		if _state_code <> '' then
			if not exists (select 	* 
						   from 	state_master
						   where    state_code = _state_code
						   and      is_active = true)
			then
				v_err_code := v_err_code || 'VB05TGECUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_006', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- district code validation
		if _district_code <> ''  then
			if not exists (select 	* 
						   from 	district_master
						   where    district_code = _district_code
						   and      state_id      = v_state_id
						   and      is_active     = true)
			then
				v_err_code := v_err_code || 'VB05TGECUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_007', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- block code validation
		if _block_code <> ''  then
			if not exists (select 	* 
						   from 	block_master
						   where    block_code   = _block_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      is_active    = true)
			then
				v_err_code := v_err_code || 'VB05TGECUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_008', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- panchayat code validation
		if _grampanchayat_code <> ''  
		then
			if not exists (select 	* 
						   from 	panchayat_master 
						   where    panchayat_code = _grampanchayat_code
						   and      state_id       = v_state_id
						   and      district_id    = v_district_id
						   and      block_id       = v_block_id
						   and      is_active      = true)
			then
				v_err_code := v_err_code || 'VB05TGECUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_009', _lang_code) || v_new_line;
			end if;
		end if ;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGECUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_010', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGECUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_011', _lang_code)|| v_new_line;	
		end if;
	end if;	

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainergeo
				  where 	trainergeo_gid  = _trainergeo_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttrainergeo
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trainergeo_gid  = _trainergeo_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB05TGECUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TGECUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TGECUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainergeo
					  where		trainergeo_gid = _trainergeo_gid
					  and 		status_code    = 'A'
					 ) then
			insert into trng_mst_ttrainergeo 
			(
				trainer_id,
				trainer_level_code,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				v_trainer_level_code,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_status_code,
				now(),
				_user_code
			) returning trainergeo_gid into _trainergeo_gid;
							
			v_succ_code := 'SB05TGECUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TGECUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TGECUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainergeo
				   where	trainergeo_gid = _trainergeo_gid
				   and 		status_code    = 'A'
				   ) then
			update	trng_mst_ttrainergeo 
			set 	trainer_level_code	= v_trainer_level_code,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trainergeo_gid 		= _trainergeo_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB05TGECUD_002';
		else
			v_err_code := v_err_code || 'EB05TGECUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TGECUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainergeo
			    where 	trainer_id = _trainer_id
			    and     state_code = _state_code
			    and     district_code = _district_code
			    and     block_code = _block_code
			    and     grampanchayat_code = _grampanchayat_code
			    and 	status_code <> 'I'
				group	by trainer_id,state_code,district_code,block_code,grampanchayat_code
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB05TGECUD_012';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGECUD_012', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainergroup(INOUT _trainergroup_gid udd_int, _trngorg_type_code udd_code, INOUT _trngorg_id udd_code, INOUT _trainer_id udd_code, _trainer_type_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 23-09-2022
		SP Code : B05TGRCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 	
	-- Validation
	if _mode_flag = 'U' and _trainergroup_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- training org type code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_TYPE'
					   and 		master_code = _trngorg_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGRCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_001', _lang_code)|| v_new_line;	
		end if;	

		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGRCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_002', _lang_code)  || v_new_line;	
		end if;

		-- trainer org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id  = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGRCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- trainer type code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_TRAINER_TYPE'
					   and 		master_code = _trainer_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGRCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_004', _lang_code)|| v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGRCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_005', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TGRCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_006', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainergroup
				  where 	trainergroup_gid = _trainergroup_gid
				  and 		status_code     = 'A'
				 ) then
			delete from trng_mst_ttrainergroup
			where trainergroup_gid = _trainergroup_gid
			and 	status_code      = 'A';
			/*Update 	trng_mst_ttrainergroup
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trainergroup_gid = _trainergroup_gid
			and 	status_code      = 'A';*/
			
			v_succ_code := 'SB05TGRCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TGRCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TGRCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainergroup
					  where		trainergroup_gid = _trainergroup_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_ttrainergroup 
			(
				trngorg_type_code,
				trngorg_id,
				trainer_id,
				trainer_type_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trngorg_type_code,
				_trngorg_id,
				_trainer_id,
				_trainer_type_code,
				_status_code,
				now(),
				_user_code
			) returning trainergroup_gid into _trainergroup_gid;
							
			v_succ_code := 'SB05TGRCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TGRCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TGRCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainergroup
				   where	trainergroup_gid = _trainergroup_gid
				   and 		status_code      = 'A'
				   ) then
			update	trng_mst_ttrainergroup 
			set 	trngorg_type_code = _trngorg_type_code,
					trngorg_id		  = _trngorg_id,
					trainer_id		  = _trainer_id,
					trainer_type_code = _trainer_type_code,
					status_code 	  = _status_code,
					updated_by 		  = _user_code,
					updated_date 	  = now()
			where 	trainergroup_gid = _trainergroup_gid
			and 	status_code 	 = 'A';
			
			v_succ_code := 'SB05TGRCUD_002';
		else
			v_err_code := v_err_code || 'EB05TGRCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TGRCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainergroup
			    where 	trngorg_id = _trngorg_id
			    and     trainer_id = _trainer_id
			    and 	status_code <> 'I'
				group	by trngorg_id,trainer_id
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB05TGRCUD_007';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB05TGRCUD_007', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainerjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 26-12-2022
		SP Code      : B05TRACUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											trainer_gid udd_int,
											trngorg_id udd_code,
											trngorg_type_code udd_code,
											trainer_id udd_code,
											trainer_name udd_desc,
											trainer_ll_name udd_desc,
											trainer_type_code udd_code,
											trainer_level_code udd_code,
											mobile_no udd_mobile,
											email_id udd_text,
											gender_code udd_code,
											resource_type_code udd_code,
											trainer_qualification udd_text,
											validity_from udd_date,
											validity_to udd_date,
											indefinite_flag udd_flag,
											photo_file_name udd_desc,
											photo_file_path udd_text,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code,
											row_timestamp udd_datetime,
											cadre_id udd_code,
											deactivation_reason_code udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_mst_ttrainer(
			  										trainer_gid,
													trngorg_id,
													trngorg_type_code,
													trainer_id,
													trainer_name,
													trainer_ll_name,
													trainer_type_code,
				                                    trainer_level_code,
													mobile_no,
				                                    email_id,
				                                    gender_code,
				                                    resource_type_code,
                                                    trainer_qualification,   				  
				                                    validity_from,
				                                    validity_to,
				                                    indefinite_flag,
				                                    photo_file_name,
				                                    photo_file_path,
				                                    status_code,
                                                    created_date,
													created_by,
				                                    row_timestamp,                                 
				                                    cadre_id,
				                                    deactivation_reason_code
												)
										values  (										
													v_colrec.trainer_gid,
													v_colrec.trngorg_id,
													v_colrec.trngorg_type_code,
													v_colrec.trainer_id,
													v_colrec.trainer_name,
													v_colrec.trainer_ll_name,
													v_colrec.trainer_type_code,
											        v_colrec.trainer_level_code,
													v_colrec.mobile_no,
											        v_colrec.email_id,
											        v_colrec.gender_code,
											        v_colrec.resource_type_code,
											        v_colrec.trainer_qualification,
											        v_colrec.validity_from,
											        v_colrec.validity_to,
											        v_colrec.indefinite_flag,
											        v_colrec.photo_file_name,
											        v_colrec.photo_file_path,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by,
											        v_colrec.row_timestamp,
											        v_colrec.cadre_id,
											        v_colrec.deactivation_reason_code
												)
										
				on conflict (
								trainer_gid
							)
							do update set 	trainer_gid = v_colrec.trainer_gid,
											trngorg_id = v_colrec.trngorg_id,
											trngorg_type_code = v_colrec.trngorg_type_code,
											trainer_id = v_colrec.trainer_id,
											trainer_name = v_colrec.trainer_name,
											trainer_ll_name = v_colrec.trainer_ll_name,
											trainer_type_code = v_colrec.trainer_type_code,
											trainer_level_code = v_colrec.trainer_level_code,
											mobile_no = v_colrec.mobile_no,
											email_id = v_colrec.email_id,
											gender_code = v_colrec.gender_code,
											resource_type_code = v_colrec.resource_type_code,
											trainer_qualification = v_colrec.trainer_qualification,
											validity_from = v_colrec.validity_from,
											validity_to = v_colrec.validity_to,
											indefinite_flag = v_colrec.indefinite_flag,
											photo_file_name = v_colrec.photo_file_name,
                                            photo_file_path = v_colrec.photo_file_path,											
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by,
											row_timestamp = v_colrec.row_timestamp,
											cadre_id = v_colrec.cadre_id,
											deactivation_reason_code = v_colrec.deactivation_reason_code;								
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainerlang(INOUT _trainerlang_gid udd_int, INOUT _trainer_id udd_code, _trainerlang_code udd_code, _read_flag udd_desc, _write_flag udd_code, _speak_flag udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 22-09-2022
		SP Code : B05TLACUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
begin 	
	-- Validation
	if _mode_flag = 'U' and _trainerlang_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_002', _lang_code)  || v_new_line;	
		end if;

		-- language validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _trainerlang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_003', _lang_code)|| v_new_line;	
		end if;

		-- read flag validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _read_flag 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_004', _lang_code)|| v_new_line;	
		end if;

		-- write flag validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _write_flag 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_004', _lang_code)|| v_new_line;	
		end if;

		-- speak flag validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _speak_flag 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_004', _lang_code)|| v_new_line;	
		end if;
		
		-- select one proficiency validation
		if _speak_flag = 'N' and _write_flag = 'N' and _read_flag = 'N'
		then
			v_err_code := v_err_code || 'VB05TLACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_001', _lang_code)|| v_new_line;	
		end if;
		
		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_005', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLACUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLACUD_003', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainerlang
				  where 	trainerlang_gid = _trainerlang_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttrainerlang
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trainerlang_gid = _trainerlang_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB05TLACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TLACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TLACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainerlang
					  where		trainerlang_gid = _trainerlang_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_ttrainerlang 
			(
				trainer_id,
				lang_code,
				read_flag,
				write_flag,
				speak_flag,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				_trainerlang_code,
				_read_flag,
				_write_flag,
				_speak_flag,
				_status_code,
				now(),
				_user_code
			) returning trainerlang_gid into _trainerlang_gid;
							
			v_succ_code := 'SB05TLACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TLACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TLACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainerlang
				   where	trainerlang_gid = _trainerlang_gid
				   and 		status_code     = 'A'
				   ) then
			update	trng_mst_ttrainerlang 
			set 	lang_code		= _trainerlang_code,
					read_flag		= _read_flag,
					write_flag		= _write_flag,
					speak_flag		= _speak_flag,
					status_code 	= _status_code,
					updated_by 		= _user_code,
					updated_date 	= now()
			where 	trainerlang_gid = _trainerlang_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB05TLACUD_002';
		else
			v_err_code := v_err_code || 'EB05TLACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TLACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainerlang
			    where 	trainer_id = _trainer_id
			    and     lang_code  = _trainerlang_code
			    and 	status_code <> 'I'
				group	by trainer_id,lang_code
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB05TLACUD_006';
		v_err_msg  := v_err_msg || fn_get_msg('VB05TLACUD_006', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainerleave(INOUT _trainerleave_gid udd_int, INOUT _trainer_id udd_code, _leave_date udd_date, _leave_desc udd_desc, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 23-09-2022
		SP Code : B05TLECUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
	    
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 	
	-- Validation
	if _mode_flag = 'U' and _trainerleave_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- trainer id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainer
					   where 	trainer_id   = _trainer_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLECUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLECUD_003', _lang_code)  || v_new_line;	
		end if;

		-- leave date validation
		if _leave_date isnull
		then
			v_err_code := v_err_code || 'VB05TLECUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLECUD_001', _lang_code)|| v_new_line;	
		end if;

		-- leave desc validation
		if _leave_desc = ''
		then
			v_err_code := v_err_code || 'VB05TLECUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLECUD_002', _lang_code)|| v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLECUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLECUD_004', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TLECUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TLECUD_005', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_trn_ttrainerleave
				  where 	trainerleave_gid = _trainerleave_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_trn_ttrainerleave
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trainerleave_gid = _trainerleave_gid
			and 	status_code      = 'A';
			
			v_succ_code := 'SB05TLECUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TLECUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TLECUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_trn_ttrainerleave
					  where		trainerleave_gid = _trainerleave_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_trn_ttrainerleave 
			(
				trainer_id,
				leave_date,
				leave_desc,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trainer_id,
				_leave_date,
				_leave_desc,
				_status_code,
				now(),
				_user_code
			) returning trainerleave_gid into _trainerleave_gid;
							
			v_succ_code := 'SB05TLECUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TLECUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TLECUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_trn_ttrainerleave
				   where	trainerleave_gid = _trainerleave_gid
				   and 		status_code      = 'A'
				   ) then
			update	trng_trn_ttrainerleave 
			set 	leave_date      = _leave_date,
					leave_desc      = _leave_desc,
					status_code 	= _status_code,
					updated_by 		= _user_code,
					updated_date 	= now()
			where 	trainerleave_gid = _trainerleave_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB05TLECUD_002';
		else
			v_err_code := v_err_code || 'EB05TLECUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TLECUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_trn_ttrainerleave
			    where 	trainer_id = _trainer_id
			    and     leave_date = _leave_date
			    and 	status_code <> 'I'
				group	by trainer_id,leave_date
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB05TLECUD_006';
		v_err_msg  := v_err_msg || fn_get_msg('VB05TLECUD_006', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainingorg(INOUT _trngorg_gid udd_int, INOUT _trngorg_id udd_code, _trngorg_name udd_desc, _trngorg_ll_name udd_desc, _trngorg_type_code udd_code, _trngorg_level_code udd_code, _mobile_no udd_mobile, _email_id udd_email, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _sys_flag udd_flag, _status_code udd_code, _deactivation_reason_code udd_code, _contact_person udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 19-09-2022
		
		Updated By   : Satheesh
		Updatde Date : 21-03-2023
		
		SP Code : B04TORCUD
		Version No : 17
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_note_gid udd_int := 0;
	v_vertical_code udd_code := '';
	v_trngorg_id udd_code := '';
	v_trngorg_name udd_desc := '';
	v_trngorg_level_code udd_code := '';
	v_count_geo udd_int := 0;
begin 	
	-- Validation
	if _mode_flag = 'U' and _trngorg_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	--Get trngorg id and trngorg name against trngorg id
	select trngorg_id, trngorg_name ,trngorg_level_code
	into   v_trngorg_id, v_trngorg_name, v_trngorg_level_code
	from   trng_mst_ttrainingorg
	where  trngorg_gid = _trngorg_gid
	and    status_code <> 'I';
	
	-- Record check in trainer geo against trainer id
	select count(*) into v_count_geo
	from   trng_mst_ttrainingorggeo
	where  trngorg_id = _trngorg_id
	and    status_code <> 'I';
	
	-- Get vertical code against user code
	select fn_get_userverticalcode(_user_code) 
	into 	v_vertical_code;

	if _mode_flag = 'I' then
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = v_vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TORCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_007', _lang_code) || v_new_line;	
		end if;
	end if;
	
	if _mode_flag <> 'D' then
		-- mobile no validation
/*		if _mobile_no = '' then
			v_err_code := v_err_code || 'VB04TORCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_004', _lang_code) || v_new_line;
		end if;
		
		-- contact person validation
		if _contact_person = '' then
			v_err_code := v_err_code || 'VB04TORCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_005', _lang_code) || v_new_line;
		end if;
		
		-- email id validation
		if _email_id = '' then
			v_err_code := v_err_code || 'VB04TORCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_006', _lang_code) || v_new_line;
		end if;
*/	
		-- org name validation
		if _trngorg_name = '' and _trngorg_type_code = 'QCD_ORGANIZATION'then
			v_err_code := v_err_code || 'VB04TORCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_001', _lang_code) || v_new_line;
		end if;
		-- group name validation
		if _trngorg_name = '' and _trngorg_type_code = 'QCD_GROUP'then
			v_err_code := v_err_code || 'VB04TORCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_002', _lang_code) || v_new_line;
		end if;

		-- org type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_TYPE'
					   and 		master_code = _trngorg_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TORCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_008', _lang_code)|| v_new_line;	
		end if;

		-- org level validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_LEVEL'
					   and 		master_code = _trngorg_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TORCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_009', _lang_code)|| v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TORCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_010', _lang_code)|| v_new_line;	
		end if;
		
		-- validity from validation
		if _trngorg_type_code <> 'QCD_GROUP' then
			if _validity_from isnull
			then
					v_err_code := v_err_code || 'VB04TORCUD_011' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_011', _lang_code) || v_new_line;	
			end if;

			-- Validity to or indefinite flag validation
			if _validity_from IS NOT NULL then
				if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
					_validity_to := null;
				end if;
				if _validity_to isnull and _indefinite_flag = 'N' then
					v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
				end if;
			end if;

			-- Validitiy to validation
			if  _validity_to < _validity_from then
				v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
			end if;
		end if;

		-- sys flag validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _sys_flag 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TORCUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_012', _lang_code)|| v_new_line;	
		end if;
		
		-- deactivation reason code validation
		if _deactivation_reason_code <> '' then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04TORCUD_013' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_013', _lang_code) || v_new_line;	
			end if;
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TORCUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_014', _lang_code)|| v_new_line;	
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_mst_ttrainingorg
		where	trngorg_id = _trngorg_id;

		v_timestamp	:= coalesce(v_timestamp, '');

		IF (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB04TORCUD_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_015', _lang_code) || v_new_line;	
		end if;
		
		--Training org level updation validation
		if _mode_flag = 'U' then
			if v_trngorg_level_code <> _trngorg_level_code and v_count_geo > 0
			then
				v_err_code := v_err_code || 'VB04TORCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_003', _lang_code) || v_new_line;	
			end if;
		end if;
	end if;
	
	-- deactivation validation
	if _mode_flag = 'D' and _trngorg_gid <> 0 then
		if _deactivation_reason_code isnull 
			then
				v_err_code := v_err_code || 'VB04TORCUD_016' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_016', _lang_code) || v_new_line;
		end if;
			if _deactivation_reason_code notnull then
				if not exists (select 	* 
							   from 	core_mst_tmaster 
							   where 	parent_code = 'QCD_DEA_REASON'
							   and 		master_code = _deactivation_reason_code
							   and 		status_code = 'A'
							  ) then
					v_err_code := v_err_code || 'VB04TORCUD_017' || ',';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04TORCUD_017', _lang_code) || v_new_line;	
				end if;
			end if;
-- 		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainingorg
				  where 	trngorg_gid = _trngorg_gid
				  and 		status_code <> 'I'
				 ) then
			
			-- Insert in note table
			CALL public.pr_iud_notewithcode( 
									v_note_gid,'QCD_TRAINING_ORG',v_trngorg_id,null,'I','',
									_deactivation_reason_code,'',_user_code,_role_code,_lang_code, 
									'I', _succ_msg) ;
				 
			Update 	trng_mst_ttrainingorg
			set		status_code   = 'I',
					deactivation_reason_code = _deactivation_reason_code,
					updated_by    = _user_code,
					updated_date  = now(),
					row_timestamp = now()
			where 	trngorg_gid   = _trngorg_gid
			and 	status_code   <> 'I';
			
			v_succ_code := 'VB04TORCUD_018';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04TORCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TORCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainingorg
					  where		trngorg_gid = _trngorg_gid
					  and 		status_code = 'A'
					 ) then
			insert into trng_mst_ttrainingorg 
			(
				trngorg_id,
				trngorg_name,
				trngorg_ll_name,
				trngorg_type_code,
				trngorg_level_code,
				mobile_no,
				email_id,
				validity_from,
				validity_to,
				indefinite_flag,
				sys_flag,
				status_code,
				deactivation_reason_code,
				contact_person,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_trngorg_id,
				_trngorg_name,
				_trngorg_ll_name,
				_trngorg_type_code,
				_trngorg_level_code,
				_mobile_no,
				_email_id,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				'N',
				_status_code,
				_deactivation_reason_code,
				_contact_person,
				now(),
				_user_code,
				now()
			) returning trngorg_gid into _trngorg_gid;
			
			_trngorg_id := 'TOR_' ||  _trngorg_gid;
			
			-- Set Course id 
			update trng_mst_ttrainingorg 
			set trngorg_id    = _trngorg_id
			where trngorg_gid = _trngorg_gid;
			
			
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_TRAINING_ORG', 
									_trngorg_id, 
									null,
									_status_code,
									'',
									'',
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;
									
			-- Insert on trainingorgdomain table
			if _trngorg_type_code = 'QCD_ORGANIZATION' then
				insert into trng_mst_ttrainingorgdomain(
														trngorg_id,
														vertical_code,
														subvertical_jsonb,
														area_of_experience,
														yrs_of_experience,
														status_code,
														created_date,
														created_by
													)
													values
													(
														_trngorg_id,
														v_vertical_code,
														'[{}]',
														'-',
														0,
														'A',
														now(),
														_user_code);
			end if;			
			
			-- Insert in user table 
/*			if _trngorg_type_code = 'QCD_ORGANIZATION' then
				insert into core_mst_tuser(
						user_code,user_name,role_code,user_pwd,mobile_no,email_id,user_type_code,lokos_id,
						vertical_code,state_code,district_code,block_code,panchayat_code,village_code,
						user_level_code,subvertical_jsonb,status_code,created_by,created_date
						)
				values (_mobile_no,_contact_person,_role_code,'123@4567',_mobile_no,_email_id,'','',
						'','','','','','',_trngorg_level_code,'[{}]',_status_code,'SYSTEM',now()
						);

				-- Email notification
				call pr_email_trainingorg(_trngorg_id,_user_code,_role_code,_lang_code);
			end if;
*/			
			v_succ_code := 'SB04TORCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04TORCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TORCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainingorg
				   where	trngorg_gid = _trngorg_gid
				   and 		status_code <> 'I'
				   ) then
			update	trng_mst_ttrainingorg 
			set 	trngorg_name		= _trngorg_name,
					trngorg_ll_name		= _trngorg_ll_name,
					trngorg_type_code	= _trngorg_type_code,
					trngorg_level_code	= _trngorg_level_code,
					mobile_no			= _mobile_no,
					email_id			= _email_id,
					validity_from 		= _validity_from,
					validity_to 		= _validity_to ,
					indefinite_flag 	= _indefinite_flag,
					sys_flag          	= _sys_flag,
-- 					status_code 		= _status_code,
					deactivation_reason_code = _deactivation_reason_code,
					contact_person		= _contact_person,
					updated_by 			= _user_code,
					updated_date 		= now(),
					row_timestamp 		= now()
			where 	trngorg_gid 		= _trngorg_gid
			and 	status_code 		<> 'I';
			
			raise notice 'org id %', _trngorg_id;
			raise notice'status_code %', _status_code;
			
			-- Insert in note table -- 
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_TRAINING_ORG', 
									_trngorg_id, 
									null,
									_status_code,
									'',
									'',
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;
			
			v_succ_code := 'SB04TORCUD_002';
		else
			v_err_code := v_err_code || 'EB04TORCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TORCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
			    from 	trng_mst_ttrainingorg
			    where 	trngorg_type_code   = _trngorg_type_code 
			    and     trngorg_name = _trngorg_name
			    and 	status_code  <> 'I'
				group	by trngorg_type_code, trngorg_name,status_code
				having	count('*') > 1) 
	then
		-- trngorg id and trngorg name cannot be duplicated
		v_err_code := v_err_code || 'VB04TORCUD_019';
		v_err_msg  := v_err_msg || fn_get_msg('VB04TORCUD_019', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || FORMAT(fn_get_msg(v_succ_code,_lang_code),_trngorg_id,_trngorg_name);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainingorgaddr(INOUT _trngorgaddr_gid udd_int, INOUT _trngorg_id udd_code, _addr_line udd_text, _addr_pincode udd_pincode, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 19-09-2022
		
		Updated By : Mangai
		Updated Date : 05-04-2023
		
		SP Code : B04TOACUD
		version no : 4
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_village_id udd_int := 0;
	v_geo_count udd_int := 0;
begin 	
	-- Validation
	if _mode_flag = 'U' and _trngorgaddr_gid = 0 then
		_mode_flag := 'I';
	end if;
	-- get state, district, block, panchayat and village id
	v_state_id := (select fn_get_stateid(_state_code));
	v_district_id := (select fn_get_districtid(_district_code));
	v_block_id := (select fn_get_blockid(_block_code));
	v_panchayat_id := (select fn_get_panchayatid(_grampanchayat_code));
	v_village_id := (select fn_get_villageid(_village_code));
	
	-- Get trngorg geo count against trngorg id
	select count(*) into v_geo_count
	from   trng_mst_ttrainingorggeo
	where  trngorg_id = _trngorg_id
	and    status_code = 'A';
	
	if _mode_flag <> 'D' then
		-- training org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id   = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOACUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_002', _lang_code)  || v_new_line;	
		end if;

		-- address line validation
		if _addr_line = '' then
			v_err_code := v_err_code || 'VB04TOACUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_001', _lang_code) || v_new_line;
		end if;
		
		-- state code validation
		-- comment due to national level user control
/*		if _state_code = ''
		then
			v_err_code := v_err_code || 'VB04TOACUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_011', _lang_code) || v_new_line;
		end if;
*/		
		-- state code validation
		if _state_code <> '' then
			if not exists (select 	* 
						   from 	state_master
						   where    state_code = _state_code
						   and      is_active = 'true')
			then
				v_err_code := v_err_code || 'VB04TOACUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_003', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- district code validation
		if _district_code <> ''  then
			if not exists (select 	* 
						   from 	district_master
						   where    district_code = _district_code
						   and      state_id      = v_state_id
						   and      is_active     = 'true')
			then
				v_err_code := v_err_code || 'VB04TOACUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_004', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- block code validation
		if _block_code <> ''  then
			if not exists (select 	* 
						   from 	block_master
						   where    block_code   = _block_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB04TOACUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_005', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- panchayat code validation
		if _grampanchayat_code <> ''  
		then
			if not exists (select 	* 
						   from 	panchayat_master 
						   where    panchayat_code = _grampanchayat_code
						   and      state_id       = v_state_id
						   and      district_id    = v_district_id
						   and      block_id       = v_block_id
						   and      is_active      = 'true')
			then
				v_err_code := v_err_code || 'VB04TOACUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_006', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- village code validation
		if _village_code <> ''
		then
			if not exists (select 	* 
						   from 	village_master 
						   where    village_code = _village_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      block_id     = v_block_id
						   and      panchayat_id = v_panchayat_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB04TOACUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_007', _lang_code) || v_new_line;
			end if;
		end if ;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOACUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_008', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_009', _lang_code)|| v_new_line;	
		end if;
	end if;

	if _mode_flag = 'D' then
		if v_geo_count > 0 then
			v_err_code := v_err_code || 'VB04TOACUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOACUD_012', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainingorgaddr
				  where 	trngorgaddr_gid = _trngorgaddr_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttrainingorgaddr
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trngorgaddr_gid = _trngorgaddr_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB04TOACUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04TOACUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TOACUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainingorgaddr
					  where		trngorgaddr_gid = _trngorgaddr_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_ttrainingorgaddr 
			(
				trngorg_id,
				addr_line,
				addr_pincode,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				village_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trngorg_id,
				_addr_line,
				_addr_pincode,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_village_code,
				_status_code,
				now(),
				_user_code
			) returning trngorgaddr_gid into _trngorgaddr_gid;
							
			v_succ_code := 'SB04TOACUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04TOACUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TOACUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainingorgaddr
				   where	trngorgaddr_gid = _trngorgaddr_gid
				   and 		status_code     = 'A'
				   ) then
			update	trng_mst_ttrainingorgaddr 
			set 	addr_line			= _addr_line,
					addr_pincode		= _addr_pincode,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					village_code		= _village_code,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trngorgaddr_gid 	= _trngorgaddr_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB04TOACUD_002';
		else
			v_err_code := v_err_code || 'EB04TOACUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TOACUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainingorgaddr
			    where 	trngorg_id = _trngorg_id
			    and     addr_line = _addr_line
			    and 	status_code <> 'I'
				group	by trngorg_id,addr_line
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB04TOACUD_010';
		v_err_msg  := v_err_msg || fn_get_msg('VB04TOACUD_010', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainingorgbank(INOUT _trngorgbank_gid udd_int, INOUT _trngorg_id udd_code, _bank_code udd_code, _branch_name udd_desc, _ifsc_code udd_code, _acc_type_code udd_code, _acc_no udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 21-09-2022
		SP Code : B05TOBCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_bool udd_boolean := false;
begin 	
	-- Validation
	if _mode_flag = 'U' and _trngorgbank_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- training org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id   = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_004', _lang_code)  || v_new_line;	
		end if;

		-- bank code validation
		if not exists (select 	* 
					   from 	bank_master 
					   where 	bank_code   = _bank_code
					   and      is_active   = '1'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_005', _lang_code)  || v_new_line;	
		end if;

		-- IFSC code validation
		if not exists (select 	* 
					   from 	bank_branch_master
					   where 	bank_code = _bank_code
					   and      bank_branch_name = _branch_name
					   and      ifsc_code   = _ifsc_code
					   and      is_active = 'true'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_006', _lang_code)  || v_new_line;	
		end if;
	
		-- branch name validation
		if not exists (select 	* 
					   from 	bank_branch_master
					   where 	bank_code = _bank_code
					   and      bank_branch_name = _branch_name
					   and      is_active = 'true'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_007', _lang_code)  || v_new_line;	
		end if;
		
		-- branch name validation
		if _branch_name = '' then
			v_err_code := v_err_code || 'VB05TOBCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_001', _lang_code) || v_new_line;
		end if;

		-- bank account type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_BANKACC_TYPE'
					   and 		master_code = _acc_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_008', _lang_code)|| v_new_line;	
		end if;

		-- account number validation
		if _acc_no = ''
		then
			v_err_code := v_err_code || 'VB05TOBCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_002', _lang_code)|| v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_009', _lang_code)|| v_new_line;	
		end if;
		
		v_bool := (select fn_get_bankacclength(_bank_code, _acc_no));
		if v_bool = 'f' then
			v_err_code := v_err_code || 'VB05TOBCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_003', _lang_code) || v_new_line;
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB05TOBCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB05TOBCUD_010', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainingorgbank
				  where 	trngorgbank_gid = _trngorgbank_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttrainingorgbank
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trngorgbank_gid = _trngorgbank_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB05TOBCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB05TOBCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TOBCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainingorgbank
					  where		trngorgbank_gid = _trngorgbank_gid
					  and 		status_code     = 'A'
					 ) then
			insert into trng_mst_ttrainingorgbank 
			(
				trngorg_id,
				bank_code,
				branch_name,
				ifsc_code,
				acc_type_code,
				acc_no,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trngorg_id,
				_bank_code,
				_branch_name,
				_ifsc_code,
				_acc_type_code,
				_acc_no,
				_status_code,
				now(),
				_user_code
			) returning trngorgbank_gid into _trngorgbank_gid;
							
			v_succ_code := 'SB05TOBCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB05TOBCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TOBCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainingorgbank
				   where	trngorgbank_gid = _trngorgbank_gid
				   and 		status_code     = 'A'
				   ) then
			update	trng_mst_ttrainingorgbank 
			set 	bank_code		= _bank_code,
					branch_name		= _branch_name,
					ifsc_code		= _ifsc_code,
					acc_type_code	= _acc_type_code,
					acc_no			= _acc_no,
					status_code 	= _status_code,
					updated_by 		= _user_code,
					updated_date 	= now()
			where 	trngorgbank_gid = _trngorgbank_gid
			and 	status_code 	= 'A';
			
			v_succ_code := 'SB05TOBCUD_002';
		else
			v_err_code := v_err_code || 'EB05TOBCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB05TOBCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainingorgbank
			    where 	trngorg_id = _trngorg_id
			    and     bank_code = _bank_code
			    and     acc_no = _acc_no
			    and 	status_code <> 'I'
				group	by trngorg_id,bank_code,acc_no
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB05TOBCUD_011';
		v_err_msg  := v_err_msg || fn_get_msg('VB05TOBCUD_011', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainingorgdomain(INOUT _trngorgdomain_gid udd_int, INOUT _trngorg_id udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _area_of_experience udd_text, _yrs_of_experience udd_decimal, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 19-09-2022
		
		Updated By 	 : Satheesh S
		Updated Date : 21-03-2023
		
		SP Code : B04TODCUD
		Version No : 05
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	
	v_colrec record;
	v_subvertical udd_code := '';
	v_trngorg_type_code udd_code := '';
	
begin 	
	-- Validation
	if _mode_flag = 'U' and _trngorgdomain_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- training org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id   = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TODCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- vertical code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = _vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TODCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_004', _lang_code)|| v_new_line;	
		end if;

		-- sub verical validation
		for v_subvertical in (select * from jsonb_to_recordset(_subvertical_jsonb) as b (subvertical udd_text))
		LOOP 
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_SUBVERTICAL'
						   and 		master_code = v_subvertical
						   and      depend_code = _vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04TODCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_005', _lang_code) || v_new_line;
			end if;
		end loop;

		-- area of experience validation
		if _area_of_experience = ''
		then
			v_err_code := v_err_code || 'VB04TODCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_001', _lang_code) || v_new_line;
		end if;

		-- years of experience validation
		if _yrs_of_experience < 0
		then
			v_err_code := v_err_code || 'VB04TODCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_002', _lang_code) || v_new_line;
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TODCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_006', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TODCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_007', _lang_code)|| v_new_line;	
		end if;
	end if;
	
	-- get trngorg_type_code 
	select fn_get_trainingorgtype(_trngorg_id) 
	into v_trngorg_type_code;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainingorgdomain
				  where 	trngorgdomain_gid  = _trngorgdomain_gid
				  and 		status_code     = 'A'
				 ) then
			if v_trngorg_type_code = 'QCD_ORGANIZATION' then	 
				if 	 (select  count(*) 
					  from 	  trng_mst_ttrainingorgdomain
					  where   trngorg_id = _trngorg_id
					  and 	  status_code = 'A') > 1 then
						Update 	trng_mst_ttrainingorgdomain
						set		status_code     = 'I',
								updated_by      = _user_code,
								updated_date    = now()
						where 	trngorgdomain_gid  = _trngorgdomain_gid
						and 	status_code        = 'A';

						v_succ_code := 'SB05TDOCUD_003';
				 else
					-- Minimum one record in domain
					v_err_code := v_err_code || 'VB04TODCUD_008';
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04TODCUD_008', _lang_code) || v_new_line;	

					RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
				 end if;	 
			else
				Update 	trng_mst_ttrainingorgdomain
				set		status_code     = 'I',
						updated_by      = _user_code,
						updated_date    = now()
				where 	trngorgdomain_gid  = _trngorgdomain_gid
				and 	status_code        = 'A';

						v_succ_code := 'SB05TDOCUD_003';
			end if;	 
				
			/*Update 	trng_mst_ttrainingorgdomain
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trngorgdomain_gid  = _trngorgdomain_gid
			and 	status_code        = 'A';*/
			
			v_succ_code := 'SB04TODCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04TODCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TODCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainingorgdomain
					  where		trngorgdomain_gid = _trngorgdomain_gid
					  and 		status_code       = 'A'
					 ) then
			insert into trng_mst_ttrainingorgdomain 
			(
				trngorg_id,
				vertical_code,
				subvertical_jsonb,
				area_of_experience,
				yrs_of_experience,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trngorg_id,
				_vertical_code,
				_subvertical_jsonb,
				_area_of_experience,
				_yrs_of_experience,
				_status_code,
				now(),
				_user_code
			) returning trngorgdomain_gid into _trngorgdomain_gid;
		
			v_succ_code := 'SB04TODCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04TODCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TODCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainingorgdomain
				   where	trngorgdomain_gid = _trngorgdomain_gid
				   and 		status_code    	  = 'A'
				   ) then
			update	trng_mst_ttrainingorgdomain 
			set 	vertical_code		= _vertical_code,
					subvertical_jsonb	= _subvertical_jsonb,
					area_of_experience	= _area_of_experience,
					yrs_of_experience	= _yrs_of_experience,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trngorgdomain_gid 	= _trngorgdomain_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB04TODCUD_002';
		else
			v_err_code := v_err_code || 'EB04TODCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TODCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
		if exists (	select	count(*)
					from 	trng_mst_ttrainingorgdomain
					where 	trngorg_id        = _trngorg_id
					and 	vertical_code     = _vertical_code
				    and     subvertical_jsonb = _subvertical_jsonb
					and 	status_code <> 'I'
					group	by trngorg_id,vertical_code,subvertical_jsonb,status_code
					having	count('*') > 1) 
		then
			-- Domain cannot be duplicated
			v_err_code := v_err_code || 'VB04TODCUD_009';
			v_err_msg  := v_err_msg || fn_get_msg('VB04TODCUD_009', _lang_code);	

			raise exception '%',v_err_code || '-' || v_err_msg;
		else
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
		end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainingorggeo(INOUT _trngorggeo_gid udd_int, INOUT _trngorg_id udd_code, _trngorg_level_code udd_code, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 19-09-2022
		SP Code : B04TOGCUD
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_trngorg_level_code udd_code := '';

begin 	
	-- Validation
	if _mode_flag = 'U' and _trngorggeo_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- get state, district, block, panchayat and village id
	v_state_id := (select fn_get_stateid(_state_code));
	v_district_id := (select fn_get_districtid(_district_code));
	v_block_id := (select fn_get_blockid(_block_code));
	v_panchayat_id := (select fn_get_panchayatid(_grampanchayat_code));
	
	if _mode_flag <> 'D' then
		-- training org id validation
		if not exists (select 	* 
					   from 	trng_mst_ttrainingorg
					   where 	trngorg_id   = _trngorg_id
					   and      status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOGCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_001', _lang_code)  || v_new_line;	
		end if;
		
		-- get trngorg level code -- 
		select trngorg_level_code into v_trngorg_level_code
		from   trng_mst_ttrainingorg
		where  trngorg_id = _trngorg_id
		and status_code = 'A';

		-- org level validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_ORG_LEVEL'
					   and 		master_code = v_trngorg_level_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOGCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_002', _lang_code)|| v_new_line;	
		end if;

		-- state code validation
		if _state_code = ''
		then
			v_err_code := v_err_code || 'VB04TOGCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_003', _lang_code) || v_new_line;
		end if;
		
		-- state code validation
		if _state_code <> '' then
			if not exists (select 	* 
						   from 	state_master
						   where    state_code = _state_code
						   and      is_active = 'true')
			then
				v_err_code := v_err_code || 'VB04TOGCUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_004', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- district code validation
		if _district_code <> ''  then
			if not exists (select 	* 
						   from 	district_master
						   where    district_code = _district_code
						   and      state_id      = v_state_id
						   and      is_active     = 'true')
			then
				v_err_code := v_err_code || 'VB04TOGCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_005', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- block code validation
		if _block_code <> ''  then
			if not exists (select 	* 
						   from 	block_master
						   where    block_code   = _block_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB04TOGCUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_006', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- panchayat code validation
		if _grampanchayat_code <> ''  
		then
			if not exists (select 	* 
						   from 	panchayat_master 
						   where    panchayat_code = _grampanchayat_code
						   and      state_id       = v_state_id
						   and      district_id    = v_district_id
						   and      block_id       = v_block_id
						   and      is_active      = 'true')
			then
				v_err_code := v_err_code || 'VB04TOGCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_007', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOGCUD_008' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_008', _lang_code)|| v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04TOGCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TOGCUD_009', _lang_code)|| v_new_line;	
		end if;
	end if;

	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_ttrainingorggeo
				  where 	trngorggeo_gid  = _trngorggeo_gid
				  and 		status_code     = 'A'
				 ) then
			Update 	trng_mst_ttrainingorggeo
			set		status_code     = 'I',
					updated_by      = _user_code,
					updated_date    = now()
			where 	trngorggeo_gid  = _trngorggeo_gid
			and 	status_code     = 'A';
			
			v_succ_code := 'SB04TOGCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04TOGCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TOGCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_ttrainingorggeo
					  where		trngorggeo_gid = _trngorggeo_gid
					  and 		status_code    = 'A'
					 ) then
			insert into trng_mst_ttrainingorggeo 
			(
				trngorg_id,
				trngorg_level_code,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_trngorg_id,
				_trngorg_level_code,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_status_code,
				now(),
				_user_code
			) returning trngorggeo_gid into _trngorggeo_gid;
							
			v_succ_code := 'SB04TOGCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04TOGCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TOGCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_ttrainingorggeo
				   where	trngorggeo_gid = _trngorggeo_gid
				   and 		status_code    = 'A'
				   ) then
			update	trng_mst_ttrainingorggeo 
			set 	trngorg_level_code	= _trngorg_level_code,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					status_code 		= _status_code,
					updated_by 			= _user_code,
					updated_date 		= now()
			where 	trngorggeo_gid 		= _trngorggeo_gid
			and 	status_code 		= 'A';
			
			v_succ_code := 'SB04TOGCUD_002';
		else
			v_err_code := v_err_code || 'EB04TOGCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04TOGCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_ttrainingorggeo
			    where 	trngorg_id = _trngorg_id
			    and     state_code = _state_code
			    and     district_code = _district_code
			    and     block_code = _block_code
			    and     grampanchayat_code = _grampanchayat_code
			    and 	status_code <> 'I'
				group	by trngorg_id,state_code,district_code,block_code,grampanchayat_code
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB04TOGCUD_010';
		v_err_msg  := v_err_msg || fn_get_msg('VB04TOGCUD_010', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trainingorgjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 04-01-2023
		SP Code      : B04TORCUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											trngorg_gid udd_int,
											trngorg_id udd_code,
											trngorg_name udd_desc,
											trngorg_ll_name udd_desc,
											trngorg_type_code udd_code,
											trngorg_level_code udd_code,
											mobile_no udd_mobile,
											email_id udd_email,
											validity_from udd_date,
											validity_to udd_date,
											indefinite_flag udd_flag,
											sys_flag udd_flag,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code,
											row_timestamp udd_datetime,
											deactivation_reason_code udd_code,
											contact_person udd_desc
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_mst_ttrainingorg(
			  										trngorg_gid,
													trngorg_id,
													trngorg_name,
													trngorg_ll_name,
													trngorg_type_code,
													trngorg_level_code,
				                                    mobile_no,
				                                    email_id,
				                                    validity_from,
				                                    validity_to,
				                                    indefinite_flag,
				                                    sys_flag,
				                                    status_code,
                                                    created_date,
													created_by,
				                                    row_timestamp,
				                                    deactivation_reason_code,
				                                    contact_person
												)
										values  (										
													v_colrec.trngorg_gid,
													v_colrec.trngorg_id,
													v_colrec.trngorg_name,
													v_colrec.trngorg_ll_name,
													v_colrec.trngorg_type_code,
													v_colrec.trngorg_level_code,
											        v_colrec.mobile_no,
											        v_colrec.email_id,
											        v_colrec.validity_from,
											        v_colrec.validity_to,
											        v_colrec.indefinite_flag,
											        v_colrec.sys_flag,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by,
											        v_colrec.row_timestamp,
											        v_colrec.deactivation_reason_code,
											        v_colrec.contact_person
												)
										
				on conflict (
								trngorg_gid
							)
							do update set 	trngorg_gid = v_colrec.trngorg_gid,
											trngorg_id = v_colrec.trngorg_id,
											trngorg_name = v_colrec.trngorg_name,
											trngorg_ll_name = v_colrec.trngorg_ll_name,
											trngorg_type_code = v_colrec.trngorg_type_code,
											trngorg_level_code = v_colrec.trngorg_level_code,
											mobile_no = v_colrec.mobile_no,
											email_id = v_colrec.email_id,
											validity_from = v_colrec.validity_from,
											validity_to = v_colrec.validity_to,
											indefinite_flag = v_colrec.indefinite_flag,
											sys_flag = v_colrec.sys_flag,
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by,
											row_timestamp = v_colrec.row_timestamp,
											deactivation_reason_code = v_colrec.deactivation_reason_code,
											contact_person = v_colrec.contact_person;							
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_trngorggroup(INOUT _trngorg_gid udd_int, INOUT _trngorgdomain_gid udd_int, INOUT _trngorg_id udd_code, _trainer_id udd_jsonb, _trngorg_name udd_desc, _trngorg_ll_name udd_desc, _trngorg_type_code udd_code, _trngorg_level_code udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _status_code udd_code, _deactivation_reason_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 26-10-2022
		
		Updated By : Satheesh S
		Update Date : 22-03-2023
		
		SP Code    : B04TGRCUD
		Version No : 10
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_trngorg_gid udd_int := 0;
	v_trngorgdomain_gid udd_int := 0;
	v_colrec record;
	v_subvertical udd_code := '';
	v_trainer_id udd_code := '';
begin 	
		-- validation
		/*if (select 
		/*
			a.trngorg_id,a.trainer_id,
			sum(case when c.subvertical_code isnull then 0 else 1 end)
			*/
			count(*)
		from trng_mst_ttrainergroup as a 
		left join (
		select _trngorg_id as trngorg_id,_subvertical_jsonb::udd_jsonb as subvertical2,
				b.subvertical as subvertical_code2 
		from jsonb_to_recordset(_subvertical_jsonb::udd_jsonb) b(subvertical udd_code)
		) as b on a.trngorg_id = b.trngorg_id
		left join trng_mst_vtrainersubvertical as c on 1 = 1  
		and b.subvertical_code2 = c.subvertical_code 
		and a.trainer_id = c.trainer_id
		where a.trngorg_id = _trngorg_id
		group by a.trngorg_id,a.trainer_id
		having sum(case when c.subvertical_code isnull then 0 else 1 end) = 0 ) > 0 then
			raise exception 'Test';
			-- v_err_code := v_err_code || 'VB04TGRCUD_003' || ',';
			-- v_err_msg  := v_err_msg ||  fn_get_msg('VB04TGRCUD_003', _lang_code)  || v_new_line;
		end if;
		
		if length(v_err_code) > 0 then
			v_err_code := substring(v_err_code,1,length(v_err_code)-1);
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;*/
		
		-- Trainer doesn't' match with the subvertical
		for v_trainer_id in (select * from jsonb_to_recordset(_trainer_id) as c(trainer_id udd_text))
		LOOP 
				if not exists(select * from trng_mst_vtrainersubvertical
							  where  trainer_id = v_trainer_id
							  and    subvertical_code in (select fn_get_subvertical_code(_subvertical_jsonb)))
				then
					v_err_code := v_err_code || 'VB04TGRCUD_001' ;
					v_err_msg  := v_err_msg ||  fn_get_msg('VB04TGRCUD_001', _lang_code) || v_new_line;
					RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg; 
				end if;
		end loop;
		
		call pr_iud_trainingorg(_trngorg_gid,_trngorg_id,_trngorg_name,_trngorg_ll_name,_trngorg_type_code,'99',
							   '','',null,null,'N','N',_status_code,_deactivation_reason_code,'',_user_code,_role_code,_lang_code,_mode_flag,_row_timestamp,
							   _succ_msg);
						   
		call pr_iud_trainingorgdomain(_trngorgdomain_gid,_trngorg_id,_vertical_code,_subvertical_jsonb,'-',0,_status_code,
									 _user_code,_role_code,_lang_code,_mode_flag,_succ_msg);
		
		
		if exists ( select 	'*' from trng_mst_ttrainergroup
						where 	trngorg_id = _trngorg_id) then
						delete from	trng_mst_ttrainergroup 
						where 	trngorg_id = _trngorg_id;
		end if;
		
		if _mode_flag <> 'D' and (_trainer_id::udd_jsonb = '[{}]'  or _trainer_id::udd_jsonb = '[]')  then
			v_err_code := v_err_code || 'VB04TGRCUD_002' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04TGRCUD_002', _lang_code) || v_new_line;
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg; 
		end if;
		
		if _trainer_id::udd_jsonb <> '[{}]' then
			FOR v_colrec IN select * from jsonb_to_recordset(_trainer_id::udd_jsonb) as items 
											(
												trainer_id 	 udd_code								
											)
			loop
			insert into trng_mst_ttrainergroup 
				(
					trngorg_type_code,
					trngorg_id,
					trainer_id,
					trainer_type_code,
					status_code,
					created_date,
					created_by
				)
				values
				(
					_trngorg_type_code,
					_trngorg_id,
					v_colrec.trainer_id,
					_trngorg_type_code,
					_status_code,
					now(),
					_user_code
				)
				on conflict (trngorg_type_code,
							trngorg_id,
							trainer_id)
				do 
				update set trainer_type_code = _trngorg_type_code,
							  status_code = 'A',
							  updated_date = now(),
							  updated_by = _user_code;

			END LOOP;
		end if;
									 
		if _mode_flag = 'I' then
				v_succ_code := 'SB04TGRCUD_001';
			elseif _mode_flag = 'U' then
				v_succ_code := 'SB04TGRCUD_002';
			elseif _mode_flag = 'D'then
				v_succ_code := 'SB04TGRCUD_003';
		end if;
		
		if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
		end if;
	    
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_user(INOUT _user_gid udd_int, _user_code udd_code, _user_name udd_desc, _role_code udd_code, _user_pwd udd_text, _mobile_no udd_mobile, _email_id udd_desc, _user_type_code udd_code, _lokos_id udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _village_code udd_code, _user_level_code udd_code, _status_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mangai
		Created Date : 30-01-2023
		
		Updated By   : satheesh
		Updated Date : 21-03-2023
		
		SP Code      : B04USRCXX
		Version No   : 4
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_subvertical udd_code;
begin
	
	-- language code validation
	if not exists (select * from core_mst_tlanguage 
				   where 	lang_code   = _lang_code
				   and   	status_code = 'A')
	then
		v_err_code := v_err_code || 'VB04USRCXX_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCXX_001', _lang_code) || v_new_line;		
	end if;

	if _mode_flag = 'U' then
		-- vertical code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = _vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04USRCXX_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCXX_002', _lang_code) || v_new_line;	
		end if;

		-- subvertical code validation
		for v_subvertical in (select * from jsonb_to_recordset(_subvertical_jsonb) as b (subvertical udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_SUBVERTICAL'
						   and 		master_code = v_subvertical
						   and 		depend_parent_code = 'QCD_VERTICAL'
						   and 		depend_code = _vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04USRCXX_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCXX_003', _lang_code) || v_new_line;
			end if;
		end loop;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		core_mst_tuser
				  where 	user_gid = _user_gid
				  and 		status_code <> 'I'
				 ) then
			Update 	core_mst_tuser
			set		status_code = 'I',
					updated_by = _user_code,
					updated_date = now()
			where 	user_gid = _user_gid 
			and 	status_code <> 'I';
			
			v_succ_code := 'SB04USRCXX_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB04USRCXX_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04USRCXX_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elseif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		core_mst_tuser
					  where		user_gid = _user_gid 
					  and 		status_code = 'A'
					 ) then
			insert into core_mst_tuser 
			(
				user_code,
				user_name,
				role_code,
				user_pwd,
				mobile_no,
				email_id,
				user_type_code,
				lokos_id,
				vertical_code,
				subvertical_jsonb,
				state_code,
				district_code,
				block_code,
				panchayat_code,
				village_code,
				user_level_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_user_code,
				_user_name,
				_role_code,
				_user_pwd,
				_mobile_no,
				_email_id,
				_user_type_code,
				_lokos_id,
				_vertical_code,
				_subvertical_jsonb,
				_state_code,
				_district_code,
				_block_code,
				_panchayat_code,
				_village_code,
				_user_level_code,
				_status_code,
				now(),
				_user_code
			) returning user_gid into _user_gid;
			
			v_succ_code := 'SB04USRCXX_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB04USRCXX_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04USRCXX_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	core_mst_tuser
				   where	user_gid = _user_gid 
				   and 		status_code <> 'I'
				   ) then
			update core_mst_tuser
			set    vertical_code = _vertical_code,
				   subvertical_jsonb  = _subvertical_jsonb,
				   updated_by  = _user_code,
				   updated_date = now()
			where  user_gid = _user_gid 
			and    status_code <> 'I';
			
			v_succ_code := 'SB04USRCXX_002';			
			
		else
			v_err_code := v_err_code || 'EB04USRCXX_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB04USRCXX_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	core_mst_tuser
			    where 	user_code = _user_code
			    and     role_code = _role_code
			    and 	status_code <> 'I'
				group	by user_code,user_code,status_code
				having	count('*') > 1) 
	then
		-- Duplicate Record
		v_err_code := v_err_code || 'VB04USRCXX_004';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCXX_004', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_usermapping(INOUT _user_gid udd_int, _user_code udd_code, _user_name udd_desc, _role_code udd_code, _role_jsonb udd_jsonb, _user_pwd udd_text, _mobile_no udd_mobile, _email_id udd_desc, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _national_level udd_boolean, _state_code udd_code, _district_code udd_code, _block_code udd_code, _panchayat_code udd_code, _panchayat_jsonb udd_jsonb, _village_code udd_code, _user_level_code udd_code, _status_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mohan S
		Created Date : 01-03-2023
		
		Updated By   : Satheesh S
		Updated Date : 16-03-2023
		
		SP Code      : B04USRCUX
		Version No   : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_subvertical udd_code;
begin
	if _role_code = 'SuperAdmin' then
		_vertical_code := 'QCD_ALL';
	end if;
	
	if _vertical_code = '' then
		_vertical_code := null;
	end if;
	
	if _subvertical_jsonb = '[{}]' then
		_subvertical_jsonb := null;
	end if;
	
	-- user code validation
	if _user_code = '' then
		v_err_code := v_err_code || 'VB04USRCUX_001' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCUX_001', _lang_code) || v_new_line;	
	end if;
	
	-- role code validation
	if _role_code = '' then
		v_err_code := v_err_code || 'VB04USRCUX_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCUX_002', _lang_code) || v_new_line;	
	end if;
	
	-- language code validation
	if not exists (select * from core_mst_tlanguage 
				   where 	lang_code   = _lang_code
				   and   	status_code = 'A')
	then
		v_err_code := v_err_code || 'VB04USRCUX_003' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCUX_003', _lang_code) || v_new_line;		
	end if;

	-- vertical code validation
	if _vertical_code <> '' then
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VERTICAL'
					   and 		master_code = _vertical_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04USRCUX_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCUX_004', _lang_code) || v_new_line;	
		end if;
	end if;

	-- subvertical code validation
	if _vertical_code <> '' and _subvertical_jsonb <> '[{}]' then
		for v_subvertical in (select * from jsonb_to_recordset(_subvertical_jsonb) as b (subvertical udd_code))
		LOOP
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_SUBVERTICAL'
						   and 		master_code = v_subvertical
						   and 		depend_parent_code = 'QCD_VERTICAL'
						   and 		depend_code = _vertical_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB04USRCUX_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04USRCUX_005', _lang_code) || v_new_line;
			end if;
		end loop;
	end if;
	
	-- Set user_level_code 
	if _user_level_code = '' then
		if _national_level = true then
				_user_level_code = '99';
			elseif _village_code <> '' then
					 _user_level_code = '49';
			elseif _panchayat_jsonb <> '[{}]' then
					 _user_level_code = '59';
					 -- panchayat code value assigning part 1st panchayat code will append
					 select (a.gp) into _panchayat_code from 
					 jsonb_to_recordset(_panchayat_jsonb) a(gp udd_text) 
					 limit 1;
			elseif _block_code <> '' then
					 _user_level_code = '69';
			elseif _district_code <> '' then
					 _user_level_code = '79';
			elseif _state_code <> '' then
					 _user_level_code = '89';
		 end if;
	 end if;
		
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
		-- Delete from core_mst_tuser
		if _mode_flag = 'D' then
			delete from core_mst_tuser
			where 	user_code = _user_code
			and   	role_code = _role_code
			and 	status_code = 'A';
		else
			-- Insert/Update statement
			insert into core_mst_tuser 
			(
				user_code,
				user_name,
				role_code,
				user_pwd,
				mobile_no,
				email_id,
				vertical_code,
				subvertical_jsonb,
				state_code,
				district_code,
				block_code,
				panchayat_code,
				panchayat_jsonb,
				village_code,
				user_level_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_user_code,
				_user_name,
			    _role_code,
				_user_pwd,
				_mobile_no,
				_email_id,
				_vertical_code,
				_subvertical_jsonb,
				_state_code,
				_district_code,
				_block_code,
				_panchayat_code,
				_panchayat_jsonb,
				_village_code,
				_user_level_code,
				_status_code,
				now(),
				_user_code
			) on conflict
			(user_code,role_code)
			do update set  
				user_name = _user_name,
				user_pwd = _user_pwd,
				mobile_no = _mobile_no,
				email_id = _email_id,
				vertical_code = coalesce(_vertical_code,core_mst_tuser.vertical_code),
				subvertical_jsonb = coalesce(_subvertical_jsonb,core_mst_tuser.subvertical_jsonb),
				state_code = _state_code,
				district_code = _district_code,
				block_code = _block_code,
				panchayat_code = _panchayat_code,
				panchayat_jsonb = _panchayat_jsonb,
				village_code = _village_code,
				--user_level_code = coalesce(_user_level_code,core_mst_tuser.user_level_code),
				status_code = _status_code,
				updated_date = now(),
				updated_by = _user_code;
			
			-- user gid returning
			select 	user_gid into _user_gid 
			from 	core_mst_tuser 
			where 	user_code = _user_code
			and 	role_code = _role_code
			and 	status_code = 'A';
			
			-- Success msg
			v_succ_code := 'VB04USRCUX_006';
			v_err_msg   := v_err_msg ||  fn_get_msg('VB04USRCUX_006', _lang_code);
			_succ_msg   := v_err_msg;
	end if;
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_usertoken(INOUT _user_code udd_user, INOUT _user_token udd_text, INOUT _url udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mohan
		Created Date : 24-08-2022
		SP Code      : B04USTCUX
	*/
	v_user_token udd_text := '';
begin
		-- RANDOM String Generation
		SELECT md5(random()::text) into v_user_token;
		
		insert into core_mst_tusertoken(
									user_code,
									user_token,
									url,
									token_expired_date,
									token_expired_flag,
									created_date,
									created_by
												)
						values(
								_user_code,
								v_user_token,
								_url,
								now(),
								'N',
								now(),
								_user_code
								)
					on conflict (
								user_code,
								url
								)
							do update set   user_token			=	v_user_token,
			  								token_expired_flag	=	'N',
			  								token_expired_date	=	now(),
											updated_date		=	now(),
											updated_by			=	_user_code
											
								returning user_token into _user_token;
								_succ_msg := 'Success';
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venue(INOUT _venue_gid udd_int, INOUT _venue_id udd_code, _venue_name udd_desc, _venue_ll_name udd_desc, _venue_type_code udd_code, _venue_subtype_code udd_code, _contact_name udd_desc, _contact_mobile_no udd_mobile, _validity_from udd_date, _validity_to udd_date, _indefinite_flag udd_flag, _others_flag udd_flag, _status_code udd_code, _deactivation_reason_code udd_code, _tprogram_id udd_code, _tprogrambatch_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, _row_timestamp udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 01-10-2022
		
		Updated By   : Satheesh S
		Updated Date : 21-03-2023
		
		SP Code : B06VENCUD
		version no : 08
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	v_timestamp udd_text := '';	
	v_note_gid udd_int := 0;
	v_venue_id udd_code := '';
	v_venue_name udd_desc := '';
	v_venueaddr_gid udd_int := 0;
	v_state_code udd_code := '';
	v_district_code udd_code := '';
	v_block_code udd_code := '';
	v_panchayat_code udd_code := '';
	v_village_code udd_code := '';
begin 
	-- Validation
	if _mode_flag = 'U' and _venue_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _deactivation_reason_code = '' then
		_deactivation_reason_code = null;
	end if;
	
	--Get venue id and venue name against venue gid
	select venue_id, venue_name into v_venue_id, v_venue_name
	from trng_mst_tvenue
	where venue_gid = _venue_gid
	and   status_code = 'A';
	
	-- Before Edit or Delete whether the venue is mapped with some other trng program validation\
	if _mode_flag = 'U' or _mode_flag = 'D' then
		if exists (select * from trng_trn_ttprogrambatch as a
				   inner join trng_trn_ttprogram as b
				   on a.tprogram_id = b.tprogram_id 
				   and b.status_code = 'A' 
				   and b.execution_status_code in ('H','P')
				   and b.end_date >= now() :: udd_date
				   where a.end_date >= now() :: udd_date
				   and	 a.tprogram_venue_id = v_venue_id
				   or    a.confirm_venue_id = v_venue_id 
				   and   a.status_code in ('H','P')) then
				v_err_code := v_err_code || 'VB06VENCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_005', _lang_code) || v_new_line;	
		end if;
	end if;
	
	if _mode_flag <> 'D' then
		-- venue name validation
		if _venue_name = ''
		then
			v_err_code := v_err_code || 'VB06VENCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_001', _lang_code) || v_new_line;	
		end if;

		-- contact name validation
		if _contact_name = ''
		then
			v_err_code := v_err_code || 'VB06VENCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_002', _lang_code) || v_new_line;	
		end if;

		-- venue type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VENUE_TYPE'
					   and 		master_code = _venue_type_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VENCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_011', _lang_code) || v_new_line;	
		end if;

		-- venue sub type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VENUE_SUBTYPE'
					   and 		master_code = _venue_subtype_code 
					   and      depend_code = _venue_type_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VENCUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_012', _lang_code) || v_new_line;	
		end if;
		
		if _venue_type_code = 'QCD_OTHERS' then
			-- program id validation
			if not exists (select 	* 
						   from 	trng_trn_ttprogram
						   where 	tprogram_id   = _tprogram_id
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB06VENCUD_013' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_013', _lang_code)  || v_new_line;	
			end if;
			
			-- program batch id validation
			if not exists (select 	* 
						   from 	trng_trn_ttprogrambatch
						   where 	tprogram_id = _tprogram_id
						   and 		tprogrambatch_id   = _tprogrambatch_id
						   and      status_code <> 'I'
						  ) then
				v_err_code := v_err_code || 'VB06VENCUD_014' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_014', _lang_code)  || v_new_line;	
			end if;
		end if;

		-- flag validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _others_flag
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VENCUD_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_015', _lang_code) || v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VENCUD_016' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_016', _lang_code) || v_new_line;	
		end if;
		
		-- validity from validation
		if _validity_from isnull
		then
				v_err_code := v_err_code || 'VB06VENCUD_017' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_017', _lang_code) || v_new_line;	
		end if;

		-- Validity to or indefinite flag validation
		if _validity_from IS NOT NULL then
			if _validity_to IS NOT NULL and _indefinite_flag = 'Y' then
				_validity_to := null;
			end if;
			if _validity_to isnull and _indefinite_flag = 'N' then
				v_err_code := v_err_code || 'VB04COUCUD_003' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_003', _lang_code)|| v_new_line;
			end if;
		end if;

		-- Validitiy to validation
		if  _validity_to < _validity_from then
			v_err_code := v_err_code || 'VB04COUCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04COUCUD_004', _lang_code) || v_new_line;
		end if;
		
		-- usercode validation
		if not exists (select * from core_mst_tuser 
					   where user_code = _user_code
					   and status_code = 'A') then
			v_err_code := v_err_code || 'VB06VENCUD_018' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_018', _lang_code) || v_new_line;
		else
			-- Get geo from the user
			select 	state_code,district_code,block_code,panchayat_code,village_code
			into 	v_state_code,v_district_code,v_block_code,v_panchayat_code,v_village_code
			from 	core_mst_tuser 
			where 	user_code = _user_code 
			and 	status_code = 'A';
		end if;

		-- timestamp check for concurrency
		select 	to_char(row_timestamp,'DD-MM-YYYY HH:MI:SS:MS') into v_timestamp 
		from 	trng_mst_tvenue
		where	venue_gid = _venue_gid;

		v_timestamp	:= coalesce(v_timestamp, '');

		IF (v_timestamp != _row_timestamp) 
		then
			-- Record modified since last fetch so Kindly refetch and continue
			v_err_code := v_err_code || 'VB06VENCUD_019' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_019', _lang_code) || v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VENCUD_020' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_020', _lang_code) || v_new_line;	
		end if;
	end if;
	
	-- deactivation validation
	if _mode_flag = 'D' and _venue_gid <> 0 then
		if _deactivation_reason_code isnull 
			then
				v_err_code := v_err_code || 'VB06VENCUD_021' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_021', _lang_code) || v_new_line;
		end if;
		
		if _deactivation_reason_code notnull then
			if not exists (select 	* 
						   from 	core_mst_tmaster 
						   where 	parent_code = 'QCD_DEA_REASON'
						   and 		master_code = _deactivation_reason_code
						   and 		status_code = 'A'
						  ) then
				v_err_code := v_err_code || 'VB06VENCUD_022' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_022', _lang_code) || v_new_line;	
			end if;
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	-- Others flag assigning
	if _others_flag = '' or _others_flag = 'N' then
		_others_flag := 'N';
	else
		_others_flag := 'Y';		
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tvenue
				  where 	venue_gid   = _venue_gid
				  and 		status_code = 'A'
				 ) then
				 
			-- Insert in note table
			CALL public.pr_iud_notewithcode( 
									v_note_gid, 
									'QCD_VENUE', 
									v_venue_id, 
									null,
									'I',
									'',
									_deactivation_reason_code,
									'',
									_user_code, 
									_role_code, 
									_lang_code, 
									'I', 
									_succ_msg 
									) ;	
			
			Update 	trng_mst_tvenue
			set		status_code   = 'I',
					deactivation_reason_code = _deactivation_reason_code,
					updated_by    = _user_code,
					updated_date  = now(),
					row_timestamp = now()
			where 	venue_gid   = _venue_gid 
			and 	status_code = 'A';
			
			v_succ_code := 'VB06VENCUD_023';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB06VENCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VENCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tvenue
					  where		venue_gid   = _venue_gid
					  and 		status_code = 'A' 
					 ) then
			insert into trng_mst_tvenue 
			(
				venue_id,
				venue_name,
				venue_ll_name,
				venue_type_code,
				venue_subtype_code,
				contact_name,
				contact_mobile_no,
				validity_from,
				validity_to,
				indefinite_flag,
				others_flag,
				status_code,
				tprogram_id,
				tprogrambatch_id,
				created_date,
				created_by,
				row_timestamp
			)
			values
			(
				_venue_id,
				_venue_name,
				_venue_ll_name,
				_venue_type_code,
				_venue_subtype_code,
				_contact_name,
				_contact_mobile_no,
				_validity_from,
				_validity_to,
				_indefinite_flag,
				_others_flag,
				_status_code,
				_tprogram_id,
				_tprogrambatch_id,
				now(),
				_user_code,
				now()
			) returning venue_gid into _venue_gid;
			_venue_id := 'VEN_' || _venue_gid;
			-- Set venue id 
			update trng_mst_tvenue 
			set venue_id = _venue_id
			where venue_gid = _venue_gid;
			
			v_succ_code := 'SB06VENCUD_001';
			
		  if _venue_type_code <> 'QCD_OTHERS' then
			-- Venue address table insert
			call public.pr_iud_venueaddr(v_venueaddr_gid, _venue_id, '-', '', v_state_code, v_district_code,
										 v_block_code, v_panchayat_code, v_village_code, 'A',
										 _user_code, _role_code, _lang_code, _mode_flag, _succ_msg);
		  end if;
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB06VENCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VENCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tvenue
				   where	venue_gid    = _venue_gid
				   and 		status_code <> 'I'
				   ) then
			update	trng_mst_tvenue    
			set 	venue_name			= _venue_name,
					venue_ll_name		= _venue_ll_name,
					venue_type_code		= _venue_type_code,
					venue_subtype_code	= _venue_subtype_code,
					contact_name		= _contact_name,
					contact_mobile_no	= _contact_mobile_no,
					validity_from		= _validity_from,
					validity_to			= _validity_to,
					indefinite_flag		= _indefinite_flag,
					status_code   		= _status_code,
					updated_by    		= _user_code,
					updated_date  		= now(),
					row_timestamp 		= now()
			where 	venue_gid 	 = _venue_gid
			and     status_code  <> 'I';
			
			v_succ_code := 'SB06VENCUD_002';
		else
			v_err_code := v_err_code || 'EB06VENCUD_004';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VENCUD_004', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	/*if _venue_type_code = 'QCD_OTHERS' then
		if exists (	select	count(*)
					from 	trng_mst_tvenue
					where 	venue_name = _venue_name
				    and 	tprogram_id = _tprogram_id
				    and 	tprogrambatch_id = _tprogrambatch_id
					and     status_code = 'A'
					group	by venue_name,tprogram_id,tprogrambatch_id,status_code
					having	count('*') > 1) 
		then
			-- venue name cannot be duplicate
			v_err_code := v_err_code || 'EB06VENCUD_001';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB06VENCUD_001', _lang_code),_venue_name);	

			raise exception '%',v_err_code || '-' || v_err_msg;
		else
			_succ_msg := v_succ_code || '-' || FORMAT(fn_get_msg(v_succ_code,_lang_code),_venue_id,_venue_name);
		end if;
	else*/
	if _venue_type_code <> 'QCD_OTHERS' then
		if exists (	select	count(*)
					from 	trng_mst_tvenue
					where 	venue_name = _venue_name
					and     status_code = 'A'
					group	by venue_name,status_code
					having	count('*') > 1) 
		then
			-- venue name cannot be duplicate
			v_err_code := v_err_code || 'EB06VENCUD_001';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('EB06VENCUD_001', _lang_code),_venue_name);	

			raise exception '%',v_err_code || '-' || v_err_msg;
		else
			_succ_msg := v_succ_code || '-' || FORMAT(fn_get_msg(v_succ_code,_lang_code),_venue_id,_venue_name);
		end if;
	 end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venueaddr(INOUT _venueaddr_gid udd_int, INOUT _venue_id udd_code, _addr_line udd_text, _addr_pincode udd_pincode, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 01-10-2022
		
		Updated By   : Mangai
		Updated Date : 5-04-2023
		
		SP Code : B06VADCUD
		Version No : 09
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_village_id udd_int := 0;
	
	v_venue_id udd_code := '';
	v_count udd_int := 0;
begin 
	-- Validation
	if _mode_flag = 'U' and _venueaddr_gid = 0 then
		_mode_flag := 'I';
	end if;
	-- get state, district, block, panchayat and village id
	v_state_id := (select fn_get_stateid(_state_code));
	v_district_id := (select fn_get_districtid(_district_code));
	v_block_id := (select fn_get_blockid(_block_code));
	v_panchayat_id := (select fn_get_panchayatid(_grampanchayat_code));
	v_village_id := (select fn_get_villageid(_village_code));
	
	-- Get venue id from address table against venue addr gid
	select venue_id into v_venue_id
	from   trng_mst_tvenueaddr
	where   venueaddr_gid = _venueaddr_gid
	and     status_code = 'A';
	
	-- Get venue address count against venue id
	select count(*) into v_count
	from   trng_mst_tvenueaddr
	where  venue_id = _venue_id
	and    status_code = 'A';
	
	-- Before Edit or Delete whether the venue is mapped with some other trng program validation\
	if _mode_flag = 'U' or _mode_flag = 'D' then
		if exists (select * from trng_trn_ttprogrambatch as a
				   inner join trng_trn_ttprogram as b
				   on a.tprogram_id = b.tprogram_id 
				   and b.status_code = 'A' 
				   and b.execution_status_code in ('H','P')
				   and b.end_date >= now() :: udd_date
				   where a.end_date >= now() :: udd_date
				   and a.confirm_venue_id = v_venue_id 
				   and a.status_code in ('H','P')) then
				v_err_code := v_err_code || 'VB06VENCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VENCUD_005', _lang_code) || v_new_line;	
		end if;
	end if;
	
	if _mode_flag <> 'D' then
		-- venue id validation
		if not exists (select 	* 
					   from 	trng_mst_tvenue
					   where 	venue_id   = _venue_id	
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB06VADCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_003', _lang_code)  || v_new_line;	
		end if;

		-- address line validation
		if _addr_line = ''
		then
			v_err_code := v_err_code || 'VB06VADCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_001', _lang_code) || v_new_line;	
		end if;

		-- state code validation
		-- comment due to national level user control
/*		if _state_code = ''
		then
			v_err_code := v_err_code || 'VB00CMNCMN_046' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB00CMNCMN_046', _lang_code) || v_new_line;
		end if;
*/ 
		-- state code validation
		if _state_code <> '' then
			if not exists (select 	* 
						   from 	state_master
						   where    state_code = _state_code
						   and      is_active = 'true')
			then
				v_err_code := v_err_code || 'VB06VADCUD_004' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_004', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- district code validation
		if _district_code <> ''  then
			if not exists (select 	* 
						   from 	district_master
						   where    district_code = _district_code
						   and      state_id      = v_state_id
						   and      is_active     = 'true')
			then
				v_err_code := v_err_code || 'VB06VADCUD_005' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_005', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- block code validation
		if _block_code <> ''  then
			if not exists (select 	* 
						   from 	block_master
						   where    block_code   = _block_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB06VADCUD_006' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_006', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- panchayat code validation
		if _grampanchayat_code <> ''  
		then
			if not exists (select 	* 
						   from 	panchayat_master 
						   where    panchayat_code = _grampanchayat_code
						   and      state_id       = v_state_id
						   and      district_id    = v_district_id
						   and      block_id       = v_block_id
						   and      is_active      = 'true')
			then
				v_err_code := v_err_code || 'VB06VADCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_007', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- village code validation
		if _village_code <> ''
		then
			if not exists (select 	* 
						   from 	village_master 
						   where    village_code = _village_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      block_id     = v_block_id
						   and      panchayat_id = v_panchayat_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB06VADCUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_008', _lang_code) || v_new_line;
			end if;
		end if ;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VADCUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_009', _lang_code) || v_new_line;	
		end if;
		
		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VADCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_010', _lang_code) || v_new_line;	
		end if;
	end if;
		
	-- venue infra check
	if (_mode_flag = 'D' or _mode_flag = 'U') and v_venue_id <> '' then 
		if exists ( select * from trng_mst_tvenueinfra
					where venue_id     = v_venue_id
					and   status_code  = 'A') then
			v_err_code := v_err_code || 'VB06VADCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_002', _lang_code)  || v_new_line;	
		end if;
	end if;
	
	-- Minimum One Venue Available
	if _mode_flag = 'D' then
		if (v_count = 1) then
			v_err_code := v_err_code || 'VB06VADCUD_012' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VADCUD_012', _lang_code)  || v_new_line;
		end if;
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tvenueaddr
				  where 	venueaddr_gid = _venueaddr_gid
				  and 		status_code   <> 'I'
				 ) then
			/*Update 	trng_mst_tvenueaddr
			set		status_code   = 'I',
					updated_by    = _user_code,
					updated_date  = now()
			where 	venueaddr_gid = _venueaddr_gid 
			and 	status_code = 'A';*/
			
			delete from trng_mst_tvenueaddr
			where 	venueaddr_gid = _venueaddr_gid 
			and 	status_code = 'A';
			
			v_succ_code := 'SB06VADCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB06VADCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VADCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tvenueaddr
					  where		venueaddr_gid = _venueaddr_gid
					  and 		status_code <> 'I' 
					 ) then
			insert into trng_mst_tvenueaddr 
			(
				venue_id,
				addr_line,
				addr_pincode,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				village_code,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_venue_id,
				_addr_line,
				_addr_pincode,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_village_code,
				_status_code,
				now(),
				_user_code
			) returning venueaddr_gid into _venueaddr_gid;
			
			v_succ_code := 'SB06VADCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB06VADCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VADCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tvenueaddr
				   where	venueaddr_gid = _venueaddr_gid
				   and 		status_code   <> 'I'
				   ) then
			update	trng_mst_tvenueaddr    
				set addr_line			= _addr_line,
					addr_pincode		= _addr_pincode,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					village_code		= _village_code,
					status_code   		= _status_code,
					updated_by    		= _user_code,
					updated_date  		= now()
			where 	venueaddr_gid = _venueaddr_gid
			and     status_code  <> 'I';
			
			v_succ_code := 'SB06VADCUD_002';
		else
			v_err_code := v_err_code || 'EB06VADCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VADCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tvenueaddr
			    where 	venue_id = _venue_id
			    --and     addr_line= _addr_line
			    and 	status_code = 'A'
				group	by venue_id
				having	count('*') > 1) 
	then
		-- Duplicate Record
		v_err_code := v_err_code || 'VB06VADCUD_011';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB06VADCUD_011', _lang_code));	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venueaddrjson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 26-12-2022
		
		Update By 	 : Mohan S
		Uodate Date  : 15-02-2023
		
		SP Code      : B06VADCUX
		Version no   : 02
	*/
	v_colrec record;
	v_updated_date udd_datetime;
	v_tprogram_id udd_code := '';
	v_tprogrambatch_id udd_code := '';
	v_venue_id udd_code := '';
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											venueaddr_gid udd_int,
											venue_id udd_code,
											addr_line udd_text,
											addr_pincode udd_pincode,
											state_code udd_code,
											district_code udd_code,
											block_code udd_code,
											grampanchayat_code udd_code,
											village_code udd_code,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;
			  if exists ( select * from trng_trn_tmobilevenuemapping
						  where mobilevenue_id = v_colrec.venue_id
						  and status_code = 'A') then
			  		select venue_id,tprogram_id,tprogrambatch_id 
					into v_venue_id,v_tprogram_id,v_tprogrambatch_id
					from trng_trn_tmobilevenuemapping
					where mobilevenue_id = v_colrec.venue_id
			  		and status_code = 'A';
					
				  update trng_trn_ttprogrambatch 
				  set tprogram_venue_id = v_venue_id,
					  confirm_venue_id = v_venue_id,
					  updated_by       = v_colrec.created_by,
					  updated_date     = now()
				  where tprogram_id = v_tprogram_id
				  and   tprogrambatch_id = v_tprogrambatch_id;

				  update trng_trn_tmobilevenuemapping
				  set status_code = 'I'
				  where tprogram_id = v_tprogram_id
				  and   tprogrambatch_id = v_tprogrambatch_id
				  and   mobilevenue_id = v_colrec.venue_id;
			  end if;
			  
			  insert into trng_mst_tvenueaddr(
			  										--venueaddr_gid,
													venue_id,
													addr_line,
													addr_pincode,
													state_code,
													district_code,
													block_code,
				                                    grampanchayat_code,
													village_code,
				                                    status_code,
													created_date,
													created_by
												)
										values  (										
													--v_colrec.venueaddr_gid,
													v_venue_id,
													v_colrec.addr_line,
													v_colrec.addr_pincode,
													v_colrec.state_code,
													v_colrec.district_code,
													v_colrec.block_code,
											        v_colrec.grampanchayat_code,
													v_colrec.village_code,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by
												);
										
				/*on conflict (
								venueaddr_gid
							)
							do update set 	venueaddr_gid = v_colrec.venueaddr_gid,
											venue_id = v_colrec.venue_id,
											addr_line = v_colrec.addr_line,
											addr_pincode = v_colrec.addr_pincode,
											state_code = v_colrec.state_code,
											district_code = v_colrec.district_code,
											block_code = v_colrec.block_code,
											grampanchayat_code = v_colrec.grampanchayat_code,
											village_code = v_colrec.village_code,
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by;*/
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venueinfra(INOUT _venueinfra_gid udd_int, INOUT _venue_id udd_code, INOUT _facility_id udd_code, _facility_name udd_desc, _addr_line udd_text, _addr_pincode udd_pincode, _state_code udd_code, _district_code udd_code, _block_code udd_code, _grampanchayat_code udd_code, _village_code udd_code, _conf_room_count udd_int, _conf_room_capacity udd_int, _accom_overnight_flag udd_flag, _accom_overnight_capacity udd_int, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mangai
		Created Date : 01-10-2022
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		SP Code : B06VINCUD
		Version No : 07
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_state_id udd_int := 0;
	v_district_id udd_int := 0;
	v_block_id udd_int := 0;
	v_panchayat_id udd_int := 0;
	v_village_id udd_int := 0;
	
	v_venue_type udd_code := '';
begin 
	-- Validation
	if _mode_flag = 'U' and _venueinfra_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	-- get state, district, block, panchayat and village id
	v_state_id := (select fn_get_stateid(_state_code));
	v_district_id := (select fn_get_districtid(_district_code));
	v_block_id := (select fn_get_blockid(_block_code));
	v_panchayat_id := (select fn_get_panchayatid(_grampanchayat_code));
	v_village_id := (select fn_get_villageid(_village_code));
	
	-- Get venue type from venue table against given venue id
	select venue_type_code into v_venue_type
	from  trng_mst_tvenue
	where venue_id = _venue_id
	and   status_code = 'A';
	
	if _mode_flag <> 'D' then
		-- venue id validation
		if not exists (select 	* 
					   from 	trng_mst_tvenue
					   where 	venue_id   = _venue_id	
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB06VINCUD_010' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_010', _lang_code)  || v_new_line;	
		end if;

		-- facilty name validation
		if _facility_name = ''
		then
			v_err_code := v_err_code || 'VB06VINCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_001', _lang_code) || v_new_line;	
		end if;

		-- address line validation
		if _addr_line = ''
		then
			v_err_code := v_err_code || 'VB06VINCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_002', _lang_code) || v_new_line;	
		end if;
		
		-- conf room count validation
/*		if _conf_room_count < 0 
		then
			v_err_code := v_err_code || 'VB06VINCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_003', _lang_code) || v_new_line;	
		end if;
		
		-- conf room capacity validation
		if _conf_room_capacity < 0 
		then
			v_err_code := v_err_code || 'VB06VINCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_004', _lang_code) || v_new_line;	
		end if;
		
		-- accom overnight flag validation
		if _accom_overnight_capacity < 0 
		then
			v_err_code := v_err_code || 'VB06VINCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_005', _lang_code) || v_new_line;	
		end if;

		-- accom overnight flag validation
		if _accom_overnight_flag <> '' then
			if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_YES_NO'
					   and 		master_code = _accom_overnight_flag 
					   and 		status_code = 'A'
					  ) then
				v_err_code := v_err_code || 'VB06VINCUD_020' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_020', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- _accom_overnight_flag ""yes"" means _accom_overnight_capacity should be > zero
		if _accom_overnight_flag = 'Y' then
			if _accom_overnight_capacity <= 0 then
				v_err_code := v_err_code || 'VB06VINCUD_007' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_007', _lang_code) || v_new_line;	
			end if;
		end if;
		
		-- _accom_overnight_flag ""No"" means _accom_overnight_capacity should be equal to zero
		if _accom_overnight_flag = 'N' then
			if _accom_overnight_capacity > 0 then
				v_err_code := v_err_code || 'VB06VINCUD_008' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_008', _lang_code) || v_new_line;	
			end if;
		end if;
*/
		-- state code validation
		if _state_code = ''
		then
			v_err_code := v_err_code || 'VB06VINCUD_011' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_011', _lang_code) || v_new_line;
		end if;
		
		-- state code validation
		if _state_code <> '' then
			if not exists (select 	* 
						   from 	state_master
						   where    state_code = _state_code
						   and      is_active = 'true')
			then
				v_err_code := v_err_code || 'VB06VINCUD_012' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_012', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- district code validation
		if _district_code <> ''  then
			if not exists (select 	* 
						   from 	district_master
						   where    district_code = _district_code
						   and      state_id      = v_state_id
						   and      is_active     = 'true')
			then
				v_err_code := v_err_code || 'VB06VINCUD_013' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_013', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- block code validation
		if _block_code <> ''  then
			if not exists (select 	* 
						   from 	block_master
						   where    block_code   = _block_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB06VINCUD_014' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_014', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- panchayat code validation
		if _grampanchayat_code <> ''  
		then
			if not exists (select 	* 
						   from 	panchayat_master 
						   where    panchayat_code = _grampanchayat_code
						   and      state_id       = v_state_id
						   and      district_id    = v_district_id
						   and      block_id       = v_block_id
						   and      is_active      = 'true')
			then
				v_err_code := v_err_code || 'VB06VINCUD_015' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_015', _lang_code) || v_new_line;
			end if;
		end if ;
		
		-- village code validation
		if _village_code <> ''
		then
			if not exists (select 	* 
						   from 	village_master 
						   where    village_code = _village_code
						   and      state_id     = v_state_id
						   and      district_id  = v_district_id
						   and      block_id     = v_block_id
						   and      panchayat_id = v_panchayat_id
						   and      is_active    = 'true')
			then
				v_err_code := v_err_code || 'VB06VINCUD_016' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_016', _lang_code) || v_new_line;
			end if;
		end if ;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VINCUD_017' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_017', _lang_code) || v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VINCUD_018' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_018', _lang_code) || v_new_line;	
		end if;
		
		-- venue id against address table validation
		if not exists (select *
					   from  trng_mst_tvenueaddr
					   where venue_id    = _venue_id
					   and   status_code = 'A') then
			v_err_code := v_err_code || 'VB06VINCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_006', _lang_code) || v_new_line;	
		end if;			
		
		-- venue type others means should add one infra only
		if v_venue_type = 'QCD_OTHERS' then
			if exists (select * from trng_mst_tvenueinfra
					   where venue_id = _venue_id
					   and   status_code = 'A') 
			then
				v_err_code := v_err_code || 'VB06VINCUD_009' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB06VINCUD_009', _lang_code) || v_new_line;	
			end if;			   
		end if;
		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tvenueinfra
				  where 	venueinfra_gid = _venueinfra_gid
				  and 		status_code   <> 'I'
				 ) then
			Update 	trng_mst_tvenueinfra
			set		status_code   = 'I',
					updated_by    = _user_code,
					updated_date  = now()
			where 	venueinfra_gid = _venueinfra_gid
			and 	status_code = 'A';
			
			v_succ_code := 'SB06VINCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB06VINCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VINCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tvenueinfra
					  where		venueinfra_gid = _venueinfra_gid
					  and 		status_code <> 'I' 
					 ) then
			insert into trng_mst_tvenueinfra 
			(
				venue_id,
				facility_id,
				facility_name,
				addr_line,
				addr_pincode,
				state_code,
				district_code,
				block_code,
				grampanchayat_code,
				village_code,
				conf_room_count,
				conf_room_capacity,
				accom_overnight_flag,
				accom_overnight_capacity,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_venue_id,
				_facility_id,
				_facility_name,
				_addr_line,
				_addr_pincode,
				_state_code,
				_district_code,
				_block_code,
				_grampanchayat_code,
				_village_code,
				_conf_room_count,
				_conf_room_capacity,
				_accom_overnight_flag,
				_accom_overnight_capacity,
				_status_code,
				now(),
				_user_code
			) returning venueinfra_gid into _venueinfra_gid;
			_facility_id := 'FAC_' || _venueinfra_gid;
			-- Set venue id 
			update trng_mst_tvenueinfra 
			set facility_id = _facility_id
			where venueinfra_gid = _venueinfra_gid;
			v_succ_code := 'SB06VINCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB06VINCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VINCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tvenueinfra
				   where	venueinfra_gid = _venueinfra_gid
				   and 		status_code   <> 'I'
				   ) then
			update	trng_mst_tvenueinfra    
				set facility_name       = _facility_name,
					addr_line			= _addr_line,
					addr_pincode		= _addr_pincode,
					state_code			= _state_code,
					district_code		= _district_code,
					block_code			= _block_code,
					grampanchayat_code	= _grampanchayat_code,
					village_code		= _village_code,
					conf_room_count		= _conf_room_count,
					conf_room_capacity	= _conf_room_capacity,
					accom_overnight_flag= _accom_overnight_flag,
					accom_overnight_capacity	= _accom_overnight_capacity,
					status_code   		= _status_code,
					updated_by    		= _user_code,
					updated_date  		= now()
			where 	venueinfra_gid = _venueinfra_gid
			and     status_code  <> 'I';
			
			v_succ_code := 'SB06VINCUD_002';
		else
			v_err_code := v_err_code || 'EB06VINCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VINCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tvenueinfra
			    where   venue_id = _venue_id
			    and     facility_name = _facility_name
			    and 	status_code <> 'I'
				group	by venue_id,facility_name
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB06VINCUD_019';
		v_err_msg  := v_err_msg || fn_get_msg('VB06VINCUD_019', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venueinfradtl(INOUT _venueinfradtl_gid udd_int, INOUT _venue_id udd_code, INOUT _facility_id udd_code, _infra_type udd_code, _infra_count udd_int, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, _mode_flag udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan S
		Created Date : 29-12-2022
		
		Updated By : Satheesh
		Updated Date : 21-03-2023
		
		SP Code : B06VFDCUD
		Version No : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
begin 
	-- Validation
	if _mode_flag = 'U' and _venueinfradtl_gid = 0 then
		_mode_flag := 'I';
	end if;
	
	if _mode_flag <> 'D' then
		-- venue id validation
		if not exists (select 	* 
					   from 	trng_mst_tvenue
					   where 	venue_id   = _venue_id	
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB06VFDCUD_004' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VFDCUD_004', _lang_code)  || v_new_line;	
		end if;

		-- facilty id validation
		if not exists (select 	* 
					   from 	trng_mst_tvenueinfra
					   where 	venue_id   = _venue_id	
					   and 		facility_id = _facility_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB06VFDCUD_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VFDCUD_001', _lang_code)  || v_new_line;	
		end if;
		
		-- infra_type validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_VENUE_INFRA'
					   and 		master_code = _infra_type
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VFDCUD_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VFDCUD_002', _lang_code) || v_new_line;	
		end if;
		
		-- Infra count validation
		if _infra_count < 0 then
			v_err_code := v_err_code || 'VB06VFDCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VFDCUD_003', _lang_code) || v_new_line;	
		end if;

		-- status code validation
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_STATUS'
					   and 		master_code = _status_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VFDCUD_005' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VFDCUD_005', _lang_code) || v_new_line;	
		end if;

		-- language code validation
		if not exists (select 	* 
					   from 	core_mst_tlanguage 
					   where 	lang_code = _lang_code
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB06VFDCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB06VFDCUD_006', _lang_code) || v_new_line;	
		end if;		
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	if _mode_flag  = 'D' then
		if exists(select 	* 
				  from 		trng_mst_tvenueinfradtl
				  where 	venueinfradtl_gid = _venueinfradtl_gid
				  and 		status_code   <> 'I'
				 ) then
			Update 	trng_mst_tvenueinfradtl
			set		status_code   = 'I',
					updated_by    = _user_code,
					updated_date  = now()
			where 	venueinfradtl_gid = _venueinfradtl_gid
			and 	status_code = 'A';
			
			v_succ_code := 'SB06VINCUD_003';
		else
			-- Record not in active status to be deleted
			v_err_code := v_err_code || 'EB06VFDCUD_001';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VFDCUD_001', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif ( _mode_flag = 'I' ) then
		if not exists(select 	* 
					  from		trng_mst_tvenueinfradtl
					  where		venueinfradtl_gid = _venueinfradtl_gid
					  and 		status_code <> 'I' 
					 ) then
			insert into trng_mst_tvenueinfradtl 
			(
				venue_id,
				facility_id,
				infra_type,
				infra_count,
				status_code,
				created_date,
				created_by
			)
			values
			(
				_venue_id,
				_facility_id,
				_infra_type,
				_infra_count,
				_status_code,
				now(),
				_user_code
			) returning venueinfradtl_gid into _venueinfradtl_gid;
			
			v_succ_code := 'SB06VINCUD_001';
		else
			-- Record already exists
			v_err_code := v_err_code || 'EB06VFDCUD_002';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VFDCUD_002', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	elsif (_mode_flag = 'U') then 
		if  exists(select 	*
				   from 	trng_mst_tvenueinfradtl
				   where	venueinfradtl_gid = _venueinfradtl_gid
				   and 		status_code   <> 'I'
				   ) then
			update	trng_mst_tvenueinfradtl    
				set infra_type       = _infra_type,
					infra_count		 = _infra_count,
					status_code   		= _status_code,
					updated_by    		= _user_code,
					updated_date  		= now()
			where 	venueinfradtl_gid = _venueinfradtl_gid
			and     status_code  <> 'I';
			
			v_succ_code := 'SB06VINCUD_002';
		else
			v_err_code := v_err_code || 'EB06VFDCUD_003';
			v_err_msg  := v_err_msg ||  fn_get_msg('EB06VFDCUD_003', _lang_code) || v_new_line;	
			
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	if exists (	select	count(*)
				from 	trng_mst_tvenueinfradtl
			    where   venue_id = _venue_id
			    and     facility_id = _facility_id
			    and     infra_type = _infra_type
			    and 	status_code <> 'I'
				group	by venue_id,facility_id,infra_type,status_code
				having	count('*') > 1) 
	then
		-- duplicate validation
		v_err_code := v_err_code || 'VB06VFDCUD_007';
		v_err_msg  := v_err_msg || fn_get_msg('VB06VFDCUD_007', _lang_code);	
		
		raise exception '%',v_err_code || '-' || v_err_msg;
	else
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venueinfradtljson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 04-01-2023
		SP Code      : B06VFDCUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											venueinfradtl_gid udd_int,
											venue_id udd_code,
											facility_id udd_code,
											infra_type udd_code,
											infra_count udd_int,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_mst_tvenueinfradtl(
			  										venueinfradtl_gid,
													venue_id,
													facility_id,
													infra_type,
													infra_count,
				                                    status_code,
													created_date,
													created_by
												)
										values  (										
													v_colrec.venueinfradtl_gid,
													v_colrec.venue_id,
													v_colrec.facility_id,
													v_colrec.infra_type,
													v_colrec.infra_count,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by
												)
										
				on conflict (
								venueinfradtl_gid
							)
							do update set 	venueinfradtl_gid = v_colrec.venueinfradtl_gid,
											venue_id = v_colrec.venue_id,
											facility_id = v_colrec.facility_id,
											infra_type = v_colrec.infra_type,
											infra_count = v_colrec.infra_count,
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venueinfrajson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 26-12-2022
		SP Code      : B06VINCUX
	*/
	v_colrec record;
	v_updated_date udd_datetime;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											venueinfra_gid udd_int,
											venue_id udd_code,
											facility_name udd_desc,
											addr_line udd_text,
											addr_pincode udd_pincode,
											state_code udd_code,
											district_code udd_code,
											block_code udd_code,
											grampanchayat_code udd_code,
											village_code udd_code,
											conf_room_count udd_int,
											conf_room_capacity udd_int,
											accom_overnight_flag udd_flag,
											accom_overnight_capacity udd_int,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;

		      insert into trng_mst_tvenueinfra(
			  										venueinfra_gid,
													venue_id,
													facility_name,
													addr_line,
													addr_pincode,
													state_code,
													district_code,
				                                    block_code,
													grampanchayat_code,
				                                    village_code,
				                                    conf_room_count,
				                                    conf_room_capacity,
				                                    accom_overnight_flag,
				                                    accom_overnight_capacity,
				                                    status_code,
													created_date,
													created_by
												)
										values  (										
													v_colrec.venueinfra_gid,
													v_colrec.venue_id,
													v_colrec.facility_name,
													v_colrec.addr_line,
													v_colrec.addr_pincode,
													v_colrec.state_code,
													v_colrec.district_code,
											        v_colrec.block_code,
													v_colrec.grampanchayat_code,
													v_colrec.village_code,
													v_colrec.conf_room_count,
											        v_colrec.conf_room_capacity,
											        v_colrec.accom_overnight_flag,
											        v_colrec.accom_overnight_capacity,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by
												)
										
				on conflict (
								venueinfra_gid
							)
							do update set 	venueinfra_gid = v_colrec.venueinfra_gid,
											venue_id = v_colrec.venue_id,
											facility_name = v_colrec.facility_name,
											addr_line = v_colrec.addr_line,
											addr_pincode = v_colrec.addr_pincode,
											state_code = v_colrec.state_code,
											district_code = v_colrec.district_code,
											block_code = v_colrec.block_code,
											grampanchayat_code = v_colrec.grampanchayat_code,
											village_code = v_colrec.village_code,
											conf_room_count = v_colrec.conf_room_count,
											conf_room_capacity = v_colrec.conf_room_capacity,
											accom_overnight_flag = v_colrec.accom_overnight_flag,
											accom_overnight_capacity = v_colrec.accom_overnight_capacity,
											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_iud_venuejson(_jsonquery udd_jsonb)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By   : Satheesh
		Created Date : 26-12-2022
		
		Updated By 	 : Mangai
		Updated Date : 24-03-2023
		
		SP Code      : B06VENCUX 
		Version No   : 05
	*/
	v_colrec record;
	v_updated_date udd_datetime;
	v_row_timestamp udd_datetime;
	v_venue_gid udd_int := 0;
begin
	 FOR v_colrec IN select * from jsonb_to_recordset(_jsonquery::udd_jsonb) as items 
	 									(
											venue_gid udd_int,
											venue_id udd_code,
											venue_name udd_desc,
											venue_ll_name udd_desc,
											venue_type_code udd_code,
											venue_subtype_code udd_code,
											contact_name udd_desc,
											contact_mobile_no udd_mobile,
											validity_from udd_date,
											validity_to udd_date,
											indefinite_flag udd_flag,
											others_flag udd_flag,
											status_code udd_code,
											created_date udd_datetime,
											created_by udd_code,
											updated_date udd_text,
											updated_by udd_code,
											row_timestamp udd_text,
											deactivation_reason_code udd_code,
											tprogram_id udd_code,
											tprogrambatch_id udd_code
										)
		  loop
		 	  select fn_text_todatetime(v_colrec.updated_date) into v_updated_date;
			  select fn_text_todatetime(v_colrec.row_timestamp) into v_row_timestamp;
			  
			  if  (v_colrec.venue_type_code <> 'QCD_OTHERS' 
			  and  v_colrec.venue_subtype_code <> 'QCD_OTHERS') then
		      insert into trng_mst_tvenue(
			  										venue_gid,
													venue_id,
													venue_name,
													venue_ll_name,
													venue_type_code,
													venue_subtype_code,
													contact_name,
				                                    contact_mobile_no,
													validity_from,
				                                    validity_to,
				                                    indefinite_flag,
				                                    others_flag,
				                                    status_code,
													created_date,
													created_by,
				                                    row_timestamp,
				                                    deactivation_reason_code,
				  									tprogram_id,
				  									tprogrambatch_id
												)
										values  (										
													v_colrec.venue_gid,
													v_colrec.venue_id,
													v_colrec.venue_name,
													v_colrec.venue_ll_name,
													v_colrec.venue_type_code,
													v_colrec.venue_subtype_code,
													v_colrec.contact_name,
											        v_colrec.contact_mobile_no,
													v_colrec.validity_from,
													v_colrec.validity_to ,
													v_colrec.indefinite_flag,
											        v_colrec.others_flag,
											        v_colrec.status_code,
											        v_colrec.created_date,
											        v_colrec.created_by,
											        v_row_timestamp,
											        v_colrec.deactivation_reason_code,
													v_colrec.tprogram_id,
				  									v_colrec.tprogrambatch_id
												)
										
				on conflict (
-- 								venue_name
-- 								venue_gid
								venue_id
							)
							do update set 	
-- 											venue_gid = v_colrec.venue_gid,
-- 											venue_id = v_colrec.venue_id,
-- 											venue_name = v_colrec.venue_name,
-- 											venue_ll_name = v_colrec.venue_ll_name,
-- 											venue_type_code = v_colrec.venue_type_code,
-- 											venue_subtype_code = v_colrec.venue_subtype_code,
-- 											contact_name = v_colrec.contact_name,
-- 											contact_mobile_no = v_colrec.contact_mobile_no,
-- 											validity_from = v_colrec.validity_from,
-- 											validity_to = v_colrec.validity_to,
-- 											indefinite_flag = v_colrec.validity_to,
-- 											others_flag = v_colrec.others_flag,
-- 											status_code = v_colrec.status_code,
											updated_date = v_updated_date,
											updated_by = v_colrec.updated_by,
											row_timestamp = v_row_timestamp,
-- 											deactivation_reason_code = v_colrec.deactivation_reason_code,
											tprogram_id = v_colrec.tprogram_id,
											tprogrambatch_id = v_colrec.tprogrambatch_id;
			else
				-- Which venue id cames from mobile that venue id inserted on venuemapping table.
				insert into trng_trn_tmobilevenuemapping (tprogram_id,tprogrambatch_id,
														  mobilevenue_id,venue_id,status_code)
				values (v_colrec.tprogram_id,v_colrec.tprogrambatch_id,v_colrec.venue_id,'','A');
				
				insert into trng_mst_tvenue(
											venue_id,
											venue_name,
											venue_ll_name,
											venue_type_code,
											venue_subtype_code,
											contact_name,
											contact_mobile_no,
											validity_from,
											validity_to,
											indefinite_flag,
											others_flag,
											status_code,
											created_date,
											created_by,
											row_timestamp,
											deactivation_reason_code,
											tprogram_id,
											tprogrambatch_id
												)
										values  (										
												v_colrec.venue_id,
												v_colrec.venue_name,
												v_colrec.venue_ll_name,
												v_colrec.venue_type_code,
												v_colrec.venue_subtype_code,
												v_colrec.contact_name,
												v_colrec.contact_mobile_no,
												v_colrec.validity_from,
												v_colrec.validity_to ,
												v_colrec.indefinite_flag,
												v_colrec.others_flag,
												v_colrec.status_code,
												v_colrec.created_date,
												v_colrec.created_by,
												v_row_timestamp,
												v_colrec.deactivation_reason_code,
												v_colrec.tprogram_id,
												v_colrec.tprogrambatch_id
												);
					-- Get max of venue gid 
					select max(venue_gid) into v_venue_gid from trng_mst_tvenue;
										
					update 	trng_trn_tmobilevenuemapping
					set 	venue_id = 'MVEN_' || v_venue_gid
					where 	tprogram_id = v_colrec.tprogram_id 
					and   	tprogrambatch_id = v_colrec.tprogrambatch_id
					and   	mobilevenue_id = v_colrec.venue_id;
					
					update 	trng_mst_tvenue 
					set 	venue_id = 'MVEN_' || v_venue_gid
					where 	venue_gid = v_venue_gid;

			end if;
			END LOOP;
END;
	
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_course(_course_id udd_code, _vertical_code udd_code, _subvertical_jsonb udd_jsonb, _course_level_jsonb udd_jsonb, _course_type_jsonb udd_jsonb, _course_name udd_desc, _status_code udd_code, _user_code udd_user, _role_code udd_code, _lang_code udd_code, INOUT _result_coursereport refcursor DEFAULT 'rs_CourseReport'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Chinnasamy
		Created Date : 11-11-2022
		
		Updated By : Chinnasamy
		Updated Date : 21-11-2022
		
		SP Code : B10CR01
		Version No: 03
	*/
	vsql udd_text := '';
	--v_status_code udd_desc := '';
 
begin
	-- set default values
	if _course_level_jsonb isnull then
		_course_level_jsonb = '[{}]';
	end if;

	if _course_type_jsonb isnull then
		_course_type_jsonb = '[{}]';
	end if;

	if _subvertical_jsonb isnull then
		_subvertical_jsonb = '[{}]';
	end if;
	-- drop temporary table
	drop table if exists trng_tmp_tcourseid;
	
	/*if _screen_mode = 'create' then
			--v_status_code := 'and status_code <> ''I'' ';
			_user_code := null;
		else if _screen_mode = 'modify' then
			v_status_code := 'and status_code not in (''R'',''I'')';
		else if _screen_mode = 'view' then
			v_status_code := '';
			_user_code := null;
		end if;
		end if ;
	end if ;*/
	-- create temporary table for course_id
		vsql = 'create temporary table trng_tmp_tcourseid as 
				select 	distinct a.course_id
				from 	trng_mst_tcourse a,
						jsonb_to_recordset(course_level_jsonb::udd_jsonb) b(course_level udd_text),
						jsonb_to_recordset(course_type_jsonb::udd_jsonb) c(course_type udd_text),
						jsonb_to_recordset(subvertical_jsonb::udd_jsonb) d(subvertical udd_text)
				where   1 = 1 ';
				-- || v_status_code;

		if _course_name <> '' then
			vsql = vsql || ' and course_name ilike ''' || _course_name || '%''collate pg_catalog.""default""';
		end if;

		 if _vertical_code <> '' then
			 vsql = vsql || ' and vertical_code = ''' || _vertical_code || '''';
		 end if;

		if _subvertical_jsonb <> '[{}]' then
			vsql = vsql || 
					'and     d.subvertical in 
					(
						select dd.subvertical from jsonb_to_recordset(''' || _subvertical_jsonb || ''') as dd (subvertical udd_code)
					)';
		end if;

		if _course_level_jsonb <> '[{}]' then
			vsql = vsql || 
				'and     b.course_level in 
				(
					select bb.course_level from jsonb_to_recordset(''' || _course_level_jsonb || ''') as bb (course_level udd_code)
				)';
		end if;

		if _course_type_jsonb <> '[{}]' then
			vsql = vsql || 
				'and     c.course_type in 
				(
					select cc.course_type from jsonb_to_recordset(''' || _course_type_jsonb || ''') as cc (course_type udd_code)
				)';
		end if;

		/*if _status_code <> '' then
			vsql = vsql || ' and a.status_code = ''' || _status_code || '''';
		end if;*/
		-- execute the query variable vsql
		execute vsql;

-- stored procedure body
open _result_courseReport for select 	
									a.course_id,
									a.course_name,
									a.course_ll_name,
									a.course_desc,
									a.category_jsonb::udd_text,
									a.sp_category_jsonb::udd_text,
									a.course_duration_days,
									a.course_duration_hours,
									a.validity_from,
									a.validity_to,
									a.indefinite_flag,
									fn_get_masterdesc('QCD_YES_NO',a.indefinite_flag,_lang_code)  as indefinite_desc,
									a.participant_jsonb::udd_text,
									a.min_participant_count,
									a.max_participant_count,
									a.status_code,
									a.course_type_jsonb::udd_text,
									a.course_level_jsonb::udd_text, 
									fn_get_masterdesc('QCD_VERTICAL',a.vertical_code,_lang_code)  as vertical_code_desc,
									a.vertical_code,
									a.subvertical_jsonb::udd_text
							from 	trng_mst_tcourse as a
							inner join trng_tmp_tcourseid as e
							on a.course_id = e.course_id,
							jsonb_to_recordset(course_level_jsonb) b(course_level udd_text),
							jsonb_to_recordset(course_type_jsonb::udd_jsonb) c(course_type udd_text),
						    jsonb_to_recordset(subvertical_jsonb::udd_jsonb) d(subvertical udd_text)
							where 	a.course_id = _course_id
							/*and     vertical_code = _vertical_code
							and   	subvertical_jsonb = _subvertical_jsonb
							and   	course_level_jsonb = _course_level_jsonb
							and   	course_type_jsonb = _course_type_jsonb
							and   	course_name = _course_name;*/
							and a.vertical_code =
							case
								when _vertical_code ='' or _vertical_code isnull then
									coalesce(a.vertical_code,_vertical_code)
								else
									coalesce(_vertical_code,a.vertical_code)
							end
							and a.subvertical_jsonb =
							case
								when _subvertical_jsonb ='[{}]' or _subvertical_jsonb isnull then
									coalesce(a.subvertical_jsonb,_subvertical_jsonb)
								else
									coalesce(_subvertical_jsonb,a.subvertical_jsonb)
							end
							and a.course_level_jsonb =
							case
								when _course_level_jsonb ='[{}]' or _course_level_jsonb isnull then
									coalesce(a.course_level_jsonb,_course_level_jsonb)
								else
									coalesce(_course_level_jsonb,a.course_level_jsonb)
							end
							and a.course_type_jsonb =
							case
								when _course_type_jsonb ='[{}]' or _course_type_jsonb isnull then
									coalesce(a.course_type_jsonb,_course_type_jsonb)
								else
									coalesce(_course_type_jsonb,a.course_type_jsonb)
							end
							and a.course_name =
							case
								when _course_name ='' or _course_name isnull then
									coalesce(a.course_name,_course_name)
								else
									coalesce(_course_name,a.course_name)
							end
							order by a.course_name;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_feedbackparticipant(_tprogram_id udd_code, _tprogram_name udd_desc, _start_date udd_date, _end_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_fdparticipantlist refcursor DEFAULT '_rs_fdparticipantlist'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
/*
		Created By : Chinnasamy
		Created Date : 09-11-2022
		
		Updated By : Mangai
		Updated Date : 3-03-2023
		
		SP : B10TFPR01
		Version No : 07
*/
		v_config_value udd_desc := '';
		v_user_level udd_code := '';
begin
	select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	if _start_date isnull then
		_start_date := '2000-01-01';
	end if;
	
	if _end_date isnull then
		_end_date := '3000-01-01';
	end if;

	-- Get user level code
	select fn_get_userlevelcode(_user_code) into v_user_level;

	-- stored procedure body 
	open _result_fdparticipantlist for select distinct
										 fbp.tprogram_id,
										 p.tprogram_name,
										 p.tprogram_ll_name,
										 p.tprogram_level_code,
 									 	 fbp.tprogrambatch_id,
										 pb.batch_name,
										 pb.batch_ll_name,
										 pb.lang_code,
										 fn_get_languagedesc(pb.lang_code) as lang_desc,
										 pb.start_date as org_batch_start_date,
										 pb.end_date as org_batch_end_date,
										 to_char(pb.start_date,v_config_value) as batch_start_date,
										 to_char(pb.end_date,v_config_value) as batch_end_date,
										 p.start_date  as org_start_date,
										 p.end_date as org_end_date,
										 to_char(p.start_date,v_config_value) as start_date,
										 to_char(p.end_date,v_config_value) as end_date,
-- 										 fbp.participant_id,
-- 										 fn_get_participantcount(p.tprogram_id) as total_participant_count,
-- 										 fn_get_particattendcount(fbp.tprogram_id) as present_count,
-- 										 fn_get_particabsenttcount(fbp.tprogram_id) as absent_count,
-- 										 fn_get_particattendcount(fbp.tprogram_id) as response_pending_count,
-- 										 fn_get_particabsenttcount(fbp.tprogram_id) as response_complete_count
										 fn_get_participantcount(fbp.tprogram_id,fbp.tprogrambatch_id) as total_participant_count,
										 fn_get_fbcompletecount(fbp.tprogram_id,fbp.tprogrambatch_id) as response_complete_count,
										 fn_get_fbpendingcount(fbp.tprogram_id,fbp.tprogrambatch_id) as response_pending_count,
										 fn_get_partabsenttcount(fbp.tprogram_id,fbp.tprogrambatch_id) as absent_count,
										 fn_get_partpresentcount(fbp.tprogram_id,fbp.tprogrambatch_id) as present_count
									from       trng_trn_tfeedbackparticipant as fbp
									inner join trng_trn_ttprogramparticipant as pp
										  on   fbp.tprogram_id = pp.tprogram_id 
										  and  fbp.tprogrambatch_id = pp.tprogrambatch_id 
										  and  pp.status_code = 'A'
									inner join trng_trn_ttprogram as p 
									      on   fbp.tprogram_id = p.tprogram_id 
									      and  p.status_code <> 'I'
									inner join trng_trn_ttprogrambatch as pb
									     on    fbp.tprogram_id = pb.tprogram_id
									     and   fbp.tprogrambatch_id = pb.tprogrambatch_id
									     and   pb.status_code <> 'I'
									     where p.tprogram_name ilike '%' || _tprogram_name || '%' collate pg_catalog.""default""
									     and   p.start_date >= _start_date
									     and   p.end_date  <= _end_date 
										 and   p.tprogram_level_code <= v_user_level
-- 										 and   pp.feedback_status in ('QCD_COMPLETED','QCD_PENDING')
									order by tprogram_id;
END;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_feedbacktrainer(_tprogram_id udd_code, _tprogrambatch_id udd_code, _trainer_id udd_code, _question_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_feedback_list refcursor DEFAULT 'rs_feedback_list'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
      /*
	      Created By    : Satheesh
	   	  Created Date  : 09-11-2022
		  Updated Date  : 21-11-2022
	      Sp_code       : B10FDTR01
		  Version       : 05
	  */
begin
    open _result_feedback_list for select tprogram_id,
	                                      tprogrambatch_id,
										  trainer_id,
										  questionaire_id,
										  question_id,
										  fn_get_masterdesc('QCD_QUESTION_TYPE',question_type_code,_lang_code) AS question_type_desc,
										  question_type_code,
										  fn_get_masterdesc('QCD_QUESTGRP_CODE',trainers_feedback_code,_lang_code) AS trainers_feedback_desc,
										  trainers_feedback_code,
										  trainers_response,
										  created_date,
										  updated_date
										  from trng_trn_tfeedbacktrainer
										  where tprogram_id = _tprogram_id
										  and trainer_id = 
										  case
										      when
											      _trainer_id isnull or _trainer_id = '' then 
												  coalesce(trainer_id,_trainer_id)
											  else
											      coalesce(_trainer_id,trainer_id)
										  end
                                          and question_id = 
										  case 
										      when 
											      _question_id isnull or _question_id = '' then 
												  coalesce(question_id,_question_id)
											  else
											      coalesce(_question_id,question_id)
										   end
										  and tprogrambatch_id =
										  case
										      when
											     _tprogrambatch_id isnull or _tprogrambatch_id = '' then
												 coalesce(tprogrambatch_id,_tprogrambatch_id)
											  else
											     coalesce(_tprogrambatch_id,tprogrambatch_id)
										  end									 
							              ORDER BY tprogram_id;
										  
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_participantattendance(_tprogram_id udd_code, _tprogrambatch_id udd_code, _participant_id udd_code, _participant_name udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_participant_attendance refcursor DEFAULT 'rs_participant_attendance'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
          Created By    : Satheesh
	   	  Created Date  : 14-11-2022
		  Updated Date  : 21-11-2022
	      Sp_code       : B10PPAR01
		  Version       : 06
*/
begin
          open _result_participant_attendance for select tprogram_id,
                                                         tprogrambatch_id,
                                                         batch_date,
														 fn_get_masterdesc('QCD_PRT_TYPE',participant_type_code,_lang_code) as participant_type_desc,
														 participant_type_code,
														 fn_get_masterdesc('QCD_PRT_SUBTYPE',participant_subtype_code,_lang_code) as participant_subtype_desc,
                                                         participant_subtype_code,
														 participant_id,
														 participant_name,
														 gender_code,
														 status_code,
														 created_date,
														 updated_date
														 from trng_trn_ttprogramparticipant
														 where tprogram_id = _tprogram_id														
														 and tprogrambatch_id = 	
														 case
														     when
															     _tprogrambatch_id isnull or _tprogrambatch_id = '' then
																 coalesce(tprogrambatch_id,_tprogrambatch_id)
														     else
															     coalesce(_tprogrambatch_id,tprogrambatch_id)
														  end	
														  and participant_id =
														  case
														       when
															        _participant_id isnull or _participant_id = '' then
																    coalesce(participant_id,_participant_id)
															   else
															        coalesce(_participant_id,participant_id)
														  end
														  and participant_name =
														  case
														       when
															        _participant_name isnull or _participant_name = '' then
																    coalesce(participant_name,_participant_name)
															   else
															        coalesce(_participant_name,participant_name)
														  end
														  order by participant_name;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_trainer(_trainer_id udd_code, _trngorg_id udd_code, _trngorg_type_code udd_code, _trainer_name udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trainer_list refcursor DEFAULT 'rs_trainer_lst'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
declare
/*

   Created By   : Satheesh
   Created Date : 14-11-2022
   Updated Date : 21-11-2022
   Sp Code      : B10TRR01
   Version No   : 06
   
*/

begin 
open _result_trainer_list for select trngorg_id,
									 trainer_id,
									 trainer_name,
									 trainer_ll_name,
									 fn_get_masterdesc('QCD_RESOURCE_TYPE',resource_type_code,_lang_code) AS resource_type_desc,
									 resource_type_code,
									 fn_get_masterdesc('QCD_TRAINER_TYPE',trainer_type_code,_lang_code) AS trainer_type_desc,
									 trainer_type_code,
									 fn_get_masterdesc('QCD_TRAINER_LEVEL',trainer_level_code,_lang_code) AS trainer_level_desc,
									 trainer_level_code,
									 fn_get_masterdesc('QCD_ORG_TYPE',trngorg_type_code,_lang_code) AS trngorg_type_desc,
									 trngorg_type_code,
									 created_date,
									 updated_date
                                     from trng_mst_ttrainer 
									 where trainer_id = _trainer_id	
									 and trngorg_id =
									 case
									     when
										     _trngorg_id isnull or _trngorg_id = ''then
										     coalesce(trngorg_id,_trngorg_id)
										 else
										     coalesce(_trngorg_id,trngorg_id)
									 end
									 and trainer_name = 
									 case 
									     when
										     _trainer_name isnull or _trainer_name = '' then 
											 coalesce(trainer_name,_trainer_name)
										 else
										     coalesce(_trainer_name,trainer_name)
									 end
									 and trngorg_type_code = 
									 case
									      when
										      _trngorg_type_code isnull or _trngorg_type_code = '' then 
											  coalesce(trngorg_type_code,_trngorg_type_code)
										  else
										      coalesce(_trngorg_type_code,trngorg_type_code)
									 end
									 order by trainer_name;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_trainerleave(_trainer_id udd_code, _from_date udd_date, _to_date udd_date, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_leave_list refcursor DEFAULT 'rs_leave_list'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
/*
	Created By : Chinnasamy
	Created Date : 08-11-2022
	
	Created By : Satheesh
	Created Date : 08-11-2022
	
	Updated By : Chinnasamy
	Updated Date : 19-11-2022
	
	SP Code :B10TLVR01
	Version No : 03
*/
BEGIN
open _result_leave_list  for select 
									a.trainer_id,
									b.trainer_name,
									a.leave_date,
									a.leave_desc,
									a.status_code,
									fn_get_masterdesc('QCD_STATUS',a.status_code,_lang_code) as status_desc
								from trng_trn_ttrainerleave as a
								inner join trng_mst_ttrainer as b 
								on a.trainer_id = b.trainer_id
								where a.trainer_id = _trainer_id 
								and  a.leave_date >= _from_date 
								and a.leave_date <= _to_date 
								order by b.trainer_name;
END;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_rpt_venue(_venue_id udd_code, _venue_type_code udd_code, _venue_subtype_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_venue refcursor DEFAULT '_rs_venue'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
/*
	Created By : Chinnasamy
	Created Date : 14-11-2022
	
	Updated By : Chinnasamy
	Updated Date : 19-11-2022
	
	SP Code : B10VEN01
	Version No : 03
*/
BEGIN
OPEN _result_venue FOR SELECT 
							venue_gid,
							venue_id,
							venue_name,
							venue_ll_name,
							venue_type_code,
							fn_get_masterdesc('QCD_VENUE_TYPE', venue_type_code, _lang_code) as venue_type_desc,
							venue_subtype_code,
							fn_get_masterdesc('QCD_VENUE_SUBTYPE', venue_subtype_code, _lang_code) as venue_subtype_desc,
							contact_name,
							contact_mobile_no,
							validity_from,
							validity_to,
							indefinite_flag,
							fn_get_masterdesc('QCD_YES_NO',indefinite_flag,_lang_code) as indefinite_desc,
							others_flag,
							fn_get_masterdesc('QCD_YES_NO',others_flag,_lang_code) as others_desc,
							status_code,
							fn_get_masterdesc('QCD_STATUS',status_code,_lang_code) as status_desc
					  from  trng_mst_tvenue
					  WHERE venue_id =
					  case
						when _venue_id ='' or _venue_id isnull then
							coalesce(venue_id,_venue_id)
						else
							coalesce(_venue_id,venue_id)
					  end
					  and venue_type_code =
					  case
						when _venue_type_code ='' or _venue_type_code isnull then
							coalesce(venue_type_code,_venue_type_code)
						else
							coalesce(_venue_type_code,venue_type_code)
					  end
					  and venue_subtype_code =
					  case
						when _venue_subtype_code ='' or _venue_subtype_code isnull then
							coalesce(venue_subtype_code,_venue_subtype_code)
						else
							coalesce(_venue_subtype_code,venue_subtype_code)
					  end
					  order by venue_name;
END;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sch_refreshallmv(_schema_arg text DEFAULT 'public'::text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By : Mohan S
		Created Date : 24-02-2023
		SP Code 	 : Refersh Materialized view
		Version No   : 01
	*/
    r RECORD;
BEGIN
    RAISE NOTICE 'Refreshing materialized view in schema %', _schema_arg;
    FOR r IN SELECT matviewname FROM pg_matviews WHERE schemaname = _schema_arg
			 and matviewname not in ('block_master_mv','district_master_mv','state_master_mv',
									'village_master_mv','panchayat_master_mv','mv_village_master')
    LOOP
        RAISE NOTICE 'Refreshing %.%', _schema_arg, r.matviewname;
        EXECUTE 'REFRESH MATERIALIZED VIEW  ' || _schema_arg || '.' || r.matviewname; 
    END LOOP;

END 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_autosendback_course(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mohan S
		Created Date : 25-11-2022
		
		Updated By 	 : Mangai
		Updated Date : 16-03-2022
		
		SP Code 	 : B04COUXUX
		Version No   : 03
	*/
	v_config_value udd_code := '';
	
begin 
	-- get config value for auto send back
	select config_value into v_config_value
	from   core_mst_tconfig 
	where  config_name = 'Auto_sendback_course'
	and    status_code = 'A';
	
	-- note table entry
	insert into trng_mst_tnote 
							(activity_code,
							 activity_ref_id,
							 note_desc,
							 created_date,
							 created_by,
							 note_code,
							 sendback_reason)
	select 'QCD_COURSE',
			course_id,
			'Auto',
			now(),
			'SYSTEM',
			'B',
			'User didnt take any action so its automatically send back'
	from   trng_mst_tcourse
	where  status_code = 'S'
	and    updated_date ::udd_date <= (now() - interval '5 day')::udd_date;
	
	-- update on course table 
	update trng_mst_tcourse 
	set    status_code = 'B',
		   updated_date = now(),
		   updated_by = 'System'
	where  status_code = 'S'
	and    updated_date ::udd_date <= (now() - interval '5 day')::udd_date;
	
	-- update on course approval table
	update trng_mst_tcourseapproval
	set    approval_status_code = 'B',
		   updated_date = now(),
		   updated_by = 'System'
	where  approval_status_code = 'S'
	and    (created_date ::udd_date <= (now() - interval '5 day')::udd_date 
			or updated_date ::udd_date <= (now() - interval '5 day')::udd_date);
	
	_succ_msg := 'Auto sent back successfully for Course..!';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_autosendback_tprogram(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mohan S
		Created Date : 25-11-2022
		
		Updated By 	 : Mangai
		Updated Date : 16-03-2022
		
		SP Code 	 : B04TPGXUX
		Version No   : 03
	*/
	v_config_value udd_code := '';
begin 
	-- get config value for auto send back
	select config_value into v_config_value
	from   core_mst_tconfig 
	where  config_name = 'Auto_sendback_tprogram'
	and    status_code = 'A';
	
	-- note table entry
	insert into trng_mst_tnote 
							(activity_code,
							 activity_ref_id,
							 note_desc,
							 created_date,
							 created_by,
							 note_code,
							 sendback_reason)
	select 'QCD_TRNG_PROGRAM',
			tprogram_id,
			'Auto',
			now(),
			'SYSTEM',
			'B',
			'User didnt take any action so its automatically send back'
	from   trng_trn_ttprogram 
	where  status_code = 'S'
	and    updated_date ::udd_date <= (now() - interval '5 day')::udd_date;
	
	-- update on tprogram table 
	update trng_trn_ttprogram 
	set    status_code = 'B',
		   updated_date = now(),
		   updated_by = 'System'
	where  status_code = 'S'
	and    updated_date ::udd_date <= (now() - interval '5 day')::udd_date;
	
	-- update on tprogram approval table
	update trng_trn_ttprogramapproval
	set    approval_status_code = 'B',
		   updated_date = now(),
		   updated_by = 'System'
	where  approval_status_code = 'S'
	and    (created_date ::udd_date <= (now() - interval '5 day')::udd_date 
			or updated_date ::udd_date <= (now() - interval '5 day')::udd_date);
	
	_succ_msg := 'Auto sent back successfully for Program..!';
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_batchexecutionstatus(_tprogram_id udd_code, _tprogrambatch_id udd_code, _execution_status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 30-11-2022
		
		Updated By 	 : Satheesh
		Updated Date : 22-03-2023
		
		SP Code : B07PBAS01
		Version No : 11
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_total_batch_count udd_int := 0;
	v_total_inprogress udd_int := 0;
	v_total_compl udd_int := 0;
	v_total_can udd_int := 0;
	v_sum udd_int := 0;
	v_total_schdl udd_int := 0;
	v_sum_CL udd_int := 0;
	v_sum_HL udd_int := 0;
	v_sum_CH udd_int := 0;
	v_sum_Ho udd_int := 0;
	v_total_onhold udd_int := 0;
	v_note_gid udd_int := 0;
	v_confirmtrainercount udd_int := 0;
	v_confirmparticipantcount udd_int := 0;
	v_batch_name udd_desc := '';
	v_status_code udd_code := '';
	
	v_colrec_tprogtrn record;
	v_course_id udd_code := '';
	v_feedback_lang_code udd_code := '';
begin
	-- validations
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PBAS01_001' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBAS01_001', _lang_code);	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	-- Get batch name
	select batch_name into v_batch_name
	from   trng_trn_ttprogrambatch
	where  tprogram_id  = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;
	
	-- Get batch language code 
	select lang_code into v_feedback_lang_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code not in ('I','L');
	
	-- Get Batch execution status
	select 	status_code into v_status_code
	from 	trng_trn_ttprogrambatch 
	where 	tprogram_id = _tprogram_id
	and 	tprogrambatch_id = _tprogrambatch_id
	and 	status_code <> 'I';
	
	v_confirmtrainercount := (select fn_get_confirmtrainercount(_tprogram_id,_tprogrambatch_id));
	v_confirmparticipantcount := (select fn_get_confirmparticipantcount(_tprogram_id,_tprogrambatch_id));
	
	if v_status_code = 'P' and _execution_status_code = 'H' then
		v_err_code := v_err_code || 'VB07PBACUD_018' || ',';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBACUD_018', _lang_code),
										   fn_get_masterdesc('QCD_STATUS', v_status_code, _lang_code),
										   fn_get_masterdesc('QCD_STATUS', _execution_status_code, _lang_code))  || v_new_line;
	end if;
	
	if v_status_code = 'O' and _execution_status_code <> 'P' then
		v_err_code := v_err_code || 'VB07PBACUD_018' || ',';
		v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBACUD_018', _lang_code),
										   fn_get_masterdesc('QCD_STATUS', v_status_code, _lang_code),
										   fn_get_masterdesc('QCD_STATUS', _execution_status_code, _lang_code))  || v_new_line;
	end if;
	
	if _execution_status_code <> '' or _execution_status_code notnull then
		if v_status_code = 'C' and _execution_status_code <> 'C' then
			v_err_code := v_err_code || 'VB07PBACUD_019' || ',';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBACUD_019', _lang_code),
											   fn_get_masterdesc('QCD_STATUS', v_status_code, _lang_code))  || v_new_line;
		end if;
	
		if v_status_code = 'L' and _execution_status_code <> 'L' then
			v_err_code := v_err_code || 'VB07PBACUD_019' || ',';
			v_err_msg  := v_err_msg ||  FORMAT(fn_get_msg('VB07PBACUD_019', _lang_code),
											   fn_get_masterdesc('QCD_STATUS', v_status_code, _lang_code))  || v_new_line;
		end if;
	end if;
	
	if _execution_status_code = 'C' then
	
		-- insert in feedback trainer and participant table
		call public.pr_ins_feedback(_tprogram_id, _tprogrambatch_id, v_feedback_lang_code,
									_user_code, _role_code, _lang_code, _succ_msg);
									
		if v_confirmtrainercount = 0 then
			v_err_code := v_err_code || 'VB07PBACUD_013' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_013', _lang_code) || v_new_line;	
		end if;
		
		/*if v_confirmparticipantcount = 0 then
			v_err_code := v_err_code || 'VB07PBACUD_014' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_014', _lang_code) || v_new_line;	
		end if;*/
		
		if exists(select *  from trng_trn_ttprogrambatch
				  where  tprogram_id  = _tprogram_id
				  and    tprogrambatch_id = _tprogrambatch_id
				  and    confirm_venue_id = '') then
			v_err_code := v_err_code || 'VB07PBACUD_015' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_015', _lang_code) || v_new_line;	
		end if;
	end if;
		
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
	update trng_trn_ttprogrambatch
	set    status_code = _execution_status_code,
		   updated_by 	= _user_code,
		   updated_date = now()		   
	where  tprogram_id      = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code 		<> 'I';
	
	-- Insert in note table -- 
	CALL public.pr_iud_notewithcode( 
							v_note_gid,'QCD_TRNG_PROGRAM',_tprogram_id,v_batch_name,_execution_status_code,'',
							'','',_user_code,_role_code,_lang_code,'I',_succ_msg);

	
	-- Get total batch count
	select count(*) into v_total_batch_count
	from   trng_trn_ttprogrambatch
	where  tprogram_id      = _tprogram_id
	and    status_code <> 'I';
	
	-- Get total scheduled batch count
	select count(*) into v_total_schdl
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    status_code = 'H';
	
	-- Get total inprogress batch count
	select count(*) into v_total_inprogress
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    status_code = 'P';
	
	-- Get total complete batch count
	select count(*) into v_total_compl
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    status_code = 'C';
	
	-- Get total cancelled batch count
	select count(*) into v_total_can
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    status_code = 'L';
	
	-- Get total onhold batch count
	select count(*) into v_total_onhold
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    status_code = 'O';
	
	-- Sum of completed and cancelled 		
	v_sum_CL := v_total_compl + v_total_can;
	v_sum_HL := v_total_schdl + v_total_can;
	v_sum_CH := v_total_compl + v_total_schdl;
	v_sum_HO :=v_total_schdl + v_total_onhold;
	
	-- Update execution status in program table	
	if v_total_inprogress > 0  or v_sum_CH = v_total_batch_count or v_sum_HO = v_total_batch_count
	then
		update trng_trn_ttprogram
		set    execution_status_code = 'P',
			   execution_status_date = now(),
			   updated_by 	= _user_code,
			   updated_date = now()		
		where  tprogram_id  = _tprogram_id;
	end if;
	
	if v_total_schdl = v_total_batch_count or v_sum_HL = v_total_batch_count
	then
		update trng_trn_ttprogram
		set    execution_status_code = 'H',
			   execution_status_date = now(),
			   updated_by 	= _user_code,
			   updated_date = now()		
		where  tprogram_id  = _tprogram_id;
	end if;

	if v_sum_CL = v_total_batch_count or v_total_batch_count = v_total_compl
	then
		update trng_trn_ttprogram
		set    execution_status_code = 'C',
			   execution_status_date = now(),
			   updated_by 	= _user_code,
			   updated_date = now()		
		where  tprogram_id  = _tprogram_id;
	end if;
	
	if v_total_can = v_total_batch_count 
	then
		update trng_trn_ttprogram
		set    execution_status_code = 'L',
			   execution_status_date = now(),
			   updated_by 	= _user_code,
			   updated_date = now()		
		where  tprogram_id  = _tprogram_id;
	end if;
	
	if v_total_onhold = v_total_batch_count or v_total_onhold > 0 and (v_total_onhold > v_total_inprogress)
	then
		update trng_trn_ttprogram
		set    execution_status_code = 'O',
			   execution_status_date = now(),
			   updated_by 	= _user_code,
			   updated_date = now()		
		where  tprogram_id  = _tprogram_id;
	end if;
	
	-- get course_id
	select fn_get_tprogrmcourseid(_tprogram_id) into v_course_id;
	-- course trainer table insert statement
	if _execution_status_code = 'C' then
		for v_colrec_tprogtrn in  select tprogrambatch_id,org_type_code,trngorg_id,
								  		 trainer_id,trainer_type_code
								  from   trng_trn_ttprogramtrainer 
								  where  tprogram_id = _tprogram_id 
								  and    confirmation_flag = 'Y'
								  and    status_code = 'A'
		loop
			if not exists (select * from trng_mst_tcoursetrainer
						   where course_id   = v_course_id
						   and   trainer_id  = v_colrec_tprogtrn.trainer_id
						   and 	 status_code = 'A') then
			   insert into trng_mst_tcoursetrainer
						   (course_id,trainer_id,trainer_type_code,status_code,
						    trngorg_type_code,trngorg_id,trainer_flag,
						    created_date,created_by)
					values (v_course_id,v_colrec_tprogtrn.trainer_id,
							v_colrec_tprogtrn.trainer_type_code,
							'A',v_colrec_tprogtrn.org_type_code,
							v_colrec_tprogtrn.trngorg_id,'Y',
							now(),_user_code);
			end if;			   
		end loop;
	end if;
	
/*		if v_total_compl = 0 and v_total_batch_count = v_total_can
		then
			update trng_trn_ttprogram
			set    execution_status_code = 'L',
				   execution_status_date = now(),
				   updated_by 	= _user_code,
				   updated_date = now()		
			where  tprogram_id  = _tprogram_id;
		else
			update trng_trn_ttprogram
			set    execution_status_code = 'C',
				   execution_status_date = now(),
				   updated_by 	= _user_code,
				   updated_date = now()		
			where  tprogram_id  = _tprogram_id;
		end if;
	end if;*/
/*  elseif v_total_compl = 0 and v_total_batch_count = v_total_can
	then
		update trng_trn_ttprogram
		set    execution_status_code = 'L',
			   execution_status_date = now(),
			   updated_by 	= _user_code,
			   updated_date = now()		
		where  tprogram_id  = _tprogram_id;
*/

	v_succ_code := 'SB07PBAS01_001';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_bcpmemberprofileconsolidated(_member_file_name udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By : Mangai
	Created Date : 13-04-2023
	version no : 1
*/
	v_colrec record;
	v_sql text := '';
begin
	v_sql = 'create temporary table temp_member_profile_consolidated
				(
					local_id bigint NOT NULL,
					state_id integer,
					state_code character varying COLLATE pg_catalog.""default"",
					district_id integer,
					district_code character varying COLLATE pg_catalog.""default"",
					block_id integer,
					block_code character varying COLLATE pg_catalog.""default"",
					gp_id integer,
					gp_code character varying COLLATE pg_catalog.""default"",
					village_id integer,
					village_code character varying COLLATE pg_catalog.""default"",
					member_id bigint,
					member_code bigint,
					shg_id bigint,
					shg_code character varying(50) COLLATE pg_catalog.""default"",
					seq_no smallint,
					member_name character varying(100) COLLATE pg_catalog.""default"" NOT NULL,
					member_name_local character varying(100) COLLATE pg_catalog.""default"",
					relation_type character varying(1) COLLATE pg_catalog.""default"",
					relation_name character varying(100) COLLATE pg_catalog.""default"",
					relation_name_local character varying(100) COLLATE pg_catalog.""default"",
					gender smallint,
					religion smallint,
					social_category smallint,
					tribal_category smallint,
					highest_education_level smallint,
					dob_available smallint,
					dob date,
					age smallint,
					age_as_on date,
					minority smallint,
					is_disabled smallint,
					disability_details smallint,
					primary_occupation smallint,
					secondary_occupation smallint,
					tertiary_occupation smallint,
					joining_date date NOT NULL,
					leaving_date date,
					reason_for_leaving smallint,
					guardian_name character varying(100) COLLATE pg_catalog.""default"",
					guardian_name_local character varying(100) COLLATE pg_catalog.""default"",
					guardian_relation smallint,
					house_hold_code smallint,
					head_house_hold integer,
					insurance integer,
					is_active boolean,
					mem_activation_status smallint,
					approve_status smallint,
					mem_dedup_status smallint,
					settlement_status smallint,
					source smallint,
					created_date date,
					last_updated_date date,
					activation_date date,
					last_approval_date date,
					add1_type smallint,
					add1_line1 character varying(255) COLLATE pg_catalog.""default"",
					add1_line2 character varying(255) COLLATE pg_catalog.""default"",
					add1_village_id integer,
					add1_state_id integer,
					add1_district_id integer,
					add1_block_id integer,
					add1_gp_id integer,
					add1_postal_code integer,
					other_addresses_json text COLLATE pg_catalog.""default"",
					kyc1_type smallint,
					kyc1_number character varying(50) COLLATE pg_catalog.""default"",
					kyc1_status smallint,
					other_kyc_json text COLLATE pg_catalog.""default"",
					bank1_account_type smallint,
					bank1_account_no character varying(20) COLLATE pg_catalog.""default"",
					bank1_branch_code character varying(12) COLLATE pg_catalog.""default"",
					bank1_ifsc_code character varying(20) COLLATE pg_catalog.""default"",
					bank1_account_open_date date,
					bank1_passbook_name character varying(60) COLLATE pg_catalog.""default"",
					bank1_verification_status smallint,
					other_banks_json text COLLATE pg_catalog.""default"",
					id1_system_type smallint,
					id1_system_id character varying(25) COLLATE pg_catalog.""default"",
					id1_status smallint,
					id2_system_type smallint,
					id2_system_id character varying(25) COLLATE pg_catalog.""default"",
					id2_status smallint,
					id3_system_type smallint,
					id3_system_id character varying(25) COLLATE pg_catalog.""default"",
					id3_status smallint,
					other_ids_json text COLLATE pg_catalog.""default"",
					design1_cbo_type smallint,
					design1_cbo_id integer,
					design1_cbo_code character varying(15) COLLATE pg_catalog.""default"",
					desig1_category smallint,
					desig1_role smallint,
					desig1_from date,
					desig1_to date,
					desig1_status smallint,
					design2_cbo_type smallint,
					design2_cbo_id integer,
					design2_cbo_code character varying(15) COLLATE pg_catalog.""default"",
					design2_category smallint,
					desig2_role smallint,
					desig2_from date,
					desig2_to date,
					desig2_status smallint,
					design3_cbo_type smallint,
					design3_cbo_id integer,
					design3_cbo_code character varying(15) COLLATE pg_catalog.""default"",
					desig3_category smallint,
					desig3_role smallint,
					desig3_from date,
					desig3_to date,
					desig3_status smallint,
					desig_others_json text COLLATE pg_catalog.""default"",
					ins1_type smallint,
					ins1_valid_till date,
					ins2_type smallint,
					ins2_valid_till date,
					ins3_type smallint,
					ins3_valid_till date,
					ins_others_json text COLLATE pg_catalog.""default"",
					phone1_mobile_no bigint,
					phone1_phone_ownership smallint,
					phone2_mobile_no bigint,
					phone2_phone_ownership bigint,
					other_phones_json text COLLATE pg_catalog.""default"",
					CONSTRAINT member_profile_consolidated_pkey_1 PRIMARY KEY (local_id)
				);
			
			 	copy temp_member_profile_consolidated from'|| chr(39) || _member_file_name || chr(39) ||'delimiter '','' CSV HEADER;';
	--	copy temp_member_profile_consolidated from 'E:/member_profile_consolidated.csv' delimiter ',' CSV HEADER;
	execute v_sql;
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_cadreuser(INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
/*
	Created By : Mangai
	Created Date : 18-02-2023 
	
	Updated By : Mohan S
	Updated Date : 18-02-2023
	
	SP Code : B05INTXUX
	version no : 02
*/
	v_succ_code udd_text := '';
    v_succ_msg udd_text := '';
	v_cadreuser_id udd_code := '';
	v_trainer_id udd_code  := '';
begin

	-- stored procedure body
	for v_cadreuser_id in (select cadreuser_id from trng_mst_tcadreuser 
						   where cadreuser_id not in (select cadre_id from trng_mst_ttrainer
													  where status_code = 'A'
													  and   cadre_id notnull) 
						   and   status_code = 'A'
						  ) 
	loop
			CALL pr_iud_cadreuser(v_cadreuser_id,v_trainer_id,'',null,null,'','','','SYSTEM','','en_US',
								  v_succ_msg);
								  v_trainer_id := '';
	end loop;
	
 	_succ_msg := 'Completed..!';
	
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_confirmattendance(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _participant_id udd_jsonb, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 25-11-2022
		
		Updated By   : Satheesh
		Updated Date : 22-03-2023
		
		SP Code : B07PPAS01
		Version No   : 07
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_status_code udd_code := '';
	v_participant_id udd_code := '';
	v_colrec record;
	v_colrec1 record;
begin
	-- validations
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PPAS01_001' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPAS01_001', _lang_code);	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	-- Get batch status
	select status_code into v_status_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id      = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;
	
-- 	if v_status_code <>  'P'

	if v_status_code in ('H','O','L')
	then 
			v_err_code := v_err_code || 'VB07PBACUD_016' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_016', _lang_code) || v_new_line;	
	end if;
	
	if v_status_code = 'C'
	then 
			v_err_code := v_err_code || 'VB07PPACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_009', _lang_code);	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
		for v_colrec in select * from jsonb_to_recordset(_participant_id::udd_jsonb) as items 
													(
													 participant_id udd_text,
													 participant_type_code udd_code,
													 participant_subtype_code udd_code,
													 attendance_flag udd_flag
													)
		LOOP
				update trng_trn_ttprogramparticipant
				set    attendance_flag = v_colrec.attendance_flag,
					   updated_by = _user_code,
					   updated_date = now()		   
				where  tprogram_id      = _tprogram_id
				and    tprogrambatch_id = _tprogrambatch_id
				and    batch_date               = _batch_date
				and    participant_type_code    = v_colrec.participant_type_code
				and    participant_subtype_code = v_colrec.participant_subtype_code
				and    participant_id   = v_colrec.participant_id
				and    status_code 		<> 'I';
		end loop;
	
	v_succ_code := 'SB07PPAS01_001';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_confirmtrainer(_tprogram_id udd_code, _tprogrambatch_id udd_code, _trainer_id udd_jsonb, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 26-10-2022
		
		Updated By   : Satheesh
		Updated Date : 22-03-2023
		
		SP Code :  B07PTRS01
		Version No   : 6
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_trainer_id udd_code := '';
	v_status_code udd_code := '';
begin
	-- validations
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PTRS01_001' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PTRS01_001', _lang_code);	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	-- Get batch status
	select status_code into v_status_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id      = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;
	
-- 	if v_status_code <>  'P'
	if v_status_code in ('H','O','L')
	then 
			v_err_code := v_err_code || 'VB07PBACUD_016' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_016', _lang_code);	
	end if;
	
	if v_status_code = 'C'
	then 
			v_err_code := v_err_code || 'VB07PPACUD_009' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PPACUD_009', _lang_code);	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;

	-- update confirmation flag as 'N'
	update trng_trn_ttprogramtrainer
	set     confirmation_flag = 'N',
			updated_by = _user_code,
			updated_date = now()	
	where  tprogram_id      = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code <> 'I';
	
	for v_trainer_id in (select * from jsonb_to_recordset(_trainer_id) as b (trainer_id udd_text))
	LOOP
			update trng_trn_ttprogramtrainer
			set    confirmation_flag = 'Y',
				   updated_by = _user_code,
				   updated_date = now()		   
			where  tprogram_id      = _tprogram_id
			and    tprogrambatch_id = _tprogrambatch_id
			and    trainer_id       = v_trainer_id
			and    status_code 		<> 'I';
	end loop;
	
	v_succ_code := 'SB07PTRS01_001';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_confirmvenue(_tprogram_id udd_code, _tprogrambatch_id udd_code, _confirm_venue_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mohan S
		Created Date 	: 26-10-2022
		
		Updated By   : Satheesh
		Updated Date : 22-03-2023
		
		SP Code : B07PBAS02
		Version No   : 6
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_status_code udd_code := '';
	v_confirm_venue_id udd_code := '';
	v_tprogram_venue_id udd_code := '';
begin
	-- Validation
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PBAS02_001' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBAS02_001', _lang_code);	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	-- Confirm Venue id cannot be empty
	/*if _confirm_venue_id = '' then 
		v_err_code := v_err_code || 'VB07PRGCUD_007' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_007', _lang_code)|| v_new_line;	
	end if;*/
	
	-- Get batch status
	select status_code, tprogram_venue_id, confirm_venue_id
	into   v_status_code, v_tprogram_venue_id, v_confirm_venue_id
	from   trng_trn_ttprogrambatch
	where  tprogram_id      = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id;
	
-- 	if v_status_code <>  'P'
	if v_status_code in ('H','O','L')
	then 
			v_err_code := v_err_code || 'VB07PBACUD_016' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_016', _lang_code)  || v_new_line;	
	end if;
	
	if v_status_code = 'C'
	then 
			v_err_code := v_err_code || 'VB07PBACUD_020' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_020', _lang_code)  || v_new_line;	
	end if;
	
	if _tprogram_id = '' or _tprogram_id isnull
	then
			v_err_code := v_err_code || 'VB07PBAS02_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBAS02_002', _lang_code)  || v_new_line;	
	end if;
	
	if _tprogrambatch_id = '' or _tprogrambatch_id isnull
	then
			v_err_code := v_err_code || 'VB07PBAS02_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBAS02_003', _lang_code)  || v_new_line;	
	end if;
	
-- 	if v_confirm_venue_id <> '' 
-- 	then
-- 		v_err_code := v_err_code || 'VB07PBACUD_021' || ',';
-- 		v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBACUD_021', _lang_code)  || v_new_line;
-- 	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;

	
	-- Venue id schould be in venue master
	/*
	if not exists (select 	'*'
					   from 	trng_mst_tvenue
					   where 	venue_id   = _confirm_venue_id
					   and      status_code <> 'I'
					  ) then
			v_err_code := v_err_code || 'VB07PRGCUD_007' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PRGCUD_007', _lang_code)  || v_new_line;	
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	*/
	
	if v_tprogram_venue_id = '' or v_tprogram_venue_id isnull
	then
		update trng_trn_ttprogrambatch
		set    tprogram_venue_id = _confirm_venue_id,
			   confirm_venue_id = _confirm_venue_id,
			   updated_by = _user_code,
			   updated_date = now()		   
		where  tprogram_id      = _tprogram_id
		and    tprogrambatch_id = _tprogrambatch_id
		and    status_code 		<> 'I';
	else
		update trng_trn_ttprogrambatch
		set    confirm_venue_id = _confirm_venue_id,
			   updated_by = _user_code,
			   updated_date = now()		   
		where  tprogram_id      = _tprogram_id
		and    tprogrambatch_id = _tprogrambatch_id
		and    status_code 		<> 'I';
	end if;
	
	v_succ_code := 'SB07PBAS02_001';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_courseapproval(INOUT _course_id udd_code, INOUT _approver_id udd_code, _approval_status_code udd_code, _reject_reason_code udd_code, _approver_remark udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Mohan ಠ_ಠ 
		Created Date : 11-10-2022
		SP Code : B04CAPSET
		
		Updated By : Satheesh
		Updated Date : 16-03-2023
		
		Version No : 02
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
begin 
	-- course id validation
	if not exists (select 	* 
				   from 	trng_mst_tcourse
				   where 	course_id   = _course_id		
				   and      status_code <> 'I'
				  ) then
		v_err_code := v_err_code || 'VB04CAPCUD_004' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_004', _lang_code)  || v_new_line;	
	end if;
		
	-- approver id validation
	if _approver_id = '' then
		v_err_code := v_err_code || 'VB04CAPCUD_002' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_002', _lang_code) || v_new_line;	
	end if;
	
	-- approver remark validation
	if _approval_status_code = 'A' then
		if _approver_remark = '' then
			v_err_code := v_err_code || 'VB04CAPCUD_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_003', _lang_code) || v_new_line;	
		end if;
	end if;
	
	-- approval status code validation
	if not exists (select 	* 
				   from 	core_mst_tmaster 
				   where 	parent_code = 'QCD_STATUS'
				   and 		master_code = _approval_status_code 
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB04CAPCUD_005' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_005', _lang_code) || v_new_line;	
	end if;
	
	-- reject reason code validation
	if _approval_status_code = 'R' then
		if not exists (select 	* 
					   from 	core_mst_tmaster 
					   where 	parent_code = 'QCD_REJ_REASON'
					   and 		master_code = _reject_reason_code 
					   and 		status_code = 'A'
					  ) then
			v_err_code := v_err_code || 'VB04CAPCUD_006' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_006', _lang_code) || v_new_line;	
		end if;
	end if;
	
	-- language code validation
	if not exists (select 	* 
				   from 	core_mst_tlanguage 
				   where 	lang_code = _lang_code
				   and 		status_code = 'A'
				  ) then
		v_err_code := v_err_code || 'VB04CAPCUD_007' || ',';
		v_err_msg  := v_err_msg ||  fn_get_msg('VB04CAPCUD_007', _lang_code) || v_new_line;	
	end if;
	
	if length(v_err_code) > 0 then
		v_err_code := substring(v_err_code,1,length(v_err_code)-1);
		RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
	end if;
	
		-- Updation in course approval
		if _approval_status_code = 'A' then 
			update	trng_mst_tcourseapproval 
			set 	approval_date        = now(),
					reject_reason_code	 = _reject_reason_code,
					approver_remark      = _approver_remark,
					approval_status_code = _approval_status_code,
					updated_by           = _user_code,
					updated_date         = now()
			where 	course_id 		= _course_id
			and 	approver_id 	= _approver_id
			and 	approval_status_code   = 'S';
			
			update 	trng_mst_tcourse 
			set 	status_code = 'A',
					updated_by   = _user_code,
					updated_date = now()
			where	 course_id 	= _course_id;
			
			v_succ_code := 'SB04CAPCUD_002';
			
		end if;
		
		if(v_succ_code <> '' )then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_emailtran(_emailtran_gid udd_int, _tprogram_id udd_code, _tprogrambatch_id udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mangai
		Created Date : 1-02-2023
		
		SP Code    : B01EMAS01
		Version no : 1
	*/
begin	
			update  trng_trn_temailtran 
			set 	status_code = 'I',
					email_delivered_flag = 'Y',
					updated_date = now(),
					updated_by = 'Admin'
			where 	emailtran_gid = _emailtran_gid;
			
			_succ_msg := 'Record Deleted Successfully';
	
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_emailtranrejected(_emailtran_gid udd_int, _tprogram_id udd_code, _tprogrambatch_id udd_code, _remark udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mangai
		Created Date : 01-02-2023
		
		Sp Code    : B01EMAS02
		Version No : 1
	*/
begin	
			update  trng_trn_temailtran 
			set 	email_remark   = _remark,
					updated_date = now(),
					updated_by   = 'Admin'
			where 	emailtran_gid  = _emailtran_gid;
			
			_succ_msg := 'Record Updated Successfully';
	
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_feedback(_tprogram_id udd_code, _tprogrambatch_id udd_code, _feedback_lang_code udd_code, _questionaire_id udd_code, _trn_part_feedback_jsonb udd_jsonb, _status_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By 	 : Mohan S
		Created Date : 13-12-2022
		
		Updated By : Satheesh
		Updated Date : 22-03-2023
		
		SP Code 	 : B03FTAS01
		Version No   : 06
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_questionaire_type_code udd_code := '';
	v_trainer_fb record; 
	v_participants_fb record;
	v_response_status udd_code = 'QCD_PENDING';
	
	v_feedback_status udd_code := '';
	
begin 	
	-- Get questionaire_type_code 	 
	select questionaire_type_code into v_questionaire_type_code
	from   trng_mst_tquestionaire 
	where  questionaire_id = _questionaire_id
	and    status_code = 'A';
	
	-- Get batch language code 
	select lang_code into _feedback_lang_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code not in ('I','L');	
	
	-- Response is already Submitted
	if v_questionaire_type_code = 'QCD_TRAINER' then
			select feedback_status into v_feedback_status
			from   trng_trn_ttprogramtrainer 
			where  tprogram_id = _tprogram_id
			and    tprogrambatch_id = _tprogrambatch_id
			and    status_code = 'A';

			if v_feedback_status = 'QCD_COMPLETED' then
				v_err_code := v_err_code || 'VB03FTAS01_001' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTAS01_001', _lang_code)  || v_new_line;
			end if;
	elseif v_questionaire_type_code = 'QCD_TRAINER' then	
			select feedback_status into v_feedback_status
			from   trng_trn_ttprogramparticipant 
			where  tprogram_id = _tprogram_id
			and    tprogrambatch_id = _tprogrambatch_id
			and    status_code = 'A';

			if v_feedback_status = 'QCD_COMPLETED' then
				v_err_code := v_err_code || 'VB03FTAS01_001' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB03FTAS01_001', _lang_code)  || v_new_line;
			end if;	
	end if;
		
	--  Updation in feedback trainer
	if _status_code = 'save' then
		if _trn_part_feedback_jsonb <> '[{}]' and v_questionaire_type_code = 'QCD_TRAINER' then

			for v_trainer_fb in select * from jsonb_to_recordset(_trn_part_feedback_jsonb::udd_jsonb) as items
														(
															question_id udd_code,
															question_type_code udd_code,
															feedbacktrn_part_gid udd_int,
															trn_part_id udd_code,
															trn_part_feedback_code udd_code,
															trn_part_response udd_text
														)
				LOOP 	

					call pr_iud_feedbacktrainer(v_trainer_fb.feedbacktrn_part_gid,_tprogram_id,
												_tprogrambatch_id,v_trainer_fb.trn_part_id,
												_feedback_lang_code,_questionaire_id,v_trainer_fb.question_id,
												v_trainer_fb.question_type_code,v_trainer_fb.trn_part_feedback_code,
												v_trainer_fb.trn_part_response,v_response_status,
												_user_code,_role_code,_lang_code,'U',_succ_msg);

							update trng_trn_ttprogramtrainer 
							set    feedback_status = 'QCD_PENDING'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    trainer_id = v_trainer_fb.trn_part_id
							and    confirmation_flag = 'Y'
							and    status_code = 'A';
			
						if (v_trainer_fb.trn_part_feedback_code <> '' or v_trainer_fb.trn_part_response <> '') then
							update trng_trn_tfeedbacktrainer 
							set    response_status = 'QCD_COMPLETED'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    trainer_id = v_trainer_fb.trn_part_id
							and    question_id = v_trainer_fb.question_id;
-- 							and    status_code = 'A';
						end if;	
							v_response_status := 'QCD_PENDING';

				end loop;
			end if;
		
			--  Updation in feedback participant
			if _trn_part_feedback_jsonb <> '[{}]' and v_questionaire_type_code = 'QCD_PARTICIPANT' then

				for v_participants_fb in select * from jsonb_to_recordset(_trn_part_feedback_jsonb::udd_jsonb) as items1
															(
																question_id udd_code,
																question_type_code udd_code,
																feedbacktrn_part_gid udd_int,
																trn_part_id udd_code,
																trn_part_feedback_code udd_code,
																trn_part_response udd_text
															)
					LOOP 	
						call pr_iud_feedbackparticipant(v_participants_fb.feedbacktrn_part_gid,_tprogram_id,
														_tprogrambatch_id,v_participants_fb.trn_part_id,
														_feedback_lang_code,_questionaire_id,v_participants_fb.question_id,
														v_participants_fb.question_type_code,v_participants_fb.trn_part_feedback_code,
														v_participants_fb.trn_part_response,v_response_status,
														_user_code,_role_code,_lang_code,'U',_succ_msg);

							update trng_trn_ttprogramparticipant
							set    feedback_status = 'QCD_PENDING'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    participant_id = v_participants_fb.trn_part_id
							and    attendance_flag = 'QCD_YES'
							and    status_code = 'A';

						if (v_participants_fb.trn_part_feedback_code <> '' or v_participants_fb.trn_part_response <> '') then
							update trng_trn_tfeedbackparticipant
							set    response_status = 'QCD_COMPLETED'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    participant_id = v_participants_fb.trn_part_id
							and    question_id = v_participants_fb.question_id;
						end if;	
						
						v_response_status := 'QCD_PENDING';
						
					end loop;
				end if;
				v_succ_code := 'SB03FTAS01_002';
		end if;
		
		if _status_code = 'submitted' then
			if _trn_part_feedback_jsonb <> '[{}]' and v_questionaire_type_code = 'QCD_TRAINER' then

			for v_trainer_fb in select * from jsonb_to_recordset(_trn_part_feedback_jsonb::udd_jsonb) as items
														(
															question_id udd_code,
															question_type_code udd_code,
															feedbacktrn_part_gid udd_int,
															trn_part_id udd_code,
															trn_part_feedback_code udd_code,
															trn_part_response udd_text
														)
				LOOP 	

					call pr_iud_feedbacktrainer(v_trainer_fb.feedbacktrn_part_gid,_tprogram_id,
												_tprogrambatch_id,v_trainer_fb.trn_part_id,
												_feedback_lang_code,_questionaire_id,v_trainer_fb.question_id,
												v_trainer_fb.question_type_code,v_trainer_fb.trn_part_feedback_code,
												v_trainer_fb.trn_part_response,v_response_status,
												_user_code,_role_code,_lang_code,'U',_succ_msg);

							update trng_trn_ttprogramtrainer 
							set    feedback_status = 'QCD_COMPLETED'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    trainer_id = v_trainer_fb.trn_part_id
							and    confirmation_flag = 'Y'
							and    status_code = 'A';

						if (v_trainer_fb.trn_part_feedback_code <> '' or v_trainer_fb.trn_part_response <> '') then
							update trng_trn_tfeedbacktrainer 
							set    response_status = 'QCD_COMPLETED'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    trainer_id = v_trainer_fb.trn_part_id
							and    question_id = v_trainer_fb.question_id;
-- 							and    status_code = 'A';
						end if;	
							v_response_status := 'QCD_PENDING';

				end loop;
			end if;
		
			--  Updation in feedback participant
			if _trn_part_feedback_jsonb <> '[{}]' and v_questionaire_type_code = 'QCD_PARTICIPANT' then

				for v_participants_fb in select * from jsonb_to_recordset(_trn_part_feedback_jsonb::udd_jsonb) as items1
															(
																question_id udd_code,
																question_type_code udd_code,
																feedbacktrn_part_gid udd_int,
																trn_part_id udd_code,
																trn_part_feedback_code udd_code,
																trn_part_response udd_text
															)
					LOOP 	
						call pr_iud_feedbackparticipant(v_participants_fb.feedbacktrn_part_gid,_tprogram_id,
														_tprogrambatch_id,v_participants_fb.trn_part_id,
														_feedback_lang_code,_questionaire_id,v_participants_fb.question_id,
														v_participants_fb.question_type_code,v_participants_fb.trn_part_feedback_code,
														v_participants_fb.trn_part_response,v_response_status,
														_user_code,_role_code,_lang_code,'U',_succ_msg);

							update trng_trn_ttprogramparticipant
							set    feedback_status = 'QCD_COMPLETED'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    participant_id = v_participants_fb.trn_part_id
							and    attendance_flag = 'QCD_YES'
							and    status_code = 'A';
							
						if (v_participants_fb.trn_part_feedback_code <> '' or v_participants_fb.trn_part_response <> '') then
							update trng_trn_tfeedbackparticipant
							set    response_status = 'QCD_COMPLETED'
							where  tprogram_id = _tprogram_id
							and    tprogrambatch_id = _tprogrambatch_id
							and    participant_id = v_participants_fb.trn_part_id
							and    question_id = v_participants_fb.question_id;
-- 							and    status_code = 'A';
						end if;	
						v_response_status := 'QCD_PENDING';
					end loop;
				end if;
				v_succ_code := 'SB03FTAS01_001';
		end if;
		
		if v_succ_code <> '' then
			_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
		end if;
	
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_shorturl(_smstran_gid udd_int, _original_url udd_text, _short_url udd_desc, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mangai
		Created Date : 2-03-2023
		
		Updated By : Satheesh
		Updated Date : 04-03-2023
		
		SP Code : B04SMSXUX
		Version No : 4
	*/
	v_sms_text udd_text := '';
	v_succ_code udd_text := '';
	v_sms_text1 udd_text := '';
begin	
			update  trng_trn_tsmstran 
			set 	original_url = _original_url,
					short_url = _short_url,
					updated_date = now(),
					updated_by = 'Admin'
			where 	smstran_gid = _smstran_gid
			and     status_code = 'A';
			
			-- Get sms text
			select sms_text into v_sms_text
			       from trng_trn_tsmstran
				   where smstran_gid = _smstran_gid
				   and status_code = 'A';
				   
		    -- Get short URL
			v_sms_text1 := replace(v_sms_text collate pg_catalog.""default"",'""feedbackurl""',_short_url);
			
			update trng_trn_tsmstran 
			set sms_text = v_sms_text1
			where smstran_gid = _smstran_gid
			and status_code = 'A';
			
			-- Insert in emailtran table
			call pr_email_feedbackpart('','','');
			
			_succ_msg := 'Record updated successfully';
	
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_smstran(_smstran_gid udd_int, _tprogram_id udd_code, _tprogrambatch_id udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mangai
		Created Date : 21-01-2022
		SP Code : B04SMSXXD
	*/
begin	
			update  trng_trn_tsmstran 
			set 	status_code = 'I',
					sms_delivered_flag = 'Y',
					updated_date = now(),
					updated_by = 'Admin'
			where 	smstran_gid = _smstran_gid;
			
			_succ_msg := 'Record Deleted Successfully';
	
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_smstranrejected(_smstran_gid udd_int, _tprogram_id udd_code, _tprogrambatch_id udd_code, _remark udd_text, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
declare
	/*
		Created By : Mangai
		Created Date : 21-01-2023
		SP Code : B04SMSXXU
	*/
begin	
			update  trng_trn_tsmstran 
			set 	sms_remark   = _remark,
					updated_date = now(),
					updated_by   = 'Admin'
			where 	smstran_gid  = _smstran_gid;
			
			_succ_msg := 'Record Updated Successfully';
	
end
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_tprogrambatch(_tprogram_id udd_code, _tprogrambatch_id udd_code, _tprogrambatch_remark udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mangai
		Created Date 	: 16-11-2022
		
		Updated By : Satheesh
		Updated Date : 22-03-2023
		
		SP Code    : B07PBAS03
		Version No : 03
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
begin
	if _tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = _tprogram_id)then
			v_err_code := v_err_code || 'VB07PBAS03_001' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PBAS03_001', _lang_code);	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	update trng_trn_ttprogrambatch
	set    tprogrambatch_remark = _tprogrambatch_remark,
		   updated_by = _user_code,
		   updated_date = now()		   
	where  tprogram_id      = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code 		<> 'I';
	
	v_succ_code := 'SB07PBAS03_001';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_set_tprogramexpensereason(_tprogramexpense_gid udd_int, _expense_reason udd_text, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 	: Mangai
		Created Date 	: 13-01-2023
		
		Updated By : Sathessh
		Updated Date : 22-03-2023
		
		SP Code : B07PEXS01
		Version No : 3
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_tprogram_id udd_code := '';
begin
	 select tprogram_id into v_tprogram_id 
	 from   trng_trn_ttprogramexpense
	 where tprogramexpense_gid = _tprogramexpense_gid
	 and status_code = 'A';
	
	if v_tprogram_id <> '' then
	    if exists (select * from trng_trn_ttprogramlock
				   where tprogram_id = v_tprogram_id)then
			v_err_code := v_err_code || 'VB07PEXS01_001' ;
			v_err_msg  := v_err_msg ||  fn_get_msg('VB07PEXS01_001', _lang_code);	
		raise exception '%',v_err_code || '-' || v_err_msg;
		end if;
	end if;
	
	update trng_trn_ttprogramexpense
	set    expense_reason = _expense_reason,
		   updated_by = _user_code,
		   updated_date = now()		   
	where  tprogramexpense_gid = _tprogramexpense_gid
	and    status_code 		<> 'I';
	
	v_succ_code := 'SB07PEXS01_001';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_forgetmpin(_forgetmpin udd_desc, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mangai
		Created Date : 13-03-2022
		
		Updated By : Mangai
		Updated  Date : 21-03-2023
		
		SP Code      : B01MPNCXX
		Version No   : 3
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_sms_template udd_text := '';
	v_dlt_template_id udd_code := '';
	v_mobile_no udd_mobile := '';
	v_smstemplate_code udd_code := 'SMST_MPIN';
begin
			-- Validations
			-- user code validation
			if _user_code = '' then
				v_err_code := v_err_code || 'VB01MPNCXX_001' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB01MPNCXX_001', _lang_code) || v_new_line;	
			end if;

			-- forgetpassword cannot be blank
			if _forgetmpin = '' then
				v_err_code := v_err_code || 'VB01MPNCXX_002' || ',';
				v_err_msg  := v_err_msg ||  fn_get_msg('VB01MPNCXX_002', _lang_code) || v_new_line;	
			end if;

			if length(v_err_code) > 0 then
				v_err_code := substring(v_err_code,1,length(v_err_code)-1);
				RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
			end if;
			
			-- Get mobile no 
			select  mobile_no into v_mobile_no
			from	core_mst_tuser 
			where   user_code = _user_code
			and     status_code = 'A';
	
			-- send sms
			SELECT 
					sms_template,dlt_template_id 
			into 	v_sms_template,v_dlt_template_id
			FROM 	core_mst_tsmstemplate
			where 	smstemplate_code = v_smstemplate_code
			and		lang_code = _lang_code
			and 	status_code = 'A';
			
			v_sms_template := coalesce(v_sms_template,'');
			v_dlt_template_id := coalesce(v_dlt_template_id,'');
			
			if (v_dlt_template_id <> '' and (v_mobile_no <> '' or v_mobile_no <> '0')) then
				v_sms_template := replace(v_sms_template collate pg_catalog.""default"",'{#MPIN#}',_forgetmpin);
				
				-- Store procedure Call
				call public.pr_iud_smstran ('','','','','','',v_mobile_no,'','',
										v_smstemplate_code,v_dlt_template_id,v_sms_template,_user_code,
										_role_code);
									
				_succ_msg := 'MPIN Send Successfully';
			end if;
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_forgetpswd(_forgetpassword udd_desc, _mobile_no udd_mobile, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mohan S
		Created Date : 07-03-2023
		
		Updated By : Mangai
		Updated Date : 1-04-2023
		
		SP Code      : B01FRGCXX
		version no   : 04
	*/
	v_err_code 	udd_text := '';
	v_err_msg 	udd_text := '';
	v_succ_code udd_text := '';
	v_new_line udd_text = chr(13)||chr(10);
	
	v_sms_template udd_text := '';
	v_dlt_template_id udd_code := '';
	v_smstemplate_code udd_code := 'SMST_FRGPSWD';
	v_mobile_no udd_mobile := '';
begin
		-- Validations
		-- user code validation
		if _user_code = '' then
			v_err_code := v_err_code || 'VB01FRGCXX_001' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB01FRGCXX_001', _lang_code) || v_new_line;	
		end if;
		
		-- forgetpassword cannot be blank
		if _forgetpassword = '' then
			v_err_code := v_err_code || 'VB01FRGCXX_002' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB01FRGCXX_002', _lang_code) || v_new_line;	
		end if;
		
		-- mobile no cannot be empty
		if (_mobile_no = '' or _mobile_no = '0') then
			v_err_code := v_err_code || 'VB01FRGCXX_003' || ',';
			v_err_msg  := v_err_msg ||  fn_get_msg('VB01FRGCXX_003', _lang_code) || v_new_line;	
		end if;
		
		if length(v_err_code) > 0 then
			v_err_code := substring(v_err_code,1,length(v_err_code)-1);
			RAISE EXCEPTION '%',v_err_code || '-' || v_err_msg;
		end if;
	
		-- Get mobile no 
-- 		select  mobile_no into v_mobile_no
-- 		from	core_mst_tuser 
-- 		where   user_code = _user_code
-- 		and     status_code = 'A';

		-- send sms
		SELECT 
				sms_template,dlt_template_id 
		into 	v_sms_template,v_dlt_template_id
		FROM 	core_mst_tsmstemplate
		where 	smstemplate_code = v_smstemplate_code
		and		lang_code = _lang_code
		and 	status_code = 'A';

		v_sms_template := coalesce(v_sms_template,'');
		v_dlt_template_id := coalesce(v_dlt_template_id,'');

		if v_dlt_template_id <> '' and (_mobile_no <> '' or _mobile_no <> '0') then
			v_sms_template := replace(v_sms_template collate pg_catalog.""default"",'{#Pwd#}',_forgetpassword);

			-- Store procedure Call
			call public.pr_iud_smstran ('','','','','','',_mobile_no,'','',
										v_smstemplate_code,v_dlt_template_id,v_sms_template,_user_code,
										'System');

			_succ_msg := 'Record Created Successfully';
		end if;
			
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_programapproved(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Satheesh
		Created Date : 20-02-2023
		
		Updated By : Mangai
		Updated Date : 06-04-2023
		
		SP Code : B07PRGM01
		Version No : 05
	*/
	v_colrec record;
	
	v_current_date udd_date := null;
	v_coordinator_id udd_code  := '';
	v_coordinator_name udd_desc := '';
	
	v_mobile_no udd_text := '';
	v_smstemplate_code udd_text := '';
	v_sms_template udd_text := '';
	v_sms_content udd_text := '';
	v_template_id udd_code := '';
	v_lang_code udd_code := ''; 
begin 
		v_smstemplate_code := 'SMST_PROGRAM_APPREJ';
		v_current_date := (select now()::udd_date);
		
		select lang_code into v_lang_code
		from   core_mst_tsmstemplate
		where  smstemplate_code = v_smstemplate_code
		and    lang_code = _lang_code;
		
		v_lang_code := coalesce(v_lang_code,'');
		
		if v_lang_code = '' then
			v_lang_code := 'en_US';
		end if;
		
		-- Get template 
		select sms_template, dlt_template_id 
		into   v_sms_template, v_template_id 
		from   core_mst_tsmstemplate
		where  smstemplate_code = v_smstemplate_code
		and    lang_code = v_lang_code;
		
		-- Get Course name 
		select  coordinator_id
		into    v_coordinator_id
		from   trng_trn_ttprogram
		where  tprogram_id = _tprogram_id;
		
		-- Get Coordinator name 
		select  mobile_no, user_name
		into    v_mobile_no, v_coordinator_name 
		from	core_mst_tuser 
		where   user_code = v_coordinator_id
		and     status_code = 'A';
		
		-- sms Content Creation							  
-- 		v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'""Name""',v_coordinator_name);
		v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
 		v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'""Approved/ Rejected""','approved');
		
		-- Insert in sms tran table
		if v_mobile_no <> ''  then
			if not exists (select * from trng_trn_tsmstran
						   where mobile_no = v_mobile_no
						   and 	 smstemplate_code = v_smstemplate_code
						   and 	 sms_text = v_sms_content
						   ) then
					 call pr_iud_smstran (	_tprogram_id,
											'',
											'',
											'',
											'',
											'',
											v_mobile_no,
											'',
											'',
											v_smstemplate_code,
											v_template_id,
											v_sms_content,
											_user_code,
											'TrainingCoordinator');
												 
-- 									 v_mobile_no := '';
-- 									 v_sms_content := '';
-- 									 v_smstemplate_code := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_programparticipant(_tprogram_id udd_code, _tprogrambatch_id udd_code, _batch_date udd_date, _participant_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Satheesh
		Created Date : 22-02-2023
		
		Updated By : Mangai
		Updated Date : 06-04-2023
		
		SP Code : B07PPAM01
		Version No : 03
	*/
	v_colrec record;
	v_current_date udd_date := null;
	v_participant_name udd_desc := '';
	v_program_name udd_text := '';
	v_tprogram_venue_id udd_code := '';
	v_venue_name udd_desc := '';
	v_addr_line udd_text := '';
	v_venue udd_text := '';
	
	v_mobile_no udd_text := '';
	v_smstemplate_code udd_text := '';
	v_sms_template udd_text := '';
	v_sms_content udd_text := '';
	v_template_id udd_code := '';

	v_batch_lang udd_code := '';
	v_lang_code udd_code := '';
begin  
		v_smstemplate_code := 'SMST_PROGRAM_PART';
		v_current_date := (select now()::udd_date);
		
		-- Get batch lang
		select lang_code into v_batch_lang
		from   trng_trn_ttprogrambatch
		where  tprogram_id = _tprogram_id
		and    tprogrambatch_id = _tprogrambatch_id
		and    status_code <> 'I';
		
		select lang_code into v_lang_code
		from   core_mst_tsmstemplate
		where  smstemplate_code = v_smstemplate_code
		and    lang_code = v_batch_lang;
		
		v_lang_code := coalesce(v_lang_code,'');
		
		if v_lang_code = '' then
			v_lang_code := 'en_US';
		end if;
		
-- 		raise exception 'v_lang_code%',v_lang_code;
		-- Get template 
		select sms_template, dlt_template_id
		into   v_sms_template , v_template_id
		from   core_mst_tsmstemplate
		where  smstemplate_code = v_smstemplate_code
		and    lang_code = v_lang_code;
		
		-- Get Program name 
		v_program_name := (select fn_get_programname(_tprogram_id));
		
		-- Get email id and participant name
		select  mobile_no, participant_name 
		into    v_mobile_no, v_participant_name
		from	trng_trn_ttprogramparticipant
		where   tprogram_id = _tprogram_id
		and     tprogrambatch_id = _tprogrambatch_id
		and     batch_date = _batch_date
		and     participant_id = _participant_id
		and     status_code = 'A';
		
		-- Get venue id from batch table
		select case when confirm_venue_id = ''  or confirm_venue_id isnull then
					tprogram_venue_id 
				else 
					confirm_venue_id
				end 
				into v_tprogram_venue_id
		from   trng_trn_ttprogrambatch
		where  tprogram_id  =  _tprogram_id
		and    tprogrambatch_id = _tprogrambatch_id
		and    status_code <> 'I';
		
		-- Get venue name
		select venue_name into v_venue_name
		from   trng_mst_tvenue 
		where  venue_id = v_tprogram_venue_id
		and    status_code = 'A';
		
		v_venue_name := coalesce(v_venue_name,'');
		
		-- Get venue addr line
		select addr_line into v_addr_line
		from   trng_mst_tvenueaddr 
		where  venue_id = v_tprogram_venue_id
		and    status_code = 'A';
		
		v_addr_line := coalesce(v_addr_line,'');
		
		-- venue
		v_venue := v_venue_name || ' ' || v_addr_line;
		
		v_venue := coalesce(v_venue,'');

		-- Email Content Creation							  
-- 		v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'""Name""',v_participant_name);
		v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
		v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'""Training program name""',v_program_name);
		v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'""date""',_batch_date :: udd_code);
		v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'""venue""',v_venue);
		v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'""time""','');
		
		-- Insert in email tran table
		if v_mobile_no <> ''  then
			if not exists (select * from trng_trn_tsmstran
						   where mobile_no = v_mobile_no
						   and 	 smstemplate_code = v_smstemplate_code
						   and 	 sms_text = v_sms_content
						   ) then
							call pr_iud_smstran (	_tprogram_id,
													_tprogrambatch_id,
													'',
													'',
													'',
													'',
													v_mobile_no,
													'',
													'',
													v_smstemplate_code,
													v_template_id,
													v_sms_content,
													_user_code,
													'TrainingCoordinator');

-- 											 v_mobile_no := '';
-- 											 v_sms_content := '';
-- 											 v_smstemplate_code := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_programrejected(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code)
 LANGUAGE plpgsql
AS $procedure$
declare
    /*
		Created By : Satheesh
		Created Date : 22-02-2023
		
		Updated By : Mangai
		Updated Date : 06-04-2023
		
		SP Code : B07PRGM02
		Version No : 04
	*/
	v_colrec record;
	
	v_current_date udd_date := null;
	v_coordinator_id udd_code  := '';
	v_coordinator_name udd_desc := '';
	
	v_mobile_no udd_text := '';
	v_smstemplate_code udd_text := '';
	v_sms_template udd_text := '';
	v_sms_content udd_text := '';
	v_template_id udd_code := '';
	v_lang_code udd_code := ''; 
begin 
		v_smstemplate_code := 'SMST_PROGRAM_APPREJ';
		v_current_date := (select now()::udd_date);
		
		select lang_code into v_lang_code
		from   core_mst_tsmstemplate
		where  smstemplate_code = v_smstemplate_code
		and    lang_code = _lang_code;
		
		v_lang_code := coalesce(v_lang_code,'');
		
		if v_lang_code = '' then
			v_lang_code := 'en_US';
		end if;
		
		-- Get template 
		select sms_template, dlt_template_id 
		into v_sms_template, v_template_id 
		from   core_mst_tsmstemplate
		where  smstemplate_code = v_smstemplate_code
		and    lang_code = v_lang_code;
		
		-- Get Course name 
		select  coordinator_id
		into    v_coordinator_id
		from   trng_trn_ttprogram
		where  tprogram_id = _tprogram_id;
		
		-- Get Coordinator name 
		select  mobile_no, user_name
		into    v_mobile_no, v_coordinator_name 
		from	core_mst_tuser 
		where   user_code = v_coordinator_id
		and     status_code = 'A';
		
		-- sms Content Creation							  
-- 		v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'""Name""',v_coordinator_name);
		v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'""Training Program ID""',_tprogram_id);
 		v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'""Approved/ Rejected""','rejected');
		
		-- Insert in sms tran table
		if v_mobile_no <> ''  then
			if not exists (select * from trng_trn_tsmstran
						   where mobile_no = v_mobile_no
						   and 	 smstemplate_code = v_smstemplate_code
						   and 	 sms_text = v_sms_content
						   ) then
					 call pr_iud_smstran (	_tprogram_id,
											'',
											'',
											'',
											'',
											'',
											v_mobile_no,
											'',
											'',
											v_smstemplate_code,
											v_template_id,
											v_sms_content,
											_user_code,
											'TrainingCoordinator');
												 
-- 									 v_mobile_no := '';
-- 									 v_sms_content := '';
-- 									 v_smstemplate_code := '';

			end if;
		end if;
					  
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_trainerparturllink(_tprogram_id udd_code, _tprogrambatch_id udd_code, _feedback_lang_code udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$

declare
    /*
		Created By   : Mohan S
		Created Date : 30-12-2022
		
		Update By : Mangai
		Updated Date : 04-05-2023
		
		SP Code      : B04SMSM01
		version no 	 : 06
	*/
	v_sms_template udd_text := '';
	v_sms_content udd_text := '';
	v_dlt_template_id udd_code := '';
	v_sms_template1 udd_text := '';
	v_sms_template2 udd_text := '';
	v_sms_content1 udd_text := '';
	v_sms_content2 udd_text := '';
	v_dlt_template_id1 udd_code := '';
	v_dlt_template_id2 udd_code := '';
	v_smstemplate_code udd_code := 'SMST_TRN_URL';
	v_smstemplate_code1 udd_code := 'SMST_PRT_URL';
	v_smstemplate_code2 udd_code := 'SMST_FEEDBACK_PART';

	v_participant_name udd_desc := '';
	v_program_name udd_desc := '';
	v_config_value udd_desc := '';
	v_batch_startdate udd_text := '';
	v_batch_enddate udd_text := '';
	v_batch_date udd_text := '';

	v_questionaire_id udd_code := 0;
	v_question_type_code udd_code := '';
	v_t_questionaire_type_code udd_code := '';
	v_P_questionaire_type_code udd_code := '';
	v_mobile_no udd_mobile := '';
	
	v_course_id udd_code := '';
	v_trainer_questionaire_id udd_code := '';
	v_participant_questionaire_id udd_code := '';
	
	v_colrec_trainer_fb record;
	v_colrec_participant_fb record;
	
begin

    select config_value into v_config_value from core_mst_tconfig
	where config_name = 'date_format'
	and status_code = 'A';
	
	-- Get course id 
	select course_id into v_course_id from trng_trn_ttprogram
	where tprogram_id = _tprogram_id
	and status_code = 'A';
	 
	-- Get batch language code 
	select lang_code into _feedback_lang_code
	from   trng_trn_ttprogrambatch
	where  tprogram_id = _tprogram_id
	and    tprogrambatch_id = _tprogrambatch_id
	and    status_code not in ('I','L');
	
	-- Get Questionaire id
	select 	questionaire_id into v_questionaire_id
	from 	trng_mst_vquestionairecourse 
	where 	course_id = v_course_id;
		
	v_questionaire_id := coalesce(v_questionaire_id,'');

 	if v_questionaire_id = ''  then
		select 	config_value into v_trainer_questionaire_id
		from 	core_mst_tconfig
		where 	config_name = 'trainer_questionaire_id'
		and 	status_code = 'A';	
		
		select 	config_value into v_participant_questionaire_id
		from 	core_mst_tconfig
		where 	config_name = 'participant_questionaire_id'
		and 	status_code = 'A';
	else 
		v_trainer_questionaire_id := v_questionaire_id;
		v_participant_questionaire_id := v_questionaire_id;
	end if;
	
	-- get questionaire type code against trainer
	select 	questionaire_type_code into v_t_questionaire_type_code
	from 	trng_mst_tquestionaire
	where 	questionaire_id = v_trainer_questionaire_id
	and 	status_code = 'A';

	-- send sms credentials for trainer 
	SELECT 
		sms_template,dlt_template_id into v_sms_template,v_dlt_template_id
	FROM 	core_mst_tsmstemplate
	where 	smstemplate_code = v_smstemplate_code
	and 	lang_code = _lang_code
	and 	status_code = 'A';

	v_sms_template := coalesce(v_sms_template,'');
	v_dlt_template_id := coalesce(v_dlt_template_id,'');
	
	if (v_dlt_template_id <> '') then		
		-- SMS Trigger For Program Trainers
		if v_t_questionaire_type_code = 'QCD_TRAINER' then
		
			FOR v_colrec_trainer_fb in select distinct trainer_id from trng_trn_ttprogramtrainer
									  where tprogram_id = _tprogram_id 
									  and tprogrambatch_id = _tprogrambatch_id
									  and confirmation_flag = 'Y'
									  and status_code = 'A'
				LOOP 	
				v_sms_content := replace(v_sms_template collate pg_catalog.""default"",'{#tprogram_id#}','&tp_id='||_tprogram_id);
				v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'{#tprogrambatch_id#}','&tb_id='||_tprogrambatch_id);
				v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'{#lang_code#}','&fblang_code='||_lang_code);
				v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'{#feedback_type_code#}','&fb_type_code='||v_t_questionaire_type_code);
				v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'{#trainer_id#}','&trnprt_id='||v_colrec_trainer_fb.trainer_id);
				v_sms_content := replace(v_sms_content collate pg_catalog.""default"",'{#quesionaire_id#}','&qtn_id='||v_trainer_questionaire_id);

				-- Get trainer mobile_no 
				select public.fn_get_trainermobileno(v_colrec_trainer_fb.trainer_id) 
				into v_mobile_no;
				
				if (v_mobile_no <> '0' or v_mobile_no notnull) then
					if not exists ( select * from trng_trn_tsmstran where tprogram_id = _tprogram_id
									and tprogrambatch_id = _tprogrambatch_id
									and questionaire_id = v_trainer_questionaire_id
									and trainer_part_id = v_colrec_trainer_fb.trainer_id
									and status_code in ('S','A')) then
						call pr_iud_smstran(_tprogram_id,_tprogrambatch_id,_feedback_lang_code,
											v_t_questionaire_type_code,v_trainer_questionaire_id,
											v_colrec_trainer_fb.trainer_id,v_mobile_no,
											v_sms_content,'',v_smstemplate_code,v_dlt_template_id,
											v_sms_content,_user_code,_role_code);
					end if;
				end if;
			end loop;
		end if;
	end if;
			-- get questionaire type code against participant
			select 	questionaire_type_code into v_p_questionaire_type_code
			from 	trng_mst_tquestionaire
			where 	questionaire_id = v_participant_questionaire_id
			and 	status_code = 'A';

			-- send sms credentials for participant
			SELECT sms_template,dlt_template_id into v_sms_template1,v_dlt_template_id1
			FROM 	core_mst_tsmstemplate
			where 	smstemplate_code = v_smstemplate_code1
			and 	lang_code = _lang_code
			and 	status_code = 'A';

			v_sms_template1 := coalesce(v_sms_template1,'');
			v_dlt_template_id1 := coalesce(v_dlt_template_id1,'');
	
	        -- Get SMStemplate for feedback participant
			select  sms_template, dlt_template_id 
			into    v_sms_template2, v_dlt_template_id2
			from    core_mst_tsmstemplate
			where   smstemplate_code = v_smstemplate_code2
			and 	lang_code = _lang_code
			and 	status_code = 'A';
			
			v_sms_template2 := coalesce(v_sms_template2,'');
			v_dlt_template_id2 := coalesce(v_dlt_template_id2,'');
			
	       if (v_dlt_template_id1 <> '') and (v_dlt_template_id2 <> '') then		
		    -- SMS Trigger For Program Participants 
		        if v_p_questionaire_type_code = 'QCD_PARTICIPANT' then

			FOR v_colrec_participant_fb in select participant_id from trng_trn_ttprogramparticipant
									  where tprogram_id = _tprogram_id 
									  and tprogrambatch_id = _tprogrambatch_id
									  and attendance_flag = 'QCD_YES'
									  and status_code = 'A'
			LOOP 	
				v_sms_content1 := replace(v_sms_template1 collate pg_catalog.""default"",'{#tprogram_id#}','&tp_id='||_tprogram_id);
				v_sms_content1 := replace(v_sms_content1 collate pg_catalog.""default"",'{#tprogrambatch_id#}','&tb_id='||_tprogrambatch_id);
				v_sms_content1 := replace(v_sms_content1 collate pg_catalog.""default"",'{#lang_code#}','&fblang_code='||_lang_code);
				v_sms_content1 := replace(v_sms_content1 collate pg_catalog.""default"",'{#feedback_type_code#}','&fb_type_code='||v_p_questionaire_type_code);
				v_sms_content1 := replace(v_sms_content1 collate pg_catalog.""default"",'{#participant_id#}','&trnprt_id='||v_colrec_participant_fb.participant_id);
				v_sms_content1 := replace(v_sms_content1 collate pg_catalog.""default"",'{#quesionaire_id#}','&qtn_id='||v_participant_questionaire_id);
				
				-- Get Participant mobile_no
				select public.fn_get_participantmobileno(_tprogram_id,_tprogrambatch_id,v_colrec_participant_fb.participant_id) 
				into v_mobile_no;
				
				-- Get Program Name
				select fn_get_programname(_tprogram_id) into v_program_name;
				
				-- Get Participant Name
				select fn_get_participantname(v_colrec_participant_fb.participant_id) into v_participant_name;
				
				-- Get Batch Start Data and End Date
				select(to_char(fn_get_batchstartdate(_tprogram_id, _tprogrambatch_id)::udd_date,v_config_value)) into v_batch_startdate;
				select(to_char(fn_get_batchenddate(_tprogram_id, _tprogrambatch_id)::udd_date,v_config_value)) into v_batch_enddate;
				v_batch_date := v_batch_startdate || '-' || v_batch_enddate;
				
				-- Sms Text Creation							  
-- 						v_sms_content2 := replace(v_sms_template2 collate pg_catalog.""default"",'""Name""',v_participant_name);
						v_sms_content2 := replace(v_sms_template2 collate pg_catalog.""default"",'""programName""',v_program_name);
						v_sms_content2 := replace(v_sms_content2 collate pg_catalog.""default"",'""date""',v_batch_date);
-- 						v_sms_content2 := replace(v_sms_content2 collate pg_catalog.""default"",'""feedbackurl""',v_colrec.short_url);
                
				-- Insert into Tran Table
						if (v_mobile_no <> '0' or v_mobile_no notnull) then
							if not exists ( select * from trng_trn_tsmstran where tprogram_id = _tprogram_id
											and tprogrambatch_id = _tprogrambatch_id
											and questionaire_id = v_participant_questionaire_id
											and trainer_part_id = v_colrec_participant_fb.participant_id
											and status_code in ('S','A')) then
								call pr_iud_smstran(_tprogram_id,
													_tprogrambatch_id,
													_feedback_lang_code,
													v_p_questionaire_type_code,
													v_participant_questionaire_id,
													v_colrec_participant_fb.participant_id,
													v_mobile_no,
													v_sms_content1,
													'',
													v_smstemplate_code1,
													v_dlt_template_id1,
													v_sms_content2,
													_user_code,
													_role_code);
							end if;
						end if;
					end loop;
				end if;
			end if;

	         _succ_msg := 'Setup Completed';
			
end 
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_trngprogrambatchlist(_tprogram_id udd_code, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trngprgmbatch refcursor DEFAULT 'rs_trngprgmbatch'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mohan Raja S
		Created date : 12-01-2023
		SP Code		 : B07PBAM01	
		version no 	 : 01
	*/
	-- v_partcipant_count udd_int := 0;
	-- v_trainer_count udd_int := 0;
begin
	-- v_trainer_count := (select fn_get_confirmtrainercount(_tprogram_id));
	-- v_partcipant_count := (select fn_get_particattendcount(_tprogram_id));
	
	-- Store procedure body
	-- if v_trainer_count > 0 or v_partcipant_count > 0 then
		open _result_trngprgmbatch for select
										  tp.tprogram_id,
										  tp.tprogram_name,
										  coalesce(tp.tprogram_ll_name,'') as tprogram_ll_name,
										  tpb.tprogrambatch_id,
										  tpb.batch_name,
										  coalesce(tpb.batch_ll_name,'') as batch_ll_name,
										  tpb.lang_code,
										  tp.tprogram_level_code,
										  fn_get_masterdesc('QCD_TRAINER_LEVEL',tp.tprogram_level_code, _lang_code) as tprogram_level_desc
									  from trng_trn_ttprogram as tp
									  inner join trng_trn_ttprogrambatch as tpb
									  on tp.tprogram_id = tpb.tprogram_id 
									  and tpb.status_code in  ('P','C')
									  where tp.tprogram_id = _tprogram_id
									  and tp.status_code = 'A'
									  order by tp.tprogram_id asc;
	-- else
		-- open _result_trngprgmbatch for select '';
	-- end if;
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_sms_trngprogramlist(_user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _result_trngprgm refcursor DEFAULT 'rs_trngprgm'::refcursor)
 LANGUAGE plpgsql
AS $procedure$

Declare
	/*
		Created by   : Mohan Raja S
		Created date : 12-01-2023
		SP Code		 : B07PRGM03
		version no 	 : 01
	*/
begin
	
	-- Store Procedure Body
	open _result_trngprgm for select distinct
								  a.tprogram_id,
								  a.tprogram_name,
								  coalesce(a.tprogram_ll_name,'') as tprogram_ll_name,
								  a.tprogram_level_code,
								  fn_get_masterdesc('QCD_TRAINER_LEVEL',a.tprogram_level_code, 'en_US') as tprogram_level_desc
							  from trng_trn_ttprogram as a
							  inner join trng_trn_ttprogrambatch as b
							  on a.tprogram_id = b.tprogram_id 
							  and b.status_code = 'C'
							  where a.execution_status_code in ('P','C')
							  and a.status_code = 'A';
	/*open _result_trngprgm for (select distinct
								  a.tprogram_id,
								  a.tprogram_name,
								  coalesce(a.tprogram_ll_name,'') as tprogram_ll_name,
								  a.tprogram_level_code,
								  fn_get_masterdesc('QCD_TRAINER_LEVEL',a.tprogram_level_code, 'en_US') as tprogram_level_desc
							  from trng_trn_ttprogram as a
							  inner join trng_trn_ttprogramparticipant as b
							  on a.tprogram_id = b.tprogram_id
							  and b.attendance_flag = 'QCD_YES'
							  where a.status_code = 'A'
							  order by a.tprogram_id asc)
							  union
							 ( select distinct
								  a.tprogram_id,
								  a.tprogram_name,
								  coalesce(a.tprogram_ll_name,'') as tprogram_ll_name,
								  a.tprogram_level_code,
								  fn_get_masterdesc('QCD_TRAINER_LEVEL',a.tprogram_level_code, 'en_US') as tprogram_level_desc
							  from trng_trn_ttprogram as a
							  inner join trng_trn_ttprogramtrainer as b
							  on a.tprogram_id = b.tprogram_id
							  and b.confirmation_flag = 'Y'
							  where a.status_code = 'A'
							  order by a.tprogram_id asc);*/
	
End;

$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_undo_confirmtrainer(_tprogram_id udd_code, _tprogrambatch_id udd_code, _trainer_id udd_jsonb, _user_code udd_code, _role_code udd_code, _lang_code udd_code, INOUT _succ_msg udd_text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
	/*
		Created By 	 : Mangai
		Created Date : 17-11-2022
	*/
	v_succ_code udd_text := '';
	v_trainer_id udd_code := '';
begin
	
	for v_trainer_id in (select * from jsonb_to_recordset(_trainer_id) as b (trainer_id udd_text))
	LOOP
			update trng_trn_ttprogramtrainer
			set    confirmation_flag = 'N',
				   updated_by = _user_code,
				   updated_date = now()		   
			where  tprogram_id      = _tprogram_id
			and    tprogrambatch_id = _tprogrambatch_id
			and    trainer_id       = v_trainer_id
			and    status_code 		<> 'I';
	end loop;
	
	v_succ_code := 'SB00CMNCMN_002';
		
	if(v_succ_code <> '' )then
		_succ_msg := v_succ_code || '-' || fn_get_msg(v_succ_code,_lang_code);
	end if;
	
end;
$procedure$
"
"CREATE OR REPLACE PROCEDURE public.pr_vijay(INOUT _result_configfetch refcursor DEFAULT 'rs_config'::refcursor)
 LANGUAGE plpgsql
AS $procedure$
DECLARE 
begin
	call pr_fetch_config('date_format',_result_configfetch);
end;
$procedure$
"
